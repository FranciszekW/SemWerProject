-----------------------------------------------------------------------------
Info file generated by Happy Version 1.20.0 from FraJer/Par.y
-----------------------------------------------------------------------------


-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_pInstr -> Instr                             (0)
	%start_pExpr -> Expr                               (1)
	%start_pStmt -> Stmt                               (2)
	%start_pDef -> Def                                 (3)
	%start_pParams -> Params                           (4)
	%start_pArgs -> Args                               (5)
	%start_pLambda -> Lambda                           (6)
	%start_pSType -> SType                             (7)
	%start_pFType -> FType                             (8)
	Ident -> L_Ident                                   (9)
	Integer -> L_integ                                 (10)
	SType -> 'Int'                                     (11)
	SType -> 'Bool'                                    (12)
	FType -> 'IntFunc'                                 (13)
	FType -> 'BoolFunc'                                (14)
	Expr2 -> Ident '(' Args ')'                        (15)
	Expr2 -> Ident                                     (16)
	Expr2 -> Integer                                   (17)
	Expr2 -> Ident '++'                                (18)
	Expr2 -> '++' Ident                                (19)
	Expr2 -> Ident '--'                                (20)
	Expr2 -> '--' Ident                                (21)
	Expr2 -> Ident '[' Expr ']'                        (22)
	Expr2 -> Ident 'get' '[' Expr ']'                  (23)
	Expr2 -> '(' Expr ')'                              (24)
	Expr2 -> 'true'                                    (25)
	Expr2 -> 'false'                                   (26)
	Expr2 -> '!' Expr2                                 (27)
	Expr2 -> Ident 'has' 'key' '[' Expr ']'            (28)
	Expr -> Expr '+' Expr1                             (29)
	Expr -> Expr '-' Expr1                             (30)
	Expr -> Expr1                                      (31)
	Expr -> Expr 'or' Expr1                            (32)
	Expr -> Expr 'and' Expr1                           (33)
	Expr -> Expr 'xor' Expr1                           (34)
	Expr1 -> Expr1 '/' Expr2                           (35)
	Expr1 -> Expr1 '*' Expr2                           (36)
	Expr1 -> Expr1 '%' Expr2                           (37)
	Expr1 -> Expr2                                     (38)
	Expr1 -> Expr1 '==' Expr2                          (39)
	Expr1 -> Expr1 '<=' Expr2                          (40)
	Expr1 -> Expr1 '>=' Expr2                          (41)
	Expr1 -> Expr1 '<' Expr2                           (42)
	Expr1 -> Expr1 '>' Expr2                           (43)
	Expr1 -> Expr1 '!=' Expr2                          (44)
	Args -> 'void'                                     (45)
	Args -> Expr                                       (46)
	Args -> Expr ',' Args                              (47)
	Args -> Lambda                                     (48)
	Args -> Lambda ',' Args                            (49)
	Params -> 'none'                                   (50)
	Params -> SType Ident                              (51)
	Params -> FType Ident                              (52)
	Params -> SType Ident ',' Params                   (53)
	Params -> FType Ident ',' Params                   (54)
	Lambda -> FType 'lambda' '(' Params ')' '->' '{' Instr '}'   (55)
	Instr -> Instr1 ';' Instr                          (56)
	Instr -> Def ';' Instr                             (57)
	Instr -> SpecStmt ';' Instr                        (58)
	Instr -> Instr1                                    (59)
	Instr1 -> Stmt                                     (60)
	Instr1 -> Instr1 ';'                               (61)
	Def -> Def ';'                                     (62)
	Def -> Def1                                        (63)
	SpecStmt -> SpecStmt ';'                           (64)
	SpecStmt -> 'swap' '(' Ident ',' Ident ')'         (65)
	SpecStmt -> 'debug' 'assignment' 'enable' Ident    (66)
	SpecStmt -> 'debug' 'assignment' 'disable' Ident   (67)
	SpecStmt -> 'debug' 'reading' 'enable' Ident       (68)
	SpecStmt -> 'debug' 'reading' 'disable' Ident      (69)
	Def1 -> SType Ident '=' Expr                       (70)
	Def1 -> FType Ident '(' Params ')' '{' Instr '}'   (71)
	Def1 -> 'Array' SType Ident '[' Expr ']' '(' Expr ')'   (72)
	Def1 -> 'Array' SType Ident '[' Expr ']'           (73)
	Def1 -> 'Dict' SType Ident                         (74)
	Stmt1 -> 'if' '(' Expr ')' '{' Instr '}' 'else' '{' Instr '}'   (75)
	Stmt1 -> 'if' '(' Expr ')' '{' Instr '}'           (76)
	Stmt1 -> 'while' '(' Expr ')' '{' Instr '}'        (77)
	Stmt1 -> 'for' '(' Ident '=' Expr 'to' Expr ')' '{' Instr '}'   (78)
	Stmt1 -> 'skip'                                    (79)
	Stmt1 -> 'return' '(' Expr ')'                     (80)
	Stmt1 -> 'print' '(' Expr ')'                      (81)
	Stmt1 -> 'break' '(' Expr ')'                      (82)
	Stmt1 -> 'break'                                   (83)
	Stmt1 -> 'continue' 'outer' '(' Expr ')'           (84)
	Stmt1 -> 'continue'                                (85)
	Stmt1 -> Ident '=' Expr                            (86)
	Stmt1 -> Ident '+=' Expr                           (87)
	Stmt1 -> Ident '-=' Expr                           (88)
	Stmt1 -> Ident '*=' Expr                           (89)
	Stmt1 -> Ident '/=' Expr                           (90)
	Stmt1 -> Ident '%=' Expr                           (91)
	Stmt1 -> Ident '[' Expr ']' '=' '(' Expr ')'       (92)
	Stmt1 -> Ident 'set' '[' Expr ']' 'to' '(' Expr ')'   (93)
	Stmt -> Stmt1                                      (94)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	'!'            { PT _ (TS _ 1) }
	'!='           { PT _ (TS _ 2) }
	'%'            { PT _ (TS _ 3) }
	'%='           { PT _ (TS _ 4) }
	'('            { PT _ (TS _ 5) }
	')'            { PT _ (TS _ 6) }
	'*'            { PT _ (TS _ 7) }
	'*='           { PT _ (TS _ 8) }
	'+'            { PT _ (TS _ 9) }
	'++'           { PT _ (TS _ 10) }
	'+='           { PT _ (TS _ 11) }
	','            { PT _ (TS _ 12) }
	'-'            { PT _ (TS _ 13) }
	'--'           { PT _ (TS _ 14) }
	'-='           { PT _ (TS _ 15) }
	'->'           { PT _ (TS _ 16) }
	'/'            { PT _ (TS _ 17) }
	'/='           { PT _ (TS _ 18) }
	';'            { PT _ (TS _ 19) }
	'<'            { PT _ (TS _ 20) }
	'<='           { PT _ (TS _ 21) }
	'='            { PT _ (TS _ 22) }
	'=='           { PT _ (TS _ 23) }
	'>'            { PT _ (TS _ 24) }
	'>='           { PT _ (TS _ 25) }
	'Array'        { PT _ (TS _ 26) }
	'Bool'         { PT _ (TS _ 27) }
	'BoolFunc'     { PT _ (TS _ 28) }
	'Dict'         { PT _ (TS _ 29) }
	'Int'          { PT _ (TS _ 30) }
	'IntFunc'      { PT _ (TS _ 31) }
	'['            { PT _ (TS _ 32) }
	']'            { PT _ (TS _ 33) }
	'and'          { PT _ (TS _ 34) }
	'assignment'   { PT _ (TS _ 35) }
	'break'        { PT _ (TS _ 36) }
	'continue'     { PT _ (TS _ 37) }
	'debug'        { PT _ (TS _ 38) }
	'disable'      { PT _ (TS _ 39) }
	'else'         { PT _ (TS _ 40) }
	'enable'       { PT _ (TS _ 41) }
	'false'        { PT _ (TS _ 42) }
	'for'          { PT _ (TS _ 43) }
	'get'          { PT _ (TS _ 44) }
	'has'          { PT _ (TS _ 45) }
	'if'           { PT _ (TS _ 46) }
	'key'          { PT _ (TS _ 47) }
	'lambda'       { PT _ (TS _ 48) }
	'none'         { PT _ (TS _ 49) }
	'or'           { PT _ (TS _ 50) }
	'outer'        { PT _ (TS _ 51) }
	'print'        { PT _ (TS _ 52) }
	'reading'      { PT _ (TS _ 53) }
	'return'       { PT _ (TS _ 54) }
	'set'          { PT _ (TS _ 55) }
	'skip'         { PT _ (TS _ 56) }
	'swap'         { PT _ (TS _ 57) }
	'to'           { PT _ (TS _ 58) }
	'true'         { PT _ (TS _ 59) }
	'void'         { PT _ (TS _ 60) }
	'while'        { PT _ (TS _ 61) }
	'xor'          { PT _ (TS _ 62) }
	'{'            { PT _ (TS _ 63) }
	'}'            { PT _ (TS _ 64) }
	L_Ident        { PT _ (TV $$) }
	L_integ        { PT _ (TI $$) }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_pInstr   rule  0
	%start_pExpr    rule  1
	%start_pStmt    rule  2
	%start_pDef     rule  3
	%start_pParams  rule  4
	%start_pArgs    rule  5
	%start_pLambda  rule  6
	%start_pSType   rule  7
	%start_pFType   rule  8
	Ident           rule  9
	Integer         rule  10
	SType           rules 11, 12
	FType           rules 13, 14
	Expr2           rules 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28
	Expr            rules 29, 30, 31, 32, 33, 34
	Expr1           rules 35, 36, 37, 38, 39, 40, 41, 42, 43, 44
	Args            rules 45, 46, 47, 48, 49
	Params          rules 50, 51, 52, 53, 54
	Lambda          rule  55
	Instr           rules 56, 57, 58, 59
	Instr1          rules 60, 61
	Def             rules 62, 63
	SpecStmt        rules 64, 65, 66, 67, 68, 69
	Def1            rules 70, 71, 72, 73, 74
	Stmt1           rules 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93
	Stmt            rule  94

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0

	%start_pInstr -> . Instr                            (rule 0)

	'Array'        shift, and enter state 42
	'Bool'         shift, and enter state 15
	'BoolFunc'     shift, and enter state 12
	'Dict'         shift, and enter state 43
	'Int'          shift, and enter state 16
	'IntFunc'      shift, and enter state 13
	'break'        shift, and enter state 47
	'continue'     shift, and enter state 48
	'debug'        shift, and enter state 61
	'for'          shift, and enter state 49
	'if'           shift, and enter state 50
	'print'        shift, and enter state 51
	'return'       shift, and enter state 52
	'skip'         shift, and enter state 53
	'swap'         shift, and enter state 62
	'while'        shift, and enter state 54
	L_Ident        shift, and enter state 10

	Ident          goto state 44
	SType          goto state 38
	FType          goto state 39
	Instr          goto state 56
	Instr1         goto state 57
	Def            goto state 58
	SpecStmt       goto state 59
	Def1           goto state 41
	Stmt1          goto state 45
	Stmt           goto state 60

State 1

	%start_pExpr -> . Expr                              (rule 1)

	'!'            shift, and enter state 26
	'('            shift, and enter state 27
	'++'           shift, and enter state 28
	'--'           shift, and enter state 29
	'false'        shift, and enter state 30
	'true'         shift, and enter state 31
	L_Ident        shift, and enter state 10
	L_integ        shift, and enter state 33

	Ident          goto state 19
	Integer        goto state 20
	Expr2          goto state 21
	Expr           goto state 55
	Expr1          goto state 23

State 2

	%start_pStmt -> . Stmt                              (rule 2)

	'break'        shift, and enter state 47
	'continue'     shift, and enter state 48
	'for'          shift, and enter state 49
	'if'           shift, and enter state 50
	'print'        shift, and enter state 51
	'return'       shift, and enter state 52
	'skip'         shift, and enter state 53
	'while'        shift, and enter state 54
	L_Ident        shift, and enter state 10

	Ident          goto state 44
	Stmt1          goto state 45
	Stmt           goto state 46

State 3

	%start_pDef -> . Def                                (rule 3)

	'Array'        shift, and enter state 42
	'Bool'         shift, and enter state 15
	'BoolFunc'     shift, and enter state 12
	'Dict'         shift, and enter state 43
	'Int'          shift, and enter state 16
	'IntFunc'      shift, and enter state 13

	SType          goto state 38
	FType          goto state 39
	Def            goto state 40
	Def1           goto state 41

State 4

	%start_pParams -> . Params                          (rule 4)

	'Bool'         shift, and enter state 15
	'BoolFunc'     shift, and enter state 12
	'Int'          shift, and enter state 16
	'IntFunc'      shift, and enter state 13
	'none'         shift, and enter state 37

	SType          goto state 34
	FType          goto state 35
	Params         goto state 36

State 5

	%start_pArgs -> . Args                              (rule 5)

	'!'            shift, and enter state 26
	'('            shift, and enter state 27
	'++'           shift, and enter state 28
	'--'           shift, and enter state 29
	'BoolFunc'     shift, and enter state 12
	'IntFunc'      shift, and enter state 13
	'false'        shift, and enter state 30
	'true'         shift, and enter state 31
	'void'         shift, and enter state 32
	L_Ident        shift, and enter state 10
	L_integ        shift, and enter state 33

	Ident          goto state 19
	Integer        goto state 20
	FType          goto state 17
	Expr2          goto state 21
	Expr           goto state 22
	Expr1          goto state 23
	Args           goto state 24
	Lambda         goto state 25

State 6

	%start_pLambda -> . Lambda                          (rule 6)

	'BoolFunc'     shift, and enter state 12
	'IntFunc'      shift, and enter state 13

	FType          goto state 17
	Lambda         goto state 18

State 7

	%start_pSType -> . SType                            (rule 7)

	'Bool'         shift, and enter state 15
	'Int'          shift, and enter state 16

	SType          goto state 14

State 8

	%start_pFType -> . FType                            (rule 8)

	'BoolFunc'     shift, and enter state 12
	'IntFunc'      shift, and enter state 13

	FType          goto state 11

State 9

	Ident -> . L_Ident                                  (rule 9)

	L_Ident        shift, and enter state 10


State 10

	Ident -> L_Ident .                                  (rule 9)

	'!='           reduce using rule 9
	'%'            reduce using rule 9
	'%='           reduce using rule 9
	'('            reduce using rule 9
	')'            reduce using rule 9
	'*'            reduce using rule 9
	'*='           reduce using rule 9
	'+'            reduce using rule 9
	'++'           reduce using rule 9
	'+='           reduce using rule 9
	','            reduce using rule 9
	'-'            reduce using rule 9
	'--'           reduce using rule 9
	'-='           reduce using rule 9
	'/'            reduce using rule 9
	'/='           reduce using rule 9
	';'            reduce using rule 9
	'<'            reduce using rule 9
	'<='           reduce using rule 9
	'='            reduce using rule 9
	'=='           reduce using rule 9
	'>'            reduce using rule 9
	'>='           reduce using rule 9
	'['            reduce using rule 9
	']'            reduce using rule 9
	'and'          reduce using rule 9
	'get'          reduce using rule 9
	'has'          reduce using rule 9
	'or'           reduce using rule 9
	'set'          reduce using rule 9
	'to'           reduce using rule 9
	'xor'          reduce using rule 9
	'}'            reduce using rule 9
	%eof           reduce using rule 9


State 11

	%start_pFType -> FType .                            (rule 8)

	%eof           accept


State 12

	FType -> 'BoolFunc' .                               (rule 14)

	'lambda'       reduce using rule 14
	L_Ident        reduce using rule 14
	%eof           reduce using rule 14


State 13

	FType -> 'IntFunc' .                                (rule 13)

	'lambda'       reduce using rule 13
	L_Ident        reduce using rule 13
	%eof           reduce using rule 13


State 14

	%start_pSType -> SType .                            (rule 7)

	%eof           accept


State 15

	SType -> 'Bool' .                                   (rule 12)

	L_Ident        reduce using rule 12
	%eof           reduce using rule 12


State 16

	SType -> 'Int' .                                    (rule 11)

	L_Ident        reduce using rule 11
	%eof           reduce using rule 11


State 17

	Lambda -> FType . 'lambda' '(' Params ')' '->' '{' Instr '}'    (rule 55)

	'lambda'       shift, and enter state 117


State 18

	%start_pLambda -> Lambda .                          (rule 6)

	%eof           accept


State 19

	Expr2 -> Ident . '(' Args ')'                       (rule 15)
	Expr2 -> Ident .                                    (rule 16)
	Expr2 -> Ident . '++'                               (rule 18)
	Expr2 -> Ident . '--'                               (rule 20)
	Expr2 -> Ident . '[' Expr ']'                       (rule 22)
	Expr2 -> Ident . 'get' '[' Expr ']'                 (rule 23)
	Expr2 -> Ident . 'has' 'key' '[' Expr ']'           (rule 28)

	'!='           reduce using rule 16
	'%'            reduce using rule 16
	'('            shift, and enter state 111
	')'            reduce using rule 16
	'*'            reduce using rule 16
	'+'            reduce using rule 16
	'++'           shift, and enter state 112
	','            reduce using rule 16
	'-'            reduce using rule 16
	'--'           shift, and enter state 113
	'/'            reduce using rule 16
	';'            reduce using rule 16
	'<'            reduce using rule 16
	'<='           reduce using rule 16
	'=='           reduce using rule 16
	'>'            reduce using rule 16
	'>='           reduce using rule 16
	'['            shift, and enter state 114
	']'            reduce using rule 16
	'and'          reduce using rule 16
	'get'          shift, and enter state 115
	'has'          shift, and enter state 116
	'or'           reduce using rule 16
	'to'           reduce using rule 16
	'xor'          reduce using rule 16
	'}'            reduce using rule 16
	%eof           reduce using rule 16


State 20

	Expr2 -> Integer .                                  (rule 17)

	'!='           reduce using rule 17
	'%'            reduce using rule 17
	')'            reduce using rule 17
	'*'            reduce using rule 17
	'+'            reduce using rule 17
	','            reduce using rule 17
	'-'            reduce using rule 17
	'/'            reduce using rule 17
	';'            reduce using rule 17
	'<'            reduce using rule 17
	'<='           reduce using rule 17
	'=='           reduce using rule 17
	'>'            reduce using rule 17
	'>='           reduce using rule 17
	']'            reduce using rule 17
	'and'          reduce using rule 17
	'or'           reduce using rule 17
	'to'           reduce using rule 17
	'xor'          reduce using rule 17
	'}'            reduce using rule 17
	%eof           reduce using rule 17


State 21

	Expr1 -> Expr2 .                                    (rule 38)

	'!='           reduce using rule 38
	'%'            reduce using rule 38
	')'            reduce using rule 38
	'*'            reduce using rule 38
	'+'            reduce using rule 38
	','            reduce using rule 38
	'-'            reduce using rule 38
	'/'            reduce using rule 38
	';'            reduce using rule 38
	'<'            reduce using rule 38
	'<='           reduce using rule 38
	'=='           reduce using rule 38
	'>'            reduce using rule 38
	'>='           reduce using rule 38
	']'            reduce using rule 38
	'and'          reduce using rule 38
	'or'           reduce using rule 38
	'to'           reduce using rule 38
	'xor'          reduce using rule 38
	'}'            reduce using rule 38
	%eof           reduce using rule 38


State 22

	Expr -> Expr . '+' Expr1                            (rule 29)
	Expr -> Expr . '-' Expr1                            (rule 30)
	Expr -> Expr . 'or' Expr1                           (rule 32)
	Expr -> Expr . 'and' Expr1                          (rule 33)
	Expr -> Expr . 'xor' Expr1                          (rule 34)
	Args -> Expr .                                      (rule 46)
	Args -> Expr . ',' Args                             (rule 47)

	')'            reduce using rule 46
	'+'            shift, and enter state 69
	','            shift, and enter state 110
	'-'            shift, and enter state 70
	'and'          shift, and enter state 71
	'or'           shift, and enter state 72
	'xor'          shift, and enter state 73
	%eof           reduce using rule 46


State 23

	Expr -> Expr1 .                                     (rule 31)
	Expr1 -> Expr1 . '/' Expr2                          (rule 35)
	Expr1 -> Expr1 . '*' Expr2                          (rule 36)
	Expr1 -> Expr1 . '%' Expr2                          (rule 37)
	Expr1 -> Expr1 . '==' Expr2                         (rule 39)
	Expr1 -> Expr1 . '<=' Expr2                         (rule 40)
	Expr1 -> Expr1 . '>=' Expr2                         (rule 41)
	Expr1 -> Expr1 . '<' Expr2                          (rule 42)
	Expr1 -> Expr1 . '>' Expr2                          (rule 43)
	Expr1 -> Expr1 . '!=' Expr2                         (rule 44)

	'!='           shift, and enter state 101
	'%'            shift, and enter state 102
	')'            reduce using rule 31
	'*'            shift, and enter state 103
	'+'            reduce using rule 31
	','            reduce using rule 31
	'-'            reduce using rule 31
	'/'            shift, and enter state 104
	';'            reduce using rule 31
	'<'            shift, and enter state 105
	'<='           shift, and enter state 106
	'=='           shift, and enter state 107
	'>'            shift, and enter state 108
	'>='           shift, and enter state 109
	']'            reduce using rule 31
	'and'          reduce using rule 31
	'or'           reduce using rule 31
	'to'           reduce using rule 31
	'xor'          reduce using rule 31
	'}'            reduce using rule 31
	%eof           reduce using rule 31


State 24

	%start_pArgs -> Args .                              (rule 5)

	%eof           accept


State 25

	Args -> Lambda .                                    (rule 48)
	Args -> Lambda . ',' Args                           (rule 49)

	')'            reduce using rule 48
	','            shift, and enter state 100
	%eof           reduce using rule 48


State 26

	Expr2 -> '!' . Expr2                                (rule 27)

	'!'            shift, and enter state 26
	'('            shift, and enter state 27
	'++'           shift, and enter state 28
	'--'           shift, and enter state 29
	'false'        shift, and enter state 30
	'true'         shift, and enter state 31
	L_Ident        shift, and enter state 10
	L_integ        shift, and enter state 33

	Ident          goto state 19
	Integer        goto state 20
	Expr2          goto state 99

State 27

	Expr2 -> '(' . Expr ')'                             (rule 24)

	'!'            shift, and enter state 26
	'('            shift, and enter state 27
	'++'           shift, and enter state 28
	'--'           shift, and enter state 29
	'false'        shift, and enter state 30
	'true'         shift, and enter state 31
	L_Ident        shift, and enter state 10
	L_integ        shift, and enter state 33

	Ident          goto state 19
	Integer        goto state 20
	Expr2          goto state 21
	Expr           goto state 98
	Expr1          goto state 23

State 28

	Expr2 -> '++' . Ident                               (rule 19)

	L_Ident        shift, and enter state 10

	Ident          goto state 97

State 29

	Expr2 -> '--' . Ident                               (rule 21)

	L_Ident        shift, and enter state 10

	Ident          goto state 96

State 30

	Expr2 -> 'false' .                                  (rule 26)

	'!='           reduce using rule 26
	'%'            reduce using rule 26
	')'            reduce using rule 26
	'*'            reduce using rule 26
	'+'            reduce using rule 26
	','            reduce using rule 26
	'-'            reduce using rule 26
	'/'            reduce using rule 26
	';'            reduce using rule 26
	'<'            reduce using rule 26
	'<='           reduce using rule 26
	'=='           reduce using rule 26
	'>'            reduce using rule 26
	'>='           reduce using rule 26
	']'            reduce using rule 26
	'and'          reduce using rule 26
	'or'           reduce using rule 26
	'to'           reduce using rule 26
	'xor'          reduce using rule 26
	'}'            reduce using rule 26
	%eof           reduce using rule 26


State 31

	Expr2 -> 'true' .                                   (rule 25)

	'!='           reduce using rule 25
	'%'            reduce using rule 25
	')'            reduce using rule 25
	'*'            reduce using rule 25
	'+'            reduce using rule 25
	','            reduce using rule 25
	'-'            reduce using rule 25
	'/'            reduce using rule 25
	';'            reduce using rule 25
	'<'            reduce using rule 25
	'<='           reduce using rule 25
	'=='           reduce using rule 25
	'>'            reduce using rule 25
	'>='           reduce using rule 25
	']'            reduce using rule 25
	'and'          reduce using rule 25
	'or'           reduce using rule 25
	'to'           reduce using rule 25
	'xor'          reduce using rule 25
	'}'            reduce using rule 25
	%eof           reduce using rule 25


State 32

	Args -> 'void' .                                    (rule 45)

	')'            reduce using rule 45
	%eof           reduce using rule 45


State 33

	Integer -> L_integ .                                (rule 10)

	'!='           reduce using rule 10
	'%'            reduce using rule 10
	')'            reduce using rule 10
	'*'            reduce using rule 10
	'+'            reduce using rule 10
	','            reduce using rule 10
	'-'            reduce using rule 10
	'/'            reduce using rule 10
	';'            reduce using rule 10
	'<'            reduce using rule 10
	'<='           reduce using rule 10
	'=='           reduce using rule 10
	'>'            reduce using rule 10
	'>='           reduce using rule 10
	']'            reduce using rule 10
	'and'          reduce using rule 10
	'or'           reduce using rule 10
	'to'           reduce using rule 10
	'xor'          reduce using rule 10
	'}'            reduce using rule 10
	%eof           reduce using rule 10


State 34

	Params -> SType . Ident                             (rule 51)
	Params -> SType . Ident ',' Params                  (rule 53)

	L_Ident        shift, and enter state 10

	Ident          goto state 95

State 35

	Params -> FType . Ident                             (rule 52)
	Params -> FType . Ident ',' Params                  (rule 54)

	L_Ident        shift, and enter state 10

	Ident          goto state 94

State 36

	%start_pParams -> Params .                          (rule 4)

	%eof           accept


State 37

	Params -> 'none' .                                  (rule 50)

	')'            reduce using rule 50
	%eof           reduce using rule 50


State 38

	Def1 -> SType . Ident '=' Expr                      (rule 70)

	L_Ident        shift, and enter state 10

	Ident          goto state 93

State 39

	Def1 -> FType . Ident '(' Params ')' '{' Instr '}'    (rule 71)

	L_Ident        shift, and enter state 10

	Ident          goto state 92

State 40

	%start_pDef -> Def .                                (rule 3)
	Def -> Def . ';'                                    (rule 62)

	';'            shift, and enter state 91
	%eof           accept


State 41

	Def -> Def1 .                                       (rule 63)

	';'            reduce using rule 63
	%eof           reduce using rule 63


State 42

	Def1 -> 'Array' . SType Ident '[' Expr ']' '(' Expr ')'    (rule 72)
	Def1 -> 'Array' . SType Ident '[' Expr ']'          (rule 73)

	'Bool'         shift, and enter state 15
	'Int'          shift, and enter state 16

	SType          goto state 90

State 43

	Def1 -> 'Dict' . SType Ident                        (rule 74)

	'Bool'         shift, and enter state 15
	'Int'          shift, and enter state 16

	SType          goto state 89

State 44

	Stmt1 -> Ident . '=' Expr                           (rule 86)
	Stmt1 -> Ident . '+=' Expr                          (rule 87)
	Stmt1 -> Ident . '-=' Expr                          (rule 88)
	Stmt1 -> Ident . '*=' Expr                          (rule 89)
	Stmt1 -> Ident . '/=' Expr                          (rule 90)
	Stmt1 -> Ident . '%=' Expr                          (rule 91)
	Stmt1 -> Ident . '[' Expr ']' '=' '(' Expr ')'      (rule 92)
	Stmt1 -> Ident . 'set' '[' Expr ']' 'to' '(' Expr ')'    (rule 93)

	'%='           shift, and enter state 81
	'*='           shift, and enter state 82
	'+='           shift, and enter state 83
	'-='           shift, and enter state 84
	'/='           shift, and enter state 85
	'='            shift, and enter state 86
	'['            shift, and enter state 87
	'set'          shift, and enter state 88


State 45

	Stmt -> Stmt1 .                                     (rule 94)

	';'            reduce using rule 94
	'}'            reduce using rule 94
	%eof           reduce using rule 94


State 46

	%start_pStmt -> Stmt .                              (rule 2)

	%eof           accept


State 47

	Stmt1 -> 'break' . '(' Expr ')'                     (rule 82)
	Stmt1 -> 'break' .                                  (rule 83)

	'('            shift, and enter state 80
	';'            reduce using rule 83
	'}'            reduce using rule 83
	%eof           reduce using rule 83


State 48

	Stmt1 -> 'continue' . 'outer' '(' Expr ')'          (rule 84)
	Stmt1 -> 'continue' .                               (rule 85)

	';'            reduce using rule 85
	'outer'        shift, and enter state 79
	'}'            reduce using rule 85
	%eof           reduce using rule 85


State 49

	Stmt1 -> 'for' . '(' Ident '=' Expr 'to' Expr ')' '{' Instr '}'    (rule 78)

	'('            shift, and enter state 78


State 50

	Stmt1 -> 'if' . '(' Expr ')' '{' Instr '}' 'else' '{' Instr '}'    (rule 75)
	Stmt1 -> 'if' . '(' Expr ')' '{' Instr '}'          (rule 76)

	'('            shift, and enter state 77


State 51

	Stmt1 -> 'print' . '(' Expr ')'                     (rule 81)

	'('            shift, and enter state 76


State 52

	Stmt1 -> 'return' . '(' Expr ')'                    (rule 80)

	'('            shift, and enter state 75


State 53

	Stmt1 -> 'skip' .                                   (rule 79)

	';'            reduce using rule 79
	'}'            reduce using rule 79
	%eof           reduce using rule 79


State 54

	Stmt1 -> 'while' . '(' Expr ')' '{' Instr '}'       (rule 77)

	'('            shift, and enter state 74


State 55

	%start_pExpr -> Expr .                              (rule 1)
	Expr -> Expr . '+' Expr1                            (rule 29)
	Expr -> Expr . '-' Expr1                            (rule 30)
	Expr -> Expr . 'or' Expr1                           (rule 32)
	Expr -> Expr . 'and' Expr1                          (rule 33)
	Expr -> Expr . 'xor' Expr1                          (rule 34)

	'+'            shift, and enter state 69
	'-'            shift, and enter state 70
	'and'          shift, and enter state 71
	'or'           shift, and enter state 72
	'xor'          shift, and enter state 73
	%eof           accept


State 56

	%start_pInstr -> Instr .                            (rule 0)

	%eof           accept


State 57

	Instr -> Instr1 . ';' Instr                         (rule 56)
	Instr -> Instr1 .                                   (rule 59)
	Instr1 -> Instr1 . ';'                              (rule 61)

	';'            shift, and enter state 68
	'}'            reduce using rule 59
	%eof           reduce using rule 59


State 58

	Instr -> Def . ';' Instr                            (rule 57)
	Def -> Def . ';'                                    (rule 62)

	';'            shift, and enter state 67


State 59

	Instr -> SpecStmt . ';' Instr                       (rule 58)
	SpecStmt -> SpecStmt . ';'                          (rule 64)

	';'            shift, and enter state 66


State 60

	Instr1 -> Stmt .                                    (rule 60)

	';'            reduce using rule 60
	'}'            reduce using rule 60
	%eof           reduce using rule 60


State 61

	SpecStmt -> 'debug' . 'assignment' 'enable' Ident    (rule 66)
	SpecStmt -> 'debug' . 'assignment' 'disable' Ident    (rule 67)
	SpecStmt -> 'debug' . 'reading' 'enable' Ident      (rule 68)
	SpecStmt -> 'debug' . 'reading' 'disable' Ident     (rule 69)

	'assignment'   shift, and enter state 64
	'reading'      shift, and enter state 65


State 62

	SpecStmt -> 'swap' . '(' Ident ',' Ident ')'        (rule 65)

	'('            shift, and enter state 63


State 63

	SpecStmt -> 'swap' '(' . Ident ',' Ident ')'        (rule 65)

	L_Ident        shift, and enter state 10

	Ident          goto state 168

State 64

	SpecStmt -> 'debug' 'assignment' . 'enable' Ident    (rule 66)
	SpecStmt -> 'debug' 'assignment' . 'disable' Ident    (rule 67)

	'disable'      shift, and enter state 166
	'enable'       shift, and enter state 167


State 65

	SpecStmt -> 'debug' 'reading' . 'enable' Ident      (rule 68)
	SpecStmt -> 'debug' 'reading' . 'disable' Ident     (rule 69)

	'disable'      shift, and enter state 164
	'enable'       shift, and enter state 165


State 66

	Instr -> SpecStmt ';' . Instr                       (rule 58)
	SpecStmt -> SpecStmt ';' .                          (rule 64)

	';'            reduce using rule 64
	'Array'        shift, and enter state 42
	'Bool'         shift, and enter state 15
	'BoolFunc'     shift, and enter state 12
	'Dict'         shift, and enter state 43
	'Int'          shift, and enter state 16
	'IntFunc'      shift, and enter state 13
	'break'        shift, and enter state 47
	'continue'     shift, and enter state 48
	'debug'        shift, and enter state 61
	'for'          shift, and enter state 49
	'if'           shift, and enter state 50
	'print'        shift, and enter state 51
	'return'       shift, and enter state 52
	'skip'         shift, and enter state 53
	'swap'         shift, and enter state 62
	'while'        shift, and enter state 54
	L_Ident        shift, and enter state 10

	Ident          goto state 44
	SType          goto state 38
	FType          goto state 39
	Instr          goto state 163
	Instr1         goto state 57
	Def            goto state 58
	SpecStmt       goto state 59
	Def1           goto state 41
	Stmt1          goto state 45
	Stmt           goto state 60

State 67

	Instr -> Def ';' . Instr                            (rule 57)
	Def -> Def ';' .                                    (rule 62)

	';'            reduce using rule 62
	'Array'        shift, and enter state 42
	'Bool'         shift, and enter state 15
	'BoolFunc'     shift, and enter state 12
	'Dict'         shift, and enter state 43
	'Int'          shift, and enter state 16
	'IntFunc'      shift, and enter state 13
	'break'        shift, and enter state 47
	'continue'     shift, and enter state 48
	'debug'        shift, and enter state 61
	'for'          shift, and enter state 49
	'if'           shift, and enter state 50
	'print'        shift, and enter state 51
	'return'       shift, and enter state 52
	'skip'         shift, and enter state 53
	'swap'         shift, and enter state 62
	'while'        shift, and enter state 54
	L_Ident        shift, and enter state 10

	Ident          goto state 44
	SType          goto state 38
	FType          goto state 39
	Instr          goto state 162
	Instr1         goto state 57
	Def            goto state 58
	SpecStmt       goto state 59
	Def1           goto state 41
	Stmt1          goto state 45
	Stmt           goto state 60

State 68

	Instr -> Instr1 ';' . Instr                         (rule 56)
	Instr1 -> Instr1 ';' .                              (rule 61)

	';'            reduce using rule 61
	'Array'        shift, and enter state 42
	'Bool'         shift, and enter state 15
	'BoolFunc'     shift, and enter state 12
	'Dict'         shift, and enter state 43
	'Int'          shift, and enter state 16
	'IntFunc'      shift, and enter state 13
	'break'        shift, and enter state 47
	'continue'     shift, and enter state 48
	'debug'        shift, and enter state 61
	'for'          shift, and enter state 49
	'if'           shift, and enter state 50
	'print'        shift, and enter state 51
	'return'       shift, and enter state 52
	'skip'         shift, and enter state 53
	'swap'         shift, and enter state 62
	'while'        shift, and enter state 54
	'}'            reduce using rule 61
	L_Ident        shift, and enter state 10
	%eof           reduce using rule 61

	Ident          goto state 44
	SType          goto state 38
	FType          goto state 39
	Instr          goto state 161
	Instr1         goto state 57
	Def            goto state 58
	SpecStmt       goto state 59
	Def1           goto state 41
	Stmt1          goto state 45
	Stmt           goto state 60

State 69

	Expr -> Expr '+' . Expr1                            (rule 29)

	'!'            shift, and enter state 26
	'('            shift, and enter state 27
	'++'           shift, and enter state 28
	'--'           shift, and enter state 29
	'false'        shift, and enter state 30
	'true'         shift, and enter state 31
	L_Ident        shift, and enter state 10
	L_integ        shift, and enter state 33

	Ident          goto state 19
	Integer        goto state 20
	Expr2          goto state 21
	Expr1          goto state 160

State 70

	Expr -> Expr '-' . Expr1                            (rule 30)

	'!'            shift, and enter state 26
	'('            shift, and enter state 27
	'++'           shift, and enter state 28
	'--'           shift, and enter state 29
	'false'        shift, and enter state 30
	'true'         shift, and enter state 31
	L_Ident        shift, and enter state 10
	L_integ        shift, and enter state 33

	Ident          goto state 19
	Integer        goto state 20
	Expr2          goto state 21
	Expr1          goto state 159

State 71

	Expr -> Expr 'and' . Expr1                          (rule 33)

	'!'            shift, and enter state 26
	'('            shift, and enter state 27
	'++'           shift, and enter state 28
	'--'           shift, and enter state 29
	'false'        shift, and enter state 30
	'true'         shift, and enter state 31
	L_Ident        shift, and enter state 10
	L_integ        shift, and enter state 33

	Ident          goto state 19
	Integer        goto state 20
	Expr2          goto state 21
	Expr1          goto state 158

State 72

	Expr -> Expr 'or' . Expr1                           (rule 32)

	'!'            shift, and enter state 26
	'('            shift, and enter state 27
	'++'           shift, and enter state 28
	'--'           shift, and enter state 29
	'false'        shift, and enter state 30
	'true'         shift, and enter state 31
	L_Ident        shift, and enter state 10
	L_integ        shift, and enter state 33

	Ident          goto state 19
	Integer        goto state 20
	Expr2          goto state 21
	Expr1          goto state 157

State 73

	Expr -> Expr 'xor' . Expr1                          (rule 34)

	'!'            shift, and enter state 26
	'('            shift, and enter state 27
	'++'           shift, and enter state 28
	'--'           shift, and enter state 29
	'false'        shift, and enter state 30
	'true'         shift, and enter state 31
	L_Ident        shift, and enter state 10
	L_integ        shift, and enter state 33

	Ident          goto state 19
	Integer        goto state 20
	Expr2          goto state 21
	Expr1          goto state 156

State 74

	Stmt1 -> 'while' '(' . Expr ')' '{' Instr '}'       (rule 77)

	'!'            shift, and enter state 26
	'('            shift, and enter state 27
	'++'           shift, and enter state 28
	'--'           shift, and enter state 29
	'false'        shift, and enter state 30
	'true'         shift, and enter state 31
	L_Ident        shift, and enter state 10
	L_integ        shift, and enter state 33

	Ident          goto state 19
	Integer        goto state 20
	Expr2          goto state 21
	Expr           goto state 155
	Expr1          goto state 23

State 75

	Stmt1 -> 'return' '(' . Expr ')'                    (rule 80)

	'!'            shift, and enter state 26
	'('            shift, and enter state 27
	'++'           shift, and enter state 28
	'--'           shift, and enter state 29
	'false'        shift, and enter state 30
	'true'         shift, and enter state 31
	L_Ident        shift, and enter state 10
	L_integ        shift, and enter state 33

	Ident          goto state 19
	Integer        goto state 20
	Expr2          goto state 21
	Expr           goto state 154
	Expr1          goto state 23

State 76

	Stmt1 -> 'print' '(' . Expr ')'                     (rule 81)

	'!'            shift, and enter state 26
	'('            shift, and enter state 27
	'++'           shift, and enter state 28
	'--'           shift, and enter state 29
	'false'        shift, and enter state 30
	'true'         shift, and enter state 31
	L_Ident        shift, and enter state 10
	L_integ        shift, and enter state 33

	Ident          goto state 19
	Integer        goto state 20
	Expr2          goto state 21
	Expr           goto state 153
	Expr1          goto state 23

State 77

	Stmt1 -> 'if' '(' . Expr ')' '{' Instr '}' 'else' '{' Instr '}'    (rule 75)
	Stmt1 -> 'if' '(' . Expr ')' '{' Instr '}'          (rule 76)

	'!'            shift, and enter state 26
	'('            shift, and enter state 27
	'++'           shift, and enter state 28
	'--'           shift, and enter state 29
	'false'        shift, and enter state 30
	'true'         shift, and enter state 31
	L_Ident        shift, and enter state 10
	L_integ        shift, and enter state 33

	Ident          goto state 19
	Integer        goto state 20
	Expr2          goto state 21
	Expr           goto state 152
	Expr1          goto state 23

State 78

	Stmt1 -> 'for' '(' . Ident '=' Expr 'to' Expr ')' '{' Instr '}'    (rule 78)

	L_Ident        shift, and enter state 10

	Ident          goto state 151

State 79

	Stmt1 -> 'continue' 'outer' . '(' Expr ')'          (rule 84)

	'('            shift, and enter state 150


State 80

	Stmt1 -> 'break' '(' . Expr ')'                     (rule 82)

	'!'            shift, and enter state 26
	'('            shift, and enter state 27
	'++'           shift, and enter state 28
	'--'           shift, and enter state 29
	'false'        shift, and enter state 30
	'true'         shift, and enter state 31
	L_Ident        shift, and enter state 10
	L_integ        shift, and enter state 33

	Ident          goto state 19
	Integer        goto state 20
	Expr2          goto state 21
	Expr           goto state 149
	Expr1          goto state 23

State 81

	Stmt1 -> Ident '%=' . Expr                          (rule 91)

	'!'            shift, and enter state 26
	'('            shift, and enter state 27
	'++'           shift, and enter state 28
	'--'           shift, and enter state 29
	'false'        shift, and enter state 30
	'true'         shift, and enter state 31
	L_Ident        shift, and enter state 10
	L_integ        shift, and enter state 33

	Ident          goto state 19
	Integer        goto state 20
	Expr2          goto state 21
	Expr           goto state 148
	Expr1          goto state 23

State 82

	Stmt1 -> Ident '*=' . Expr                          (rule 89)

	'!'            shift, and enter state 26
	'('            shift, and enter state 27
	'++'           shift, and enter state 28
	'--'           shift, and enter state 29
	'false'        shift, and enter state 30
	'true'         shift, and enter state 31
	L_Ident        shift, and enter state 10
	L_integ        shift, and enter state 33

	Ident          goto state 19
	Integer        goto state 20
	Expr2          goto state 21
	Expr           goto state 147
	Expr1          goto state 23

State 83

	Stmt1 -> Ident '+=' . Expr                          (rule 87)

	'!'            shift, and enter state 26
	'('            shift, and enter state 27
	'++'           shift, and enter state 28
	'--'           shift, and enter state 29
	'false'        shift, and enter state 30
	'true'         shift, and enter state 31
	L_Ident        shift, and enter state 10
	L_integ        shift, and enter state 33

	Ident          goto state 19
	Integer        goto state 20
	Expr2          goto state 21
	Expr           goto state 146
	Expr1          goto state 23

State 84

	Stmt1 -> Ident '-=' . Expr                          (rule 88)

	'!'            shift, and enter state 26
	'('            shift, and enter state 27
	'++'           shift, and enter state 28
	'--'           shift, and enter state 29
	'false'        shift, and enter state 30
	'true'         shift, and enter state 31
	L_Ident        shift, and enter state 10
	L_integ        shift, and enter state 33

	Ident          goto state 19
	Integer        goto state 20
	Expr2          goto state 21
	Expr           goto state 145
	Expr1          goto state 23

State 85

	Stmt1 -> Ident '/=' . Expr                          (rule 90)

	'!'            shift, and enter state 26
	'('            shift, and enter state 27
	'++'           shift, and enter state 28
	'--'           shift, and enter state 29
	'false'        shift, and enter state 30
	'true'         shift, and enter state 31
	L_Ident        shift, and enter state 10
	L_integ        shift, and enter state 33

	Ident          goto state 19
	Integer        goto state 20
	Expr2          goto state 21
	Expr           goto state 144
	Expr1          goto state 23

State 86

	Stmt1 -> Ident '=' . Expr                           (rule 86)

	'!'            shift, and enter state 26
	'('            shift, and enter state 27
	'++'           shift, and enter state 28
	'--'           shift, and enter state 29
	'false'        shift, and enter state 30
	'true'         shift, and enter state 31
	L_Ident        shift, and enter state 10
	L_integ        shift, and enter state 33

	Ident          goto state 19
	Integer        goto state 20
	Expr2          goto state 21
	Expr           goto state 143
	Expr1          goto state 23

State 87

	Stmt1 -> Ident '[' . Expr ']' '=' '(' Expr ')'      (rule 92)

	'!'            shift, and enter state 26
	'('            shift, and enter state 27
	'++'           shift, and enter state 28
	'--'           shift, and enter state 29
	'false'        shift, and enter state 30
	'true'         shift, and enter state 31
	L_Ident        shift, and enter state 10
	L_integ        shift, and enter state 33

	Ident          goto state 19
	Integer        goto state 20
	Expr2          goto state 21
	Expr           goto state 142
	Expr1          goto state 23

State 88

	Stmt1 -> Ident 'set' . '[' Expr ']' 'to' '(' Expr ')'    (rule 93)

	'['            shift, and enter state 141


State 89

	Def1 -> 'Dict' SType . Ident                        (rule 74)

	L_Ident        shift, and enter state 10

	Ident          goto state 140

State 90

	Def1 -> 'Array' SType . Ident '[' Expr ']' '(' Expr ')'    (rule 72)
	Def1 -> 'Array' SType . Ident '[' Expr ']'          (rule 73)

	L_Ident        shift, and enter state 10

	Ident          goto state 139

State 91

	Def -> Def ';' .                                    (rule 62)

	';'            reduce using rule 62
	%eof           reduce using rule 62


State 92

	Def1 -> FType Ident . '(' Params ')' '{' Instr '}'    (rule 71)

	'('            shift, and enter state 138


State 93

	Def1 -> SType Ident . '=' Expr                      (rule 70)

	'='            shift, and enter state 137


State 94

	Params -> FType Ident .                             (rule 52)
	Params -> FType Ident . ',' Params                  (rule 54)

	')'            reduce using rule 52
	','            shift, and enter state 136
	%eof           reduce using rule 52


State 95

	Params -> SType Ident .                             (rule 51)
	Params -> SType Ident . ',' Params                  (rule 53)

	')'            reduce using rule 51
	','            shift, and enter state 135
	%eof           reduce using rule 51


State 96

	Expr2 -> '--' Ident .                               (rule 21)

	'!='           reduce using rule 21
	'%'            reduce using rule 21
	')'            reduce using rule 21
	'*'            reduce using rule 21
	'+'            reduce using rule 21
	','            reduce using rule 21
	'-'            reduce using rule 21
	'/'            reduce using rule 21
	';'            reduce using rule 21
	'<'            reduce using rule 21
	'<='           reduce using rule 21
	'=='           reduce using rule 21
	'>'            reduce using rule 21
	'>='           reduce using rule 21
	']'            reduce using rule 21
	'and'          reduce using rule 21
	'or'           reduce using rule 21
	'to'           reduce using rule 21
	'xor'          reduce using rule 21
	'}'            reduce using rule 21
	%eof           reduce using rule 21


State 97

	Expr2 -> '++' Ident .                               (rule 19)

	'!='           reduce using rule 19
	'%'            reduce using rule 19
	')'            reduce using rule 19
	'*'            reduce using rule 19
	'+'            reduce using rule 19
	','            reduce using rule 19
	'-'            reduce using rule 19
	'/'            reduce using rule 19
	';'            reduce using rule 19
	'<'            reduce using rule 19
	'<='           reduce using rule 19
	'=='           reduce using rule 19
	'>'            reduce using rule 19
	'>='           reduce using rule 19
	']'            reduce using rule 19
	'and'          reduce using rule 19
	'or'           reduce using rule 19
	'to'           reduce using rule 19
	'xor'          reduce using rule 19
	'}'            reduce using rule 19
	%eof           reduce using rule 19


State 98

	Expr2 -> '(' Expr . ')'                             (rule 24)
	Expr -> Expr . '+' Expr1                            (rule 29)
	Expr -> Expr . '-' Expr1                            (rule 30)
	Expr -> Expr . 'or' Expr1                           (rule 32)
	Expr -> Expr . 'and' Expr1                          (rule 33)
	Expr -> Expr . 'xor' Expr1                          (rule 34)

	')'            shift, and enter state 134
	'+'            shift, and enter state 69
	'-'            shift, and enter state 70
	'and'          shift, and enter state 71
	'or'           shift, and enter state 72
	'xor'          shift, and enter state 73


State 99

	Expr2 -> '!' Expr2 .                                (rule 27)

	'!='           reduce using rule 27
	'%'            reduce using rule 27
	')'            reduce using rule 27
	'*'            reduce using rule 27
	'+'            reduce using rule 27
	','            reduce using rule 27
	'-'            reduce using rule 27
	'/'            reduce using rule 27
	';'            reduce using rule 27
	'<'            reduce using rule 27
	'<='           reduce using rule 27
	'=='           reduce using rule 27
	'>'            reduce using rule 27
	'>='           reduce using rule 27
	']'            reduce using rule 27
	'and'          reduce using rule 27
	'or'           reduce using rule 27
	'to'           reduce using rule 27
	'xor'          reduce using rule 27
	'}'            reduce using rule 27
	%eof           reduce using rule 27


State 100

	Args -> Lambda ',' . Args                           (rule 49)

	'!'            shift, and enter state 26
	'('            shift, and enter state 27
	'++'           shift, and enter state 28
	'--'           shift, and enter state 29
	'BoolFunc'     shift, and enter state 12
	'IntFunc'      shift, and enter state 13
	'false'        shift, and enter state 30
	'true'         shift, and enter state 31
	'void'         shift, and enter state 32
	L_Ident        shift, and enter state 10
	L_integ        shift, and enter state 33

	Ident          goto state 19
	Integer        goto state 20
	FType          goto state 17
	Expr2          goto state 21
	Expr           goto state 22
	Expr1          goto state 23
	Args           goto state 133
	Lambda         goto state 25

State 101

	Expr1 -> Expr1 '!=' . Expr2                         (rule 44)

	'!'            shift, and enter state 26
	'('            shift, and enter state 27
	'++'           shift, and enter state 28
	'--'           shift, and enter state 29
	'false'        shift, and enter state 30
	'true'         shift, and enter state 31
	L_Ident        shift, and enter state 10
	L_integ        shift, and enter state 33

	Ident          goto state 19
	Integer        goto state 20
	Expr2          goto state 132

State 102

	Expr1 -> Expr1 '%' . Expr2                          (rule 37)

	'!'            shift, and enter state 26
	'('            shift, and enter state 27
	'++'           shift, and enter state 28
	'--'           shift, and enter state 29
	'false'        shift, and enter state 30
	'true'         shift, and enter state 31
	L_Ident        shift, and enter state 10
	L_integ        shift, and enter state 33

	Ident          goto state 19
	Integer        goto state 20
	Expr2          goto state 131

State 103

	Expr1 -> Expr1 '*' . Expr2                          (rule 36)

	'!'            shift, and enter state 26
	'('            shift, and enter state 27
	'++'           shift, and enter state 28
	'--'           shift, and enter state 29
	'false'        shift, and enter state 30
	'true'         shift, and enter state 31
	L_Ident        shift, and enter state 10
	L_integ        shift, and enter state 33

	Ident          goto state 19
	Integer        goto state 20
	Expr2          goto state 130

State 104

	Expr1 -> Expr1 '/' . Expr2                          (rule 35)

	'!'            shift, and enter state 26
	'('            shift, and enter state 27
	'++'           shift, and enter state 28
	'--'           shift, and enter state 29
	'false'        shift, and enter state 30
	'true'         shift, and enter state 31
	L_Ident        shift, and enter state 10
	L_integ        shift, and enter state 33

	Ident          goto state 19
	Integer        goto state 20
	Expr2          goto state 129

State 105

	Expr1 -> Expr1 '<' . Expr2                          (rule 42)

	'!'            shift, and enter state 26
	'('            shift, and enter state 27
	'++'           shift, and enter state 28
	'--'           shift, and enter state 29
	'false'        shift, and enter state 30
	'true'         shift, and enter state 31
	L_Ident        shift, and enter state 10
	L_integ        shift, and enter state 33

	Ident          goto state 19
	Integer        goto state 20
	Expr2          goto state 128

State 106

	Expr1 -> Expr1 '<=' . Expr2                         (rule 40)

	'!'            shift, and enter state 26
	'('            shift, and enter state 27
	'++'           shift, and enter state 28
	'--'           shift, and enter state 29
	'false'        shift, and enter state 30
	'true'         shift, and enter state 31
	L_Ident        shift, and enter state 10
	L_integ        shift, and enter state 33

	Ident          goto state 19
	Integer        goto state 20
	Expr2          goto state 127

State 107

	Expr1 -> Expr1 '==' . Expr2                         (rule 39)

	'!'            shift, and enter state 26
	'('            shift, and enter state 27
	'++'           shift, and enter state 28
	'--'           shift, and enter state 29
	'false'        shift, and enter state 30
	'true'         shift, and enter state 31
	L_Ident        shift, and enter state 10
	L_integ        shift, and enter state 33

	Ident          goto state 19
	Integer        goto state 20
	Expr2          goto state 126

State 108

	Expr1 -> Expr1 '>' . Expr2                          (rule 43)

	'!'            shift, and enter state 26
	'('            shift, and enter state 27
	'++'           shift, and enter state 28
	'--'           shift, and enter state 29
	'false'        shift, and enter state 30
	'true'         shift, and enter state 31
	L_Ident        shift, and enter state 10
	L_integ        shift, and enter state 33

	Ident          goto state 19
	Integer        goto state 20
	Expr2          goto state 125

State 109

	Expr1 -> Expr1 '>=' . Expr2                         (rule 41)

	'!'            shift, and enter state 26
	'('            shift, and enter state 27
	'++'           shift, and enter state 28
	'--'           shift, and enter state 29
	'false'        shift, and enter state 30
	'true'         shift, and enter state 31
	L_Ident        shift, and enter state 10
	L_integ        shift, and enter state 33

	Ident          goto state 19
	Integer        goto state 20
	Expr2          goto state 124

State 110

	Args -> Expr ',' . Args                             (rule 47)

	'!'            shift, and enter state 26
	'('            shift, and enter state 27
	'++'           shift, and enter state 28
	'--'           shift, and enter state 29
	'BoolFunc'     shift, and enter state 12
	'IntFunc'      shift, and enter state 13
	'false'        shift, and enter state 30
	'true'         shift, and enter state 31
	'void'         shift, and enter state 32
	L_Ident        shift, and enter state 10
	L_integ        shift, and enter state 33

	Ident          goto state 19
	Integer        goto state 20
	FType          goto state 17
	Expr2          goto state 21
	Expr           goto state 22
	Expr1          goto state 23
	Args           goto state 123
	Lambda         goto state 25

State 111

	Expr2 -> Ident '(' . Args ')'                       (rule 15)

	'!'            shift, and enter state 26
	'('            shift, and enter state 27
	'++'           shift, and enter state 28
	'--'           shift, and enter state 29
	'BoolFunc'     shift, and enter state 12
	'IntFunc'      shift, and enter state 13
	'false'        shift, and enter state 30
	'true'         shift, and enter state 31
	'void'         shift, and enter state 32
	L_Ident        shift, and enter state 10
	L_integ        shift, and enter state 33

	Ident          goto state 19
	Integer        goto state 20
	FType          goto state 17
	Expr2          goto state 21
	Expr           goto state 22
	Expr1          goto state 23
	Args           goto state 122
	Lambda         goto state 25

State 112

	Expr2 -> Ident '++' .                               (rule 18)

	'!='           reduce using rule 18
	'%'            reduce using rule 18
	')'            reduce using rule 18
	'*'            reduce using rule 18
	'+'            reduce using rule 18
	','            reduce using rule 18
	'-'            reduce using rule 18
	'/'            reduce using rule 18
	';'            reduce using rule 18
	'<'            reduce using rule 18
	'<='           reduce using rule 18
	'=='           reduce using rule 18
	'>'            reduce using rule 18
	'>='           reduce using rule 18
	']'            reduce using rule 18
	'and'          reduce using rule 18
	'or'           reduce using rule 18
	'to'           reduce using rule 18
	'xor'          reduce using rule 18
	'}'            reduce using rule 18
	%eof           reduce using rule 18


State 113

	Expr2 -> Ident '--' .                               (rule 20)

	'!='           reduce using rule 20
	'%'            reduce using rule 20
	')'            reduce using rule 20
	'*'            reduce using rule 20
	'+'            reduce using rule 20
	','            reduce using rule 20
	'-'            reduce using rule 20
	'/'            reduce using rule 20
	';'            reduce using rule 20
	'<'            reduce using rule 20
	'<='           reduce using rule 20
	'=='           reduce using rule 20
	'>'            reduce using rule 20
	'>='           reduce using rule 20
	']'            reduce using rule 20
	'and'          reduce using rule 20
	'or'           reduce using rule 20
	'to'           reduce using rule 20
	'xor'          reduce using rule 20
	'}'            reduce using rule 20
	%eof           reduce using rule 20


State 114

	Expr2 -> Ident '[' . Expr ']'                       (rule 22)

	'!'            shift, and enter state 26
	'('            shift, and enter state 27
	'++'           shift, and enter state 28
	'--'           shift, and enter state 29
	'false'        shift, and enter state 30
	'true'         shift, and enter state 31
	L_Ident        shift, and enter state 10
	L_integ        shift, and enter state 33

	Ident          goto state 19
	Integer        goto state 20
	Expr2          goto state 21
	Expr           goto state 121
	Expr1          goto state 23

State 115

	Expr2 -> Ident 'get' . '[' Expr ']'                 (rule 23)

	'['            shift, and enter state 120


State 116

	Expr2 -> Ident 'has' . 'key' '[' Expr ']'           (rule 28)

	'key'          shift, and enter state 119


State 117

	Lambda -> FType 'lambda' . '(' Params ')' '->' '{' Instr '}'    (rule 55)

	'('            shift, and enter state 118


State 118

	Lambda -> FType 'lambda' '(' . Params ')' '->' '{' Instr '}'    (rule 55)

	'Bool'         shift, and enter state 15
	'BoolFunc'     shift, and enter state 12
	'Int'          shift, and enter state 16
	'IntFunc'      shift, and enter state 13
	'none'         shift, and enter state 37

	SType          goto state 34
	FType          goto state 35
	Params         goto state 192

State 119

	Expr2 -> Ident 'has' 'key' . '[' Expr ']'           (rule 28)

	'['            shift, and enter state 191


State 120

	Expr2 -> Ident 'get' '[' . Expr ']'                 (rule 23)

	'!'            shift, and enter state 26
	'('            shift, and enter state 27
	'++'           shift, and enter state 28
	'--'           shift, and enter state 29
	'false'        shift, and enter state 30
	'true'         shift, and enter state 31
	L_Ident        shift, and enter state 10
	L_integ        shift, and enter state 33

	Ident          goto state 19
	Integer        goto state 20
	Expr2          goto state 21
	Expr           goto state 190
	Expr1          goto state 23

State 121

	Expr2 -> Ident '[' Expr . ']'                       (rule 22)
	Expr -> Expr . '+' Expr1                            (rule 29)
	Expr -> Expr . '-' Expr1                            (rule 30)
	Expr -> Expr . 'or' Expr1                           (rule 32)
	Expr -> Expr . 'and' Expr1                          (rule 33)
	Expr -> Expr . 'xor' Expr1                          (rule 34)

	'+'            shift, and enter state 69
	'-'            shift, and enter state 70
	']'            shift, and enter state 189
	'and'          shift, and enter state 71
	'or'           shift, and enter state 72
	'xor'          shift, and enter state 73


State 122

	Expr2 -> Ident '(' Args . ')'                       (rule 15)

	')'            shift, and enter state 188


State 123

	Args -> Expr ',' Args .                             (rule 47)

	')'            reduce using rule 47
	%eof           reduce using rule 47


State 124

	Expr1 -> Expr1 '>=' Expr2 .                         (rule 41)

	'!='           reduce using rule 41
	'%'            reduce using rule 41
	')'            reduce using rule 41
	'*'            reduce using rule 41
	'+'            reduce using rule 41
	','            reduce using rule 41
	'-'            reduce using rule 41
	'/'            reduce using rule 41
	';'            reduce using rule 41
	'<'            reduce using rule 41
	'<='           reduce using rule 41
	'=='           reduce using rule 41
	'>'            reduce using rule 41
	'>='           reduce using rule 41
	']'            reduce using rule 41
	'and'          reduce using rule 41
	'or'           reduce using rule 41
	'to'           reduce using rule 41
	'xor'          reduce using rule 41
	'}'            reduce using rule 41
	%eof           reduce using rule 41


State 125

	Expr1 -> Expr1 '>' Expr2 .                          (rule 43)

	'!='           reduce using rule 43
	'%'            reduce using rule 43
	')'            reduce using rule 43
	'*'            reduce using rule 43
	'+'            reduce using rule 43
	','            reduce using rule 43
	'-'            reduce using rule 43
	'/'            reduce using rule 43
	';'            reduce using rule 43
	'<'            reduce using rule 43
	'<='           reduce using rule 43
	'=='           reduce using rule 43
	'>'            reduce using rule 43
	'>='           reduce using rule 43
	']'            reduce using rule 43
	'and'          reduce using rule 43
	'or'           reduce using rule 43
	'to'           reduce using rule 43
	'xor'          reduce using rule 43
	'}'            reduce using rule 43
	%eof           reduce using rule 43


State 126

	Expr1 -> Expr1 '==' Expr2 .                         (rule 39)

	'!='           reduce using rule 39
	'%'            reduce using rule 39
	')'            reduce using rule 39
	'*'            reduce using rule 39
	'+'            reduce using rule 39
	','            reduce using rule 39
	'-'            reduce using rule 39
	'/'            reduce using rule 39
	';'            reduce using rule 39
	'<'            reduce using rule 39
	'<='           reduce using rule 39
	'=='           reduce using rule 39
	'>'            reduce using rule 39
	'>='           reduce using rule 39
	']'            reduce using rule 39
	'and'          reduce using rule 39
	'or'           reduce using rule 39
	'to'           reduce using rule 39
	'xor'          reduce using rule 39
	'}'            reduce using rule 39
	%eof           reduce using rule 39


State 127

	Expr1 -> Expr1 '<=' Expr2 .                         (rule 40)

	'!='           reduce using rule 40
	'%'            reduce using rule 40
	')'            reduce using rule 40
	'*'            reduce using rule 40
	'+'            reduce using rule 40
	','            reduce using rule 40
	'-'            reduce using rule 40
	'/'            reduce using rule 40
	';'            reduce using rule 40
	'<'            reduce using rule 40
	'<='           reduce using rule 40
	'=='           reduce using rule 40
	'>'            reduce using rule 40
	'>='           reduce using rule 40
	']'            reduce using rule 40
	'and'          reduce using rule 40
	'or'           reduce using rule 40
	'to'           reduce using rule 40
	'xor'          reduce using rule 40
	'}'            reduce using rule 40
	%eof           reduce using rule 40


State 128

	Expr1 -> Expr1 '<' Expr2 .                          (rule 42)

	'!='           reduce using rule 42
	'%'            reduce using rule 42
	')'            reduce using rule 42
	'*'            reduce using rule 42
	'+'            reduce using rule 42
	','            reduce using rule 42
	'-'            reduce using rule 42
	'/'            reduce using rule 42
	';'            reduce using rule 42
	'<'            reduce using rule 42
	'<='           reduce using rule 42
	'=='           reduce using rule 42
	'>'            reduce using rule 42
	'>='           reduce using rule 42
	']'            reduce using rule 42
	'and'          reduce using rule 42
	'or'           reduce using rule 42
	'to'           reduce using rule 42
	'xor'          reduce using rule 42
	'}'            reduce using rule 42
	%eof           reduce using rule 42


State 129

	Expr1 -> Expr1 '/' Expr2 .                          (rule 35)

	'!='           reduce using rule 35
	'%'            reduce using rule 35
	')'            reduce using rule 35
	'*'            reduce using rule 35
	'+'            reduce using rule 35
	','            reduce using rule 35
	'-'            reduce using rule 35
	'/'            reduce using rule 35
	';'            reduce using rule 35
	'<'            reduce using rule 35
	'<='           reduce using rule 35
	'=='           reduce using rule 35
	'>'            reduce using rule 35
	'>='           reduce using rule 35
	']'            reduce using rule 35
	'and'          reduce using rule 35
	'or'           reduce using rule 35
	'to'           reduce using rule 35
	'xor'          reduce using rule 35
	'}'            reduce using rule 35
	%eof           reduce using rule 35


State 130

	Expr1 -> Expr1 '*' Expr2 .                          (rule 36)

	'!='           reduce using rule 36
	'%'            reduce using rule 36
	')'            reduce using rule 36
	'*'            reduce using rule 36
	'+'            reduce using rule 36
	','            reduce using rule 36
	'-'            reduce using rule 36
	'/'            reduce using rule 36
	';'            reduce using rule 36
	'<'            reduce using rule 36
	'<='           reduce using rule 36
	'=='           reduce using rule 36
	'>'            reduce using rule 36
	'>='           reduce using rule 36
	']'            reduce using rule 36
	'and'          reduce using rule 36
	'or'           reduce using rule 36
	'to'           reduce using rule 36
	'xor'          reduce using rule 36
	'}'            reduce using rule 36
	%eof           reduce using rule 36


State 131

	Expr1 -> Expr1 '%' Expr2 .                          (rule 37)

	'!='           reduce using rule 37
	'%'            reduce using rule 37
	')'            reduce using rule 37
	'*'            reduce using rule 37
	'+'            reduce using rule 37
	','            reduce using rule 37
	'-'            reduce using rule 37
	'/'            reduce using rule 37
	';'            reduce using rule 37
	'<'            reduce using rule 37
	'<='           reduce using rule 37
	'=='           reduce using rule 37
	'>'            reduce using rule 37
	'>='           reduce using rule 37
	']'            reduce using rule 37
	'and'          reduce using rule 37
	'or'           reduce using rule 37
	'to'           reduce using rule 37
	'xor'          reduce using rule 37
	'}'            reduce using rule 37
	%eof           reduce using rule 37


State 132

	Expr1 -> Expr1 '!=' Expr2 .                         (rule 44)

	'!='           reduce using rule 44
	'%'            reduce using rule 44
	')'            reduce using rule 44
	'*'            reduce using rule 44
	'+'            reduce using rule 44
	','            reduce using rule 44
	'-'            reduce using rule 44
	'/'            reduce using rule 44
	';'            reduce using rule 44
	'<'            reduce using rule 44
	'<='           reduce using rule 44
	'=='           reduce using rule 44
	'>'            reduce using rule 44
	'>='           reduce using rule 44
	']'            reduce using rule 44
	'and'          reduce using rule 44
	'or'           reduce using rule 44
	'to'           reduce using rule 44
	'xor'          reduce using rule 44
	'}'            reduce using rule 44
	%eof           reduce using rule 44


State 133

	Args -> Lambda ',' Args .                           (rule 49)

	')'            reduce using rule 49
	%eof           reduce using rule 49


State 134

	Expr2 -> '(' Expr ')' .                             (rule 24)

	'!='           reduce using rule 24
	'%'            reduce using rule 24
	')'            reduce using rule 24
	'*'            reduce using rule 24
	'+'            reduce using rule 24
	','            reduce using rule 24
	'-'            reduce using rule 24
	'/'            reduce using rule 24
	';'            reduce using rule 24
	'<'            reduce using rule 24
	'<='           reduce using rule 24
	'=='           reduce using rule 24
	'>'            reduce using rule 24
	'>='           reduce using rule 24
	']'            reduce using rule 24
	'and'          reduce using rule 24
	'or'           reduce using rule 24
	'to'           reduce using rule 24
	'xor'          reduce using rule 24
	'}'            reduce using rule 24
	%eof           reduce using rule 24


State 135

	Params -> SType Ident ',' . Params                  (rule 53)

	'Bool'         shift, and enter state 15
	'BoolFunc'     shift, and enter state 12
	'Int'          shift, and enter state 16
	'IntFunc'      shift, and enter state 13
	'none'         shift, and enter state 37

	SType          goto state 34
	FType          goto state 35
	Params         goto state 187

State 136

	Params -> FType Ident ',' . Params                  (rule 54)

	'Bool'         shift, and enter state 15
	'BoolFunc'     shift, and enter state 12
	'Int'          shift, and enter state 16
	'IntFunc'      shift, and enter state 13
	'none'         shift, and enter state 37

	SType          goto state 34
	FType          goto state 35
	Params         goto state 186

State 137

	Def1 -> SType Ident '=' . Expr                      (rule 70)

	'!'            shift, and enter state 26
	'('            shift, and enter state 27
	'++'           shift, and enter state 28
	'--'           shift, and enter state 29
	'false'        shift, and enter state 30
	'true'         shift, and enter state 31
	L_Ident        shift, and enter state 10
	L_integ        shift, and enter state 33

	Ident          goto state 19
	Integer        goto state 20
	Expr2          goto state 21
	Expr           goto state 185
	Expr1          goto state 23

State 138

	Def1 -> FType Ident '(' . Params ')' '{' Instr '}'    (rule 71)

	'Bool'         shift, and enter state 15
	'BoolFunc'     shift, and enter state 12
	'Int'          shift, and enter state 16
	'IntFunc'      shift, and enter state 13
	'none'         shift, and enter state 37

	SType          goto state 34
	FType          goto state 35
	Params         goto state 184

State 139

	Def1 -> 'Array' SType Ident . '[' Expr ']' '(' Expr ')'    (rule 72)
	Def1 -> 'Array' SType Ident . '[' Expr ']'          (rule 73)

	'['            shift, and enter state 183


State 140

	Def1 -> 'Dict' SType Ident .                        (rule 74)

	';'            reduce using rule 74
	%eof           reduce using rule 74


State 141

	Stmt1 -> Ident 'set' '[' . Expr ']' 'to' '(' Expr ')'    (rule 93)

	'!'            shift, and enter state 26
	'('            shift, and enter state 27
	'++'           shift, and enter state 28
	'--'           shift, and enter state 29
	'false'        shift, and enter state 30
	'true'         shift, and enter state 31
	L_Ident        shift, and enter state 10
	L_integ        shift, and enter state 33

	Ident          goto state 19
	Integer        goto state 20
	Expr2          goto state 21
	Expr           goto state 182
	Expr1          goto state 23

State 142

	Expr -> Expr . '+' Expr1                            (rule 29)
	Expr -> Expr . '-' Expr1                            (rule 30)
	Expr -> Expr . 'or' Expr1                           (rule 32)
	Expr -> Expr . 'and' Expr1                          (rule 33)
	Expr -> Expr . 'xor' Expr1                          (rule 34)
	Stmt1 -> Ident '[' Expr . ']' '=' '(' Expr ')'      (rule 92)

	'+'            shift, and enter state 69
	'-'            shift, and enter state 70
	']'            shift, and enter state 181
	'and'          shift, and enter state 71
	'or'           shift, and enter state 72
	'xor'          shift, and enter state 73


State 143

	Expr -> Expr . '+' Expr1                            (rule 29)
	Expr -> Expr . '-' Expr1                            (rule 30)
	Expr -> Expr . 'or' Expr1                           (rule 32)
	Expr -> Expr . 'and' Expr1                          (rule 33)
	Expr -> Expr . 'xor' Expr1                          (rule 34)
	Stmt1 -> Ident '=' Expr .                           (rule 86)

	'+'            shift, and enter state 69
	'-'            shift, and enter state 70
	';'            reduce using rule 86
	'and'          shift, and enter state 71
	'or'           shift, and enter state 72
	'xor'          shift, and enter state 73
	'}'            reduce using rule 86
	%eof           reduce using rule 86


State 144

	Expr -> Expr . '+' Expr1                            (rule 29)
	Expr -> Expr . '-' Expr1                            (rule 30)
	Expr -> Expr . 'or' Expr1                           (rule 32)
	Expr -> Expr . 'and' Expr1                          (rule 33)
	Expr -> Expr . 'xor' Expr1                          (rule 34)
	Stmt1 -> Ident '/=' Expr .                          (rule 90)

	'+'            shift, and enter state 69
	'-'            shift, and enter state 70
	';'            reduce using rule 90
	'and'          shift, and enter state 71
	'or'           shift, and enter state 72
	'xor'          shift, and enter state 73
	'}'            reduce using rule 90
	%eof           reduce using rule 90


State 145

	Expr -> Expr . '+' Expr1                            (rule 29)
	Expr -> Expr . '-' Expr1                            (rule 30)
	Expr -> Expr . 'or' Expr1                           (rule 32)
	Expr -> Expr . 'and' Expr1                          (rule 33)
	Expr -> Expr . 'xor' Expr1                          (rule 34)
	Stmt1 -> Ident '-=' Expr .                          (rule 88)

	'+'            shift, and enter state 69
	'-'            shift, and enter state 70
	';'            reduce using rule 88
	'and'          shift, and enter state 71
	'or'           shift, and enter state 72
	'xor'          shift, and enter state 73
	'}'            reduce using rule 88
	%eof           reduce using rule 88


State 146

	Expr -> Expr . '+' Expr1                            (rule 29)
	Expr -> Expr . '-' Expr1                            (rule 30)
	Expr -> Expr . 'or' Expr1                           (rule 32)
	Expr -> Expr . 'and' Expr1                          (rule 33)
	Expr -> Expr . 'xor' Expr1                          (rule 34)
	Stmt1 -> Ident '+=' Expr .                          (rule 87)

	'+'            shift, and enter state 69
	'-'            shift, and enter state 70
	';'            reduce using rule 87
	'and'          shift, and enter state 71
	'or'           shift, and enter state 72
	'xor'          shift, and enter state 73
	'}'            reduce using rule 87
	%eof           reduce using rule 87


State 147

	Expr -> Expr . '+' Expr1                            (rule 29)
	Expr -> Expr . '-' Expr1                            (rule 30)
	Expr -> Expr . 'or' Expr1                           (rule 32)
	Expr -> Expr . 'and' Expr1                          (rule 33)
	Expr -> Expr . 'xor' Expr1                          (rule 34)
	Stmt1 -> Ident '*=' Expr .                          (rule 89)

	'+'            shift, and enter state 69
	'-'            shift, and enter state 70
	';'            reduce using rule 89
	'and'          shift, and enter state 71
	'or'           shift, and enter state 72
	'xor'          shift, and enter state 73
	'}'            reduce using rule 89
	%eof           reduce using rule 89


State 148

	Expr -> Expr . '+' Expr1                            (rule 29)
	Expr -> Expr . '-' Expr1                            (rule 30)
	Expr -> Expr . 'or' Expr1                           (rule 32)
	Expr -> Expr . 'and' Expr1                          (rule 33)
	Expr -> Expr . 'xor' Expr1                          (rule 34)
	Stmt1 -> Ident '%=' Expr .                          (rule 91)

	'+'            shift, and enter state 69
	'-'            shift, and enter state 70
	';'            reduce using rule 91
	'and'          shift, and enter state 71
	'or'           shift, and enter state 72
	'xor'          shift, and enter state 73
	'}'            reduce using rule 91
	%eof           reduce using rule 91


State 149

	Expr -> Expr . '+' Expr1                            (rule 29)
	Expr -> Expr . '-' Expr1                            (rule 30)
	Expr -> Expr . 'or' Expr1                           (rule 32)
	Expr -> Expr . 'and' Expr1                          (rule 33)
	Expr -> Expr . 'xor' Expr1                          (rule 34)
	Stmt1 -> 'break' '(' Expr . ')'                     (rule 82)

	')'            shift, and enter state 180
	'+'            shift, and enter state 69
	'-'            shift, and enter state 70
	'and'          shift, and enter state 71
	'or'           shift, and enter state 72
	'xor'          shift, and enter state 73


State 150

	Stmt1 -> 'continue' 'outer' '(' . Expr ')'          (rule 84)

	'!'            shift, and enter state 26
	'('            shift, and enter state 27
	'++'           shift, and enter state 28
	'--'           shift, and enter state 29
	'false'        shift, and enter state 30
	'true'         shift, and enter state 31
	L_Ident        shift, and enter state 10
	L_integ        shift, and enter state 33

	Ident          goto state 19
	Integer        goto state 20
	Expr2          goto state 21
	Expr           goto state 179
	Expr1          goto state 23

State 151

	Stmt1 -> 'for' '(' Ident . '=' Expr 'to' Expr ')' '{' Instr '}'    (rule 78)

	'='            shift, and enter state 178


State 152

	Expr -> Expr . '+' Expr1                            (rule 29)
	Expr -> Expr . '-' Expr1                            (rule 30)
	Expr -> Expr . 'or' Expr1                           (rule 32)
	Expr -> Expr . 'and' Expr1                          (rule 33)
	Expr -> Expr . 'xor' Expr1                          (rule 34)
	Stmt1 -> 'if' '(' Expr . ')' '{' Instr '}' 'else' '{' Instr '}'    (rule 75)
	Stmt1 -> 'if' '(' Expr . ')' '{' Instr '}'          (rule 76)

	')'            shift, and enter state 177
	'+'            shift, and enter state 69
	'-'            shift, and enter state 70
	'and'          shift, and enter state 71
	'or'           shift, and enter state 72
	'xor'          shift, and enter state 73


State 153

	Expr -> Expr . '+' Expr1                            (rule 29)
	Expr -> Expr . '-' Expr1                            (rule 30)
	Expr -> Expr . 'or' Expr1                           (rule 32)
	Expr -> Expr . 'and' Expr1                          (rule 33)
	Expr -> Expr . 'xor' Expr1                          (rule 34)
	Stmt1 -> 'print' '(' Expr . ')'                     (rule 81)

	')'            shift, and enter state 176
	'+'            shift, and enter state 69
	'-'            shift, and enter state 70
	'and'          shift, and enter state 71
	'or'           shift, and enter state 72
	'xor'          shift, and enter state 73


State 154

	Expr -> Expr . '+' Expr1                            (rule 29)
	Expr -> Expr . '-' Expr1                            (rule 30)
	Expr -> Expr . 'or' Expr1                           (rule 32)
	Expr -> Expr . 'and' Expr1                          (rule 33)
	Expr -> Expr . 'xor' Expr1                          (rule 34)
	Stmt1 -> 'return' '(' Expr . ')'                    (rule 80)

	')'            shift, and enter state 175
	'+'            shift, and enter state 69
	'-'            shift, and enter state 70
	'and'          shift, and enter state 71
	'or'           shift, and enter state 72
	'xor'          shift, and enter state 73


State 155

	Expr -> Expr . '+' Expr1                            (rule 29)
	Expr -> Expr . '-' Expr1                            (rule 30)
	Expr -> Expr . 'or' Expr1                           (rule 32)
	Expr -> Expr . 'and' Expr1                          (rule 33)
	Expr -> Expr . 'xor' Expr1                          (rule 34)
	Stmt1 -> 'while' '(' Expr . ')' '{' Instr '}'       (rule 77)

	')'            shift, and enter state 174
	'+'            shift, and enter state 69
	'-'            shift, and enter state 70
	'and'          shift, and enter state 71
	'or'           shift, and enter state 72
	'xor'          shift, and enter state 73


State 156

	Expr -> Expr 'xor' Expr1 .                          (rule 34)
	Expr1 -> Expr1 . '/' Expr2                          (rule 35)
	Expr1 -> Expr1 . '*' Expr2                          (rule 36)
	Expr1 -> Expr1 . '%' Expr2                          (rule 37)
	Expr1 -> Expr1 . '==' Expr2                         (rule 39)
	Expr1 -> Expr1 . '<=' Expr2                         (rule 40)
	Expr1 -> Expr1 . '>=' Expr2                         (rule 41)
	Expr1 -> Expr1 . '<' Expr2                          (rule 42)
	Expr1 -> Expr1 . '>' Expr2                          (rule 43)
	Expr1 -> Expr1 . '!=' Expr2                         (rule 44)

	'!='           shift, and enter state 101
	'%'            shift, and enter state 102
	')'            reduce using rule 34
	'*'            shift, and enter state 103
	'+'            reduce using rule 34
	','            reduce using rule 34
	'-'            reduce using rule 34
	'/'            shift, and enter state 104
	';'            reduce using rule 34
	'<'            shift, and enter state 105
	'<='           shift, and enter state 106
	'=='           shift, and enter state 107
	'>'            shift, and enter state 108
	'>='           shift, and enter state 109
	']'            reduce using rule 34
	'and'          reduce using rule 34
	'or'           reduce using rule 34
	'to'           reduce using rule 34
	'xor'          reduce using rule 34
	'}'            reduce using rule 34
	%eof           reduce using rule 34


State 157

	Expr -> Expr 'or' Expr1 .                           (rule 32)
	Expr1 -> Expr1 . '/' Expr2                          (rule 35)
	Expr1 -> Expr1 . '*' Expr2                          (rule 36)
	Expr1 -> Expr1 . '%' Expr2                          (rule 37)
	Expr1 -> Expr1 . '==' Expr2                         (rule 39)
	Expr1 -> Expr1 . '<=' Expr2                         (rule 40)
	Expr1 -> Expr1 . '>=' Expr2                         (rule 41)
	Expr1 -> Expr1 . '<' Expr2                          (rule 42)
	Expr1 -> Expr1 . '>' Expr2                          (rule 43)
	Expr1 -> Expr1 . '!=' Expr2                         (rule 44)

	'!='           shift, and enter state 101
	'%'            shift, and enter state 102
	')'            reduce using rule 32
	'*'            shift, and enter state 103
	'+'            reduce using rule 32
	','            reduce using rule 32
	'-'            reduce using rule 32
	'/'            shift, and enter state 104
	';'            reduce using rule 32
	'<'            shift, and enter state 105
	'<='           shift, and enter state 106
	'=='           shift, and enter state 107
	'>'            shift, and enter state 108
	'>='           shift, and enter state 109
	']'            reduce using rule 32
	'and'          reduce using rule 32
	'or'           reduce using rule 32
	'to'           reduce using rule 32
	'xor'          reduce using rule 32
	'}'            reduce using rule 32
	%eof           reduce using rule 32


State 158

	Expr -> Expr 'and' Expr1 .                          (rule 33)
	Expr1 -> Expr1 . '/' Expr2                          (rule 35)
	Expr1 -> Expr1 . '*' Expr2                          (rule 36)
	Expr1 -> Expr1 . '%' Expr2                          (rule 37)
	Expr1 -> Expr1 . '==' Expr2                         (rule 39)
	Expr1 -> Expr1 . '<=' Expr2                         (rule 40)
	Expr1 -> Expr1 . '>=' Expr2                         (rule 41)
	Expr1 -> Expr1 . '<' Expr2                          (rule 42)
	Expr1 -> Expr1 . '>' Expr2                          (rule 43)
	Expr1 -> Expr1 . '!=' Expr2                         (rule 44)

	'!='           shift, and enter state 101
	'%'            shift, and enter state 102
	')'            reduce using rule 33
	'*'            shift, and enter state 103
	'+'            reduce using rule 33
	','            reduce using rule 33
	'-'            reduce using rule 33
	'/'            shift, and enter state 104
	';'            reduce using rule 33
	'<'            shift, and enter state 105
	'<='           shift, and enter state 106
	'=='           shift, and enter state 107
	'>'            shift, and enter state 108
	'>='           shift, and enter state 109
	']'            reduce using rule 33
	'and'          reduce using rule 33
	'or'           reduce using rule 33
	'to'           reduce using rule 33
	'xor'          reduce using rule 33
	'}'            reduce using rule 33
	%eof           reduce using rule 33


State 159

	Expr -> Expr '-' Expr1 .                            (rule 30)
	Expr1 -> Expr1 . '/' Expr2                          (rule 35)
	Expr1 -> Expr1 . '*' Expr2                          (rule 36)
	Expr1 -> Expr1 . '%' Expr2                          (rule 37)
	Expr1 -> Expr1 . '==' Expr2                         (rule 39)
	Expr1 -> Expr1 . '<=' Expr2                         (rule 40)
	Expr1 -> Expr1 . '>=' Expr2                         (rule 41)
	Expr1 -> Expr1 . '<' Expr2                          (rule 42)
	Expr1 -> Expr1 . '>' Expr2                          (rule 43)
	Expr1 -> Expr1 . '!=' Expr2                         (rule 44)

	'!='           shift, and enter state 101
	'%'            shift, and enter state 102
	')'            reduce using rule 30
	'*'            shift, and enter state 103
	'+'            reduce using rule 30
	','            reduce using rule 30
	'-'            reduce using rule 30
	'/'            shift, and enter state 104
	';'            reduce using rule 30
	'<'            shift, and enter state 105
	'<='           shift, and enter state 106
	'=='           shift, and enter state 107
	'>'            shift, and enter state 108
	'>='           shift, and enter state 109
	']'            reduce using rule 30
	'and'          reduce using rule 30
	'or'           reduce using rule 30
	'to'           reduce using rule 30
	'xor'          reduce using rule 30
	'}'            reduce using rule 30
	%eof           reduce using rule 30


State 160

	Expr -> Expr '+' Expr1 .                            (rule 29)
	Expr1 -> Expr1 . '/' Expr2                          (rule 35)
	Expr1 -> Expr1 . '*' Expr2                          (rule 36)
	Expr1 -> Expr1 . '%' Expr2                          (rule 37)
	Expr1 -> Expr1 . '==' Expr2                         (rule 39)
	Expr1 -> Expr1 . '<=' Expr2                         (rule 40)
	Expr1 -> Expr1 . '>=' Expr2                         (rule 41)
	Expr1 -> Expr1 . '<' Expr2                          (rule 42)
	Expr1 -> Expr1 . '>' Expr2                          (rule 43)
	Expr1 -> Expr1 . '!=' Expr2                         (rule 44)

	'!='           shift, and enter state 101
	'%'            shift, and enter state 102
	')'            reduce using rule 29
	'*'            shift, and enter state 103
	'+'            reduce using rule 29
	','            reduce using rule 29
	'-'            reduce using rule 29
	'/'            shift, and enter state 104
	';'            reduce using rule 29
	'<'            shift, and enter state 105
	'<='           shift, and enter state 106
	'=='           shift, and enter state 107
	'>'            shift, and enter state 108
	'>='           shift, and enter state 109
	']'            reduce using rule 29
	'and'          reduce using rule 29
	'or'           reduce using rule 29
	'to'           reduce using rule 29
	'xor'          reduce using rule 29
	'}'            reduce using rule 29
	%eof           reduce using rule 29


State 161

	Instr -> Instr1 ';' Instr .                         (rule 56)

	'}'            reduce using rule 56
	%eof           reduce using rule 56


State 162

	Instr -> Def ';' Instr .                            (rule 57)

	'}'            reduce using rule 57
	%eof           reduce using rule 57


State 163

	Instr -> SpecStmt ';' Instr .                       (rule 58)

	'}'            reduce using rule 58
	%eof           reduce using rule 58


State 164

	SpecStmt -> 'debug' 'reading' 'disable' . Ident     (rule 69)

	L_Ident        shift, and enter state 10

	Ident          goto state 173

State 165

	SpecStmt -> 'debug' 'reading' 'enable' . Ident      (rule 68)

	L_Ident        shift, and enter state 10

	Ident          goto state 172

State 166

	SpecStmt -> 'debug' 'assignment' 'disable' . Ident    (rule 67)

	L_Ident        shift, and enter state 10

	Ident          goto state 171

State 167

	SpecStmt -> 'debug' 'assignment' 'enable' . Ident    (rule 66)

	L_Ident        shift, and enter state 10

	Ident          goto state 170

State 168

	SpecStmt -> 'swap' '(' Ident . ',' Ident ')'        (rule 65)

	','            shift, and enter state 169


State 169

	SpecStmt -> 'swap' '(' Ident ',' . Ident ')'        (rule 65)

	L_Ident        shift, and enter state 10

	Ident          goto state 204

State 170

	SpecStmt -> 'debug' 'assignment' 'enable' Ident .    (rule 66)

	';'            reduce using rule 66


State 171

	SpecStmt -> 'debug' 'assignment' 'disable' Ident .    (rule 67)

	';'            reduce using rule 67


State 172

	SpecStmt -> 'debug' 'reading' 'enable' Ident .      (rule 68)

	';'            reduce using rule 68


State 173

	SpecStmt -> 'debug' 'reading' 'disable' Ident .     (rule 69)

	';'            reduce using rule 69


State 174

	Stmt1 -> 'while' '(' Expr ')' . '{' Instr '}'       (rule 77)

	'{'            shift, and enter state 203


State 175

	Stmt1 -> 'return' '(' Expr ')' .                    (rule 80)

	';'            reduce using rule 80
	'}'            reduce using rule 80
	%eof           reduce using rule 80


State 176

	Stmt1 -> 'print' '(' Expr ')' .                     (rule 81)

	';'            reduce using rule 81
	'}'            reduce using rule 81
	%eof           reduce using rule 81


State 177

	Stmt1 -> 'if' '(' Expr ')' . '{' Instr '}' 'else' '{' Instr '}'    (rule 75)
	Stmt1 -> 'if' '(' Expr ')' . '{' Instr '}'          (rule 76)

	'{'            shift, and enter state 202


State 178

	Stmt1 -> 'for' '(' Ident '=' . Expr 'to' Expr ')' '{' Instr '}'    (rule 78)

	'!'            shift, and enter state 26
	'('            shift, and enter state 27
	'++'           shift, and enter state 28
	'--'           shift, and enter state 29
	'false'        shift, and enter state 30
	'true'         shift, and enter state 31
	L_Ident        shift, and enter state 10
	L_integ        shift, and enter state 33

	Ident          goto state 19
	Integer        goto state 20
	Expr2          goto state 21
	Expr           goto state 201
	Expr1          goto state 23

State 179

	Expr -> Expr . '+' Expr1                            (rule 29)
	Expr -> Expr . '-' Expr1                            (rule 30)
	Expr -> Expr . 'or' Expr1                           (rule 32)
	Expr -> Expr . 'and' Expr1                          (rule 33)
	Expr -> Expr . 'xor' Expr1                          (rule 34)
	Stmt1 -> 'continue' 'outer' '(' Expr . ')'          (rule 84)

	')'            shift, and enter state 200
	'+'            shift, and enter state 69
	'-'            shift, and enter state 70
	'and'          shift, and enter state 71
	'or'           shift, and enter state 72
	'xor'          shift, and enter state 73


State 180

	Stmt1 -> 'break' '(' Expr ')' .                     (rule 82)

	';'            reduce using rule 82
	'}'            reduce using rule 82
	%eof           reduce using rule 82


State 181

	Stmt1 -> Ident '[' Expr ']' . '=' '(' Expr ')'      (rule 92)

	'='            shift, and enter state 199


State 182

	Expr -> Expr . '+' Expr1                            (rule 29)
	Expr -> Expr . '-' Expr1                            (rule 30)
	Expr -> Expr . 'or' Expr1                           (rule 32)
	Expr -> Expr . 'and' Expr1                          (rule 33)
	Expr -> Expr . 'xor' Expr1                          (rule 34)
	Stmt1 -> Ident 'set' '[' Expr . ']' 'to' '(' Expr ')'    (rule 93)

	'+'            shift, and enter state 69
	'-'            shift, and enter state 70
	']'            shift, and enter state 198
	'and'          shift, and enter state 71
	'or'           shift, and enter state 72
	'xor'          shift, and enter state 73


State 183

	Def1 -> 'Array' SType Ident '[' . Expr ']' '(' Expr ')'    (rule 72)
	Def1 -> 'Array' SType Ident '[' . Expr ']'          (rule 73)

	'!'            shift, and enter state 26
	'('            shift, and enter state 27
	'++'           shift, and enter state 28
	'--'           shift, and enter state 29
	'false'        shift, and enter state 30
	'true'         shift, and enter state 31
	L_Ident        shift, and enter state 10
	L_integ        shift, and enter state 33

	Ident          goto state 19
	Integer        goto state 20
	Expr2          goto state 21
	Expr           goto state 197
	Expr1          goto state 23

State 184

	Def1 -> FType Ident '(' Params . ')' '{' Instr '}'    (rule 71)

	')'            shift, and enter state 196


State 185

	Expr -> Expr . '+' Expr1                            (rule 29)
	Expr -> Expr . '-' Expr1                            (rule 30)
	Expr -> Expr . 'or' Expr1                           (rule 32)
	Expr -> Expr . 'and' Expr1                          (rule 33)
	Expr -> Expr . 'xor' Expr1                          (rule 34)
	Def1 -> SType Ident '=' Expr .                      (rule 70)

	'+'            shift, and enter state 69
	'-'            shift, and enter state 70
	';'            reduce using rule 70
	'and'          shift, and enter state 71
	'or'           shift, and enter state 72
	'xor'          shift, and enter state 73
	%eof           reduce using rule 70


State 186

	Params -> FType Ident ',' Params .                  (rule 54)

	')'            reduce using rule 54
	%eof           reduce using rule 54


State 187

	Params -> SType Ident ',' Params .                  (rule 53)

	')'            reduce using rule 53
	%eof           reduce using rule 53


State 188

	Expr2 -> Ident '(' Args ')' .                       (rule 15)

	'!='           reduce using rule 15
	'%'            reduce using rule 15
	')'            reduce using rule 15
	'*'            reduce using rule 15
	'+'            reduce using rule 15
	','            reduce using rule 15
	'-'            reduce using rule 15
	'/'            reduce using rule 15
	';'            reduce using rule 15
	'<'            reduce using rule 15
	'<='           reduce using rule 15
	'=='           reduce using rule 15
	'>'            reduce using rule 15
	'>='           reduce using rule 15
	']'            reduce using rule 15
	'and'          reduce using rule 15
	'or'           reduce using rule 15
	'to'           reduce using rule 15
	'xor'          reduce using rule 15
	'}'            reduce using rule 15
	%eof           reduce using rule 15


State 189

	Expr2 -> Ident '[' Expr ']' .                       (rule 22)

	'!='           reduce using rule 22
	'%'            reduce using rule 22
	')'            reduce using rule 22
	'*'            reduce using rule 22
	'+'            reduce using rule 22
	','            reduce using rule 22
	'-'            reduce using rule 22
	'/'            reduce using rule 22
	';'            reduce using rule 22
	'<'            reduce using rule 22
	'<='           reduce using rule 22
	'=='           reduce using rule 22
	'>'            reduce using rule 22
	'>='           reduce using rule 22
	']'            reduce using rule 22
	'and'          reduce using rule 22
	'or'           reduce using rule 22
	'to'           reduce using rule 22
	'xor'          reduce using rule 22
	'}'            reduce using rule 22
	%eof           reduce using rule 22


State 190

	Expr2 -> Ident 'get' '[' Expr . ']'                 (rule 23)
	Expr -> Expr . '+' Expr1                            (rule 29)
	Expr -> Expr . '-' Expr1                            (rule 30)
	Expr -> Expr . 'or' Expr1                           (rule 32)
	Expr -> Expr . 'and' Expr1                          (rule 33)
	Expr -> Expr . 'xor' Expr1                          (rule 34)

	'+'            shift, and enter state 69
	'-'            shift, and enter state 70
	']'            shift, and enter state 195
	'and'          shift, and enter state 71
	'or'           shift, and enter state 72
	'xor'          shift, and enter state 73


State 191

	Expr2 -> Ident 'has' 'key' '[' . Expr ']'           (rule 28)

	'!'            shift, and enter state 26
	'('            shift, and enter state 27
	'++'           shift, and enter state 28
	'--'           shift, and enter state 29
	'false'        shift, and enter state 30
	'true'         shift, and enter state 31
	L_Ident        shift, and enter state 10
	L_integ        shift, and enter state 33

	Ident          goto state 19
	Integer        goto state 20
	Expr2          goto state 21
	Expr           goto state 194
	Expr1          goto state 23

State 192

	Lambda -> FType 'lambda' '(' Params . ')' '->' '{' Instr '}'    (rule 55)

	')'            shift, and enter state 193


State 193

	Lambda -> FType 'lambda' '(' Params ')' . '->' '{' Instr '}'    (rule 55)

	'->'           shift, and enter state 214


State 194

	Expr2 -> Ident 'has' 'key' '[' Expr . ']'           (rule 28)
	Expr -> Expr . '+' Expr1                            (rule 29)
	Expr -> Expr . '-' Expr1                            (rule 30)
	Expr -> Expr . 'or' Expr1                           (rule 32)
	Expr -> Expr . 'and' Expr1                          (rule 33)
	Expr -> Expr . 'xor' Expr1                          (rule 34)

	'+'            shift, and enter state 69
	'-'            shift, and enter state 70
	']'            shift, and enter state 213
	'and'          shift, and enter state 71
	'or'           shift, and enter state 72
	'xor'          shift, and enter state 73


State 195

	Expr2 -> Ident 'get' '[' Expr ']' .                 (rule 23)

	'!='           reduce using rule 23
	'%'            reduce using rule 23
	')'            reduce using rule 23
	'*'            reduce using rule 23
	'+'            reduce using rule 23
	','            reduce using rule 23
	'-'            reduce using rule 23
	'/'            reduce using rule 23
	';'            reduce using rule 23
	'<'            reduce using rule 23
	'<='           reduce using rule 23
	'=='           reduce using rule 23
	'>'            reduce using rule 23
	'>='           reduce using rule 23
	']'            reduce using rule 23
	'and'          reduce using rule 23
	'or'           reduce using rule 23
	'to'           reduce using rule 23
	'xor'          reduce using rule 23
	'}'            reduce using rule 23
	%eof           reduce using rule 23


State 196

	Def1 -> FType Ident '(' Params ')' . '{' Instr '}'    (rule 71)

	'{'            shift, and enter state 212


State 197

	Expr -> Expr . '+' Expr1                            (rule 29)
	Expr -> Expr . '-' Expr1                            (rule 30)
	Expr -> Expr . 'or' Expr1                           (rule 32)
	Expr -> Expr . 'and' Expr1                          (rule 33)
	Expr -> Expr . 'xor' Expr1                          (rule 34)
	Def1 -> 'Array' SType Ident '[' Expr . ']' '(' Expr ')'    (rule 72)
	Def1 -> 'Array' SType Ident '[' Expr . ']'          (rule 73)

	'+'            shift, and enter state 69
	'-'            shift, and enter state 70
	']'            shift, and enter state 211
	'and'          shift, and enter state 71
	'or'           shift, and enter state 72
	'xor'          shift, and enter state 73


State 198

	Stmt1 -> Ident 'set' '[' Expr ']' . 'to' '(' Expr ')'    (rule 93)

	'to'           shift, and enter state 210


State 199

	Stmt1 -> Ident '[' Expr ']' '=' . '(' Expr ')'      (rule 92)

	'('            shift, and enter state 209


State 200

	Stmt1 -> 'continue' 'outer' '(' Expr ')' .          (rule 84)

	';'            reduce using rule 84
	'}'            reduce using rule 84
	%eof           reduce using rule 84


State 201

	Expr -> Expr . '+' Expr1                            (rule 29)
	Expr -> Expr . '-' Expr1                            (rule 30)
	Expr -> Expr . 'or' Expr1                           (rule 32)
	Expr -> Expr . 'and' Expr1                          (rule 33)
	Expr -> Expr . 'xor' Expr1                          (rule 34)
	Stmt1 -> 'for' '(' Ident '=' Expr . 'to' Expr ')' '{' Instr '}'    (rule 78)

	'+'            shift, and enter state 69
	'-'            shift, and enter state 70
	'and'          shift, and enter state 71
	'or'           shift, and enter state 72
	'to'           shift, and enter state 208
	'xor'          shift, and enter state 73


State 202

	Stmt1 -> 'if' '(' Expr ')' '{' . Instr '}' 'else' '{' Instr '}'    (rule 75)
	Stmt1 -> 'if' '(' Expr ')' '{' . Instr '}'          (rule 76)

	'Array'        shift, and enter state 42
	'Bool'         shift, and enter state 15
	'BoolFunc'     shift, and enter state 12
	'Dict'         shift, and enter state 43
	'Int'          shift, and enter state 16
	'IntFunc'      shift, and enter state 13
	'break'        shift, and enter state 47
	'continue'     shift, and enter state 48
	'debug'        shift, and enter state 61
	'for'          shift, and enter state 49
	'if'           shift, and enter state 50
	'print'        shift, and enter state 51
	'return'       shift, and enter state 52
	'skip'         shift, and enter state 53
	'swap'         shift, and enter state 62
	'while'        shift, and enter state 54
	L_Ident        shift, and enter state 10

	Ident          goto state 44
	SType          goto state 38
	FType          goto state 39
	Instr          goto state 207
	Instr1         goto state 57
	Def            goto state 58
	SpecStmt       goto state 59
	Def1           goto state 41
	Stmt1          goto state 45
	Stmt           goto state 60

State 203

	Stmt1 -> 'while' '(' Expr ')' '{' . Instr '}'       (rule 77)

	'Array'        shift, and enter state 42
	'Bool'         shift, and enter state 15
	'BoolFunc'     shift, and enter state 12
	'Dict'         shift, and enter state 43
	'Int'          shift, and enter state 16
	'IntFunc'      shift, and enter state 13
	'break'        shift, and enter state 47
	'continue'     shift, and enter state 48
	'debug'        shift, and enter state 61
	'for'          shift, and enter state 49
	'if'           shift, and enter state 50
	'print'        shift, and enter state 51
	'return'       shift, and enter state 52
	'skip'         shift, and enter state 53
	'swap'         shift, and enter state 62
	'while'        shift, and enter state 54
	L_Ident        shift, and enter state 10

	Ident          goto state 44
	SType          goto state 38
	FType          goto state 39
	Instr          goto state 206
	Instr1         goto state 57
	Def            goto state 58
	SpecStmt       goto state 59
	Def1           goto state 41
	Stmt1          goto state 45
	Stmt           goto state 60

State 204

	SpecStmt -> 'swap' '(' Ident ',' Ident . ')'        (rule 65)

	')'            shift, and enter state 205


State 205

	SpecStmt -> 'swap' '(' Ident ',' Ident ')' .        (rule 65)

	';'            reduce using rule 65


State 206

	Stmt1 -> 'while' '(' Expr ')' '{' Instr . '}'       (rule 77)

	'}'            shift, and enter state 222


State 207

	Stmt1 -> 'if' '(' Expr ')' '{' Instr . '}' 'else' '{' Instr '}'    (rule 75)
	Stmt1 -> 'if' '(' Expr ')' '{' Instr . '}'          (rule 76)

	'}'            shift, and enter state 221


State 208

	Stmt1 -> 'for' '(' Ident '=' Expr 'to' . Expr ')' '{' Instr '}'    (rule 78)

	'!'            shift, and enter state 26
	'('            shift, and enter state 27
	'++'           shift, and enter state 28
	'--'           shift, and enter state 29
	'false'        shift, and enter state 30
	'true'         shift, and enter state 31
	L_Ident        shift, and enter state 10
	L_integ        shift, and enter state 33

	Ident          goto state 19
	Integer        goto state 20
	Expr2          goto state 21
	Expr           goto state 220
	Expr1          goto state 23

State 209

	Stmt1 -> Ident '[' Expr ']' '=' '(' . Expr ')'      (rule 92)

	'!'            shift, and enter state 26
	'('            shift, and enter state 27
	'++'           shift, and enter state 28
	'--'           shift, and enter state 29
	'false'        shift, and enter state 30
	'true'         shift, and enter state 31
	L_Ident        shift, and enter state 10
	L_integ        shift, and enter state 33

	Ident          goto state 19
	Integer        goto state 20
	Expr2          goto state 21
	Expr           goto state 219
	Expr1          goto state 23

State 210

	Stmt1 -> Ident 'set' '[' Expr ']' 'to' . '(' Expr ')'    (rule 93)

	'('            shift, and enter state 218


State 211

	Def1 -> 'Array' SType Ident '[' Expr ']' . '(' Expr ')'    (rule 72)
	Def1 -> 'Array' SType Ident '[' Expr ']' .          (rule 73)

	'('            shift, and enter state 217
	';'            reduce using rule 73
	%eof           reduce using rule 73


State 212

	Def1 -> FType Ident '(' Params ')' '{' . Instr '}'    (rule 71)

	'Array'        shift, and enter state 42
	'Bool'         shift, and enter state 15
	'BoolFunc'     shift, and enter state 12
	'Dict'         shift, and enter state 43
	'Int'          shift, and enter state 16
	'IntFunc'      shift, and enter state 13
	'break'        shift, and enter state 47
	'continue'     shift, and enter state 48
	'debug'        shift, and enter state 61
	'for'          shift, and enter state 49
	'if'           shift, and enter state 50
	'print'        shift, and enter state 51
	'return'       shift, and enter state 52
	'skip'         shift, and enter state 53
	'swap'         shift, and enter state 62
	'while'        shift, and enter state 54
	L_Ident        shift, and enter state 10

	Ident          goto state 44
	SType          goto state 38
	FType          goto state 39
	Instr          goto state 216
	Instr1         goto state 57
	Def            goto state 58
	SpecStmt       goto state 59
	Def1           goto state 41
	Stmt1          goto state 45
	Stmt           goto state 60

State 213

	Expr2 -> Ident 'has' 'key' '[' Expr ']' .           (rule 28)

	'!='           reduce using rule 28
	'%'            reduce using rule 28
	')'            reduce using rule 28
	'*'            reduce using rule 28
	'+'            reduce using rule 28
	','            reduce using rule 28
	'-'            reduce using rule 28
	'/'            reduce using rule 28
	';'            reduce using rule 28
	'<'            reduce using rule 28
	'<='           reduce using rule 28
	'=='           reduce using rule 28
	'>'            reduce using rule 28
	'>='           reduce using rule 28
	']'            reduce using rule 28
	'and'          reduce using rule 28
	'or'           reduce using rule 28
	'to'           reduce using rule 28
	'xor'          reduce using rule 28
	'}'            reduce using rule 28
	%eof           reduce using rule 28


State 214

	Lambda -> FType 'lambda' '(' Params ')' '->' . '{' Instr '}'    (rule 55)

	'{'            shift, and enter state 215


State 215

	Lambda -> FType 'lambda' '(' Params ')' '->' '{' . Instr '}'    (rule 55)

	'Array'        shift, and enter state 42
	'Bool'         shift, and enter state 15
	'BoolFunc'     shift, and enter state 12
	'Dict'         shift, and enter state 43
	'Int'          shift, and enter state 16
	'IntFunc'      shift, and enter state 13
	'break'        shift, and enter state 47
	'continue'     shift, and enter state 48
	'debug'        shift, and enter state 61
	'for'          shift, and enter state 49
	'if'           shift, and enter state 50
	'print'        shift, and enter state 51
	'return'       shift, and enter state 52
	'skip'         shift, and enter state 53
	'swap'         shift, and enter state 62
	'while'        shift, and enter state 54
	L_Ident        shift, and enter state 10

	Ident          goto state 44
	SType          goto state 38
	FType          goto state 39
	Instr          goto state 229
	Instr1         goto state 57
	Def            goto state 58
	SpecStmt       goto state 59
	Def1           goto state 41
	Stmt1          goto state 45
	Stmt           goto state 60

State 216

	Def1 -> FType Ident '(' Params ')' '{' Instr . '}'    (rule 71)

	'}'            shift, and enter state 228


State 217

	Def1 -> 'Array' SType Ident '[' Expr ']' '(' . Expr ')'    (rule 72)

	'!'            shift, and enter state 26
	'('            shift, and enter state 27
	'++'           shift, and enter state 28
	'--'           shift, and enter state 29
	'false'        shift, and enter state 30
	'true'         shift, and enter state 31
	L_Ident        shift, and enter state 10
	L_integ        shift, and enter state 33

	Ident          goto state 19
	Integer        goto state 20
	Expr2          goto state 21
	Expr           goto state 227
	Expr1          goto state 23

State 218

	Stmt1 -> Ident 'set' '[' Expr ']' 'to' '(' . Expr ')'    (rule 93)

	'!'            shift, and enter state 26
	'('            shift, and enter state 27
	'++'           shift, and enter state 28
	'--'           shift, and enter state 29
	'false'        shift, and enter state 30
	'true'         shift, and enter state 31
	L_Ident        shift, and enter state 10
	L_integ        shift, and enter state 33

	Ident          goto state 19
	Integer        goto state 20
	Expr2          goto state 21
	Expr           goto state 226
	Expr1          goto state 23

State 219

	Expr -> Expr . '+' Expr1                            (rule 29)
	Expr -> Expr . '-' Expr1                            (rule 30)
	Expr -> Expr . 'or' Expr1                           (rule 32)
	Expr -> Expr . 'and' Expr1                          (rule 33)
	Expr -> Expr . 'xor' Expr1                          (rule 34)
	Stmt1 -> Ident '[' Expr ']' '=' '(' Expr . ')'      (rule 92)

	')'            shift, and enter state 225
	'+'            shift, and enter state 69
	'-'            shift, and enter state 70
	'and'          shift, and enter state 71
	'or'           shift, and enter state 72
	'xor'          shift, and enter state 73


State 220

	Expr -> Expr . '+' Expr1                            (rule 29)
	Expr -> Expr . '-' Expr1                            (rule 30)
	Expr -> Expr . 'or' Expr1                           (rule 32)
	Expr -> Expr . 'and' Expr1                          (rule 33)
	Expr -> Expr . 'xor' Expr1                          (rule 34)
	Stmt1 -> 'for' '(' Ident '=' Expr 'to' Expr . ')' '{' Instr '}'    (rule 78)

	')'            shift, and enter state 224
	'+'            shift, and enter state 69
	'-'            shift, and enter state 70
	'and'          shift, and enter state 71
	'or'           shift, and enter state 72
	'xor'          shift, and enter state 73


State 221

	Stmt1 -> 'if' '(' Expr ')' '{' Instr '}' . 'else' '{' Instr '}'    (rule 75)
	Stmt1 -> 'if' '(' Expr ')' '{' Instr '}' .          (rule 76)

	';'            reduce using rule 76
	'else'         shift, and enter state 223
	'}'            reduce using rule 76
	%eof           reduce using rule 76


State 222

	Stmt1 -> 'while' '(' Expr ')' '{' Instr '}' .       (rule 77)

	';'            reduce using rule 77
	'}'            reduce using rule 77
	%eof           reduce using rule 77


State 223

	Stmt1 -> 'if' '(' Expr ')' '{' Instr '}' 'else' . '{' Instr '}'    (rule 75)

	'{'            shift, and enter state 234


State 224

	Stmt1 -> 'for' '(' Ident '=' Expr 'to' Expr ')' . '{' Instr '}'    (rule 78)

	'{'            shift, and enter state 233


State 225

	Stmt1 -> Ident '[' Expr ']' '=' '(' Expr ')' .      (rule 92)

	';'            reduce using rule 92
	'}'            reduce using rule 92
	%eof           reduce using rule 92


State 226

	Expr -> Expr . '+' Expr1                            (rule 29)
	Expr -> Expr . '-' Expr1                            (rule 30)
	Expr -> Expr . 'or' Expr1                           (rule 32)
	Expr -> Expr . 'and' Expr1                          (rule 33)
	Expr -> Expr . 'xor' Expr1                          (rule 34)
	Stmt1 -> Ident 'set' '[' Expr ']' 'to' '(' Expr . ')'    (rule 93)

	')'            shift, and enter state 232
	'+'            shift, and enter state 69
	'-'            shift, and enter state 70
	'and'          shift, and enter state 71
	'or'           shift, and enter state 72
	'xor'          shift, and enter state 73


State 227

	Expr -> Expr . '+' Expr1                            (rule 29)
	Expr -> Expr . '-' Expr1                            (rule 30)
	Expr -> Expr . 'or' Expr1                           (rule 32)
	Expr -> Expr . 'and' Expr1                          (rule 33)
	Expr -> Expr . 'xor' Expr1                          (rule 34)
	Def1 -> 'Array' SType Ident '[' Expr ']' '(' Expr . ')'    (rule 72)

	')'            shift, and enter state 231
	'+'            shift, and enter state 69
	'-'            shift, and enter state 70
	'and'          shift, and enter state 71
	'or'           shift, and enter state 72
	'xor'          shift, and enter state 73


State 228

	Def1 -> FType Ident '(' Params ')' '{' Instr '}' .    (rule 71)

	';'            reduce using rule 71
	%eof           reduce using rule 71


State 229

	Lambda -> FType 'lambda' '(' Params ')' '->' '{' Instr . '}'    (rule 55)

	'}'            shift, and enter state 230


State 230

	Lambda -> FType 'lambda' '(' Params ')' '->' '{' Instr '}' .    (rule 55)

	')'            reduce using rule 55
	','            reduce using rule 55
	%eof           reduce using rule 55


State 231

	Def1 -> 'Array' SType Ident '[' Expr ']' '(' Expr ')' .    (rule 72)

	';'            reduce using rule 72
	%eof           reduce using rule 72


State 232

	Stmt1 -> Ident 'set' '[' Expr ']' 'to' '(' Expr ')' .    (rule 93)

	';'            reduce using rule 93
	'}'            reduce using rule 93
	%eof           reduce using rule 93


State 233

	Stmt1 -> 'for' '(' Ident '=' Expr 'to' Expr ')' '{' . Instr '}'    (rule 78)

	'Array'        shift, and enter state 42
	'Bool'         shift, and enter state 15
	'BoolFunc'     shift, and enter state 12
	'Dict'         shift, and enter state 43
	'Int'          shift, and enter state 16
	'IntFunc'      shift, and enter state 13
	'break'        shift, and enter state 47
	'continue'     shift, and enter state 48
	'debug'        shift, and enter state 61
	'for'          shift, and enter state 49
	'if'           shift, and enter state 50
	'print'        shift, and enter state 51
	'return'       shift, and enter state 52
	'skip'         shift, and enter state 53
	'swap'         shift, and enter state 62
	'while'        shift, and enter state 54
	L_Ident        shift, and enter state 10

	Ident          goto state 44
	SType          goto state 38
	FType          goto state 39
	Instr          goto state 236
	Instr1         goto state 57
	Def            goto state 58
	SpecStmt       goto state 59
	Def1           goto state 41
	Stmt1          goto state 45
	Stmt           goto state 60

State 234

	Stmt1 -> 'if' '(' Expr ')' '{' Instr '}' 'else' '{' . Instr '}'    (rule 75)

	'Array'        shift, and enter state 42
	'Bool'         shift, and enter state 15
	'BoolFunc'     shift, and enter state 12
	'Dict'         shift, and enter state 43
	'Int'          shift, and enter state 16
	'IntFunc'      shift, and enter state 13
	'break'        shift, and enter state 47
	'continue'     shift, and enter state 48
	'debug'        shift, and enter state 61
	'for'          shift, and enter state 49
	'if'           shift, and enter state 50
	'print'        shift, and enter state 51
	'return'       shift, and enter state 52
	'skip'         shift, and enter state 53
	'swap'         shift, and enter state 62
	'while'        shift, and enter state 54
	L_Ident        shift, and enter state 10

	Ident          goto state 44
	SType          goto state 38
	FType          goto state 39
	Instr          goto state 235
	Instr1         goto state 57
	Def            goto state 58
	SpecStmt       goto state 59
	Def1           goto state 41
	Stmt1          goto state 45
	Stmt           goto state 60

State 235

	Stmt1 -> 'if' '(' Expr ')' '{' Instr '}' 'else' '{' Instr . '}'    (rule 75)

	'}'            shift, and enter state 238


State 236

	Stmt1 -> 'for' '(' Ident '=' Expr 'to' Expr ')' '{' Instr . '}'    (rule 78)

	'}'            shift, and enter state 237


State 237

	Stmt1 -> 'for' '(' Ident '=' Expr 'to' Expr ')' '{' Instr '}' .    (rule 78)

	';'            reduce using rule 78
	'}'            reduce using rule 78
	%eof           reduce using rule 78


State 238

	Stmt1 -> 'if' '(' Expr ')' '{' Instr '}' 'else' '{' Instr '}' .    (rule 75)

	';'            reduce using rule 75
	'}'            reduce using rule 75
	%eof           reduce using rule 75


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 95
Number of terminals: 66
Number of non-terminals: 26
Number of states: 239
