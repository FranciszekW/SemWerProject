-- File generated by the BNF Converter (bnfc 2.9.5).

{-# LANGUAGE GeneralizedNewtypeDeriving #-}

-- | The abstract syntax of language grammar.

module Grammar.Abs where

import Prelude (Integer, String)
import qualified Prelude as C (Eq, Ord, Show, Read)
import qualified Data.String

data Type = TInt | TBool
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data FType = FTInt | FTBool
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data VarIdent = Var Ident
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data ArrIdent = Arr Ident
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data DictIdent = Dict Ident
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data FuncIdent = Func Ident
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Expr = IE IExpr | BE BExpr
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data IExpr
    = EPlus IExpr IExpr
    | EMinus IExpr IExpr
    | EDiv IExpr IExpr
    | EMul IExpr IExpr
    | EMod IExpr IExpr
    | ENum Integer
    | EVar VarIdent
    | EPostInc VarIdent
    | EPreInc VarIdent
    | EPostDec VarIdent
    | EPreDec VarIdent
    | EArray ArrIdent IExpr
    | EDict DictIdent IExpr
    | EDictB DictIdent BExpr
    | EFuncVal FuncIdent Args
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data BExpr
    = BTrue
    | BFalse
    | BVar VarIdent
    | BEq IExpr IExpr
    | BLeq IExpr IExpr
    | BGeq IExpr IExpr
    | BLt IExpr IExpr
    | BGt IExpr IExpr
    | BNeq IExpr IExpr
    | BEqB BExpr BExpr
    | BNeqB BExpr BExpr
    | BNot BExpr
    | BOr BExpr BExpr
    | BAnd BExpr BExpr
    | BXor BExpr BExpr
    | BArray ArrIdent IExpr
    | BDict DictIdent IExpr
    | BDictB DictIdent BExpr
    | BDictHasKey DictIdent IExpr
    | BDictHasKeyB DictIdent BExpr
    | BFuncVal FuncIdent Args
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Args = ArgsNone | ArgsOne Expr | ArgsMany Expr Args
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Lambda = Lam FType Params Instr
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Params
    = ParamsNone
    | ParamVar VarIdent Type
    | ParamFunc FuncIdent FType
    | ParamLambda Lambda
    | ParamVarMany VarIdent Type Params
    | ParamFuncMany FuncIdent FType Params
    | ParamLambdaMany Lambda Params
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Instr
    = ISkip
    | ISeq Instr Instr
    | IIf BExpr Instr Instr
    | IWhile BExpr Instr
    | IFor VarIdent IExpr IExpr Instr
    | IReturn IExpr
    | IPrint IExpr
    | ISwap VarIdent VarIdent
    | IBreak IExpr
    | IBreak1
    | IContinue IExpr
    | IContinue0
    | VarDef Type VarIdent Expr
    | ArrDefInit Type ArrIdent IExpr Expr
    | ArrDef Type ArrIdent IExpr
    | ArrElSet ArrIdent IExpr IExpr
    | DictDef Type DictIdent
    | DictElSet DictIdent IExpr IExpr
    | FuncDef FType FuncIdent Params Instr
    | VarAssign VarIdent IExpr
    | VarAssignPlus VarIdent IExpr
    | VarAssignMinus VarIdent IExpr
    | VarAssignMul VarIdent IExpr
    | VarAssignDiv VarIdent IExpr
    | VarAssignMod VarIdent IExpr
    | DebugAssEnable VarIdent
    | DebugAssDisable VarIdent
    | DebugReadEnable VarIdent
    | DebugReadDisable VarIdent
  deriving (C.Eq, C.Ord, C.Show, C.Read)

iif1 :: BExpr -> Instr -> Instr -> Instr
iif1 = \ b1 i1 i2 -> IIf b1 i1 i2

iif2 :: BExpr -> Instr -> Instr
iif2 = \ b1 i1 -> IIf b1 i1 ISkip

newtype Ident = Ident String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

