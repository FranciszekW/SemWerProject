Int i = 0;
while (i < 10) {
    print(i);
    Int j = i + 1;
    swap(i, j);
    skip;
};
//
IntFunc f(IntFunc g, IntFunc h, Int z) {
    return (g(h(z)))
};
Int y = f(IntFunc lambda(Int x) -> { return (x * x) }, IntFunc lambda(Int x) -> { return (x + 1) }, 5);
print(y)

IntFunc fibonacci(Int n) {
    if (n <= 1) {
        return (n)
    } else {
        return (fibonacci(n - 1) + fibonacci(n - 2))
    }
};
Int n = 20;
Int result = fibonacci(n);
print(result)

IntFunc silnia(Int n) {
    if (n <= 1) {
        return (1)
    } else {
        return (n * silnia(n-1))
    }
};
print(silnia(30))

for (i = 0 to 9) {
    print(i * 10);
    for (j = 1 to 9) {
        if (i == 5 and j == 5) {
            continue
        };
        print(j)
    }
}

/* Funkcja obliczająca i wypisująca drogę liczby w problemie 3n + 1 */
IntFunc collatz(Int n) {
    print(n); /* Wypisz początkową liczbę */

    while (n != 1) { /* Powtarzaj, aż n stanie się 1 */
        if (n % 2 == 0) {  /* Jeśli liczba jest parzysta */
            n = n / 2      /* Dziel przez 2 */
        } else {            /* Jeśli liczba jest nieparzysta */
            n = 3 * n + 1  /* Mnoż przez 3 i dodaj 1 */
        };
        print(n)  /* Wypisz kolejną liczbę w ciągu */
    };
    return (0) /* Zakończ funkcję */
};

Int c = collatz(7);
print(x)

/* Funkcja Sito Eratostenesa */
IntFunc sieve(Int n) {
    Array Int primes [n + 2] (1); /* Tablica oznaczająca liczby jako potencjalnie pierwsze */

    primes[0] = (0); /* 0 nie jest liczbą pierwszą */
    primes[1] = (0); /* 1 nie jest liczbą pierwszą */

    /* Główna pętla algorytmu Sita Eratostenesa */
    for (p = 2 to n) {
        if (primes[p] == 1) {  /* Jeśli liczba jest pierwsza */
            for (i = p * p to n) { /* Oznaczanie wielokrotności jako niepierwsze */
                if (i % p == 0) {
                    primes[i] = (0) /* Oznacz liczby jako niepierwsze */
                }
            }
        }
    };

    /* Wypisanie liczb pierwszych */
    for (i = 2 to n) {
        if (primes[i] == 1) {  /* Jeśli liczba jest pierwsza */
            print(i)          /* Wypisz liczbę */
        }
    };

    return (0) /* Koniec funkcji */
};

Int x = sieve(50);
print (x)