-- File generated by the BNF Converter (bnfc 2.9.5).

-- Templates for pattern matching on abstract syntax

{-# OPTIONS_GHC -fno-warn-unused-matches #-}

module Grammar.Skel where

import Prelude (($), Either(..), String, (++), Show, show)
import qualified Grammar.Abs

type Err = Either String
type Result = Err String

failure :: Show a => a -> Result
failure x = Left $ "Undefined case: " ++ show x

transIdent :: Grammar.Abs.Ident -> Result
transIdent x = case x of
  Grammar.Abs.Ident string -> failure x

transType :: Grammar.Abs.Type -> Result
transType x = case x of
  Grammar.Abs.TInt -> failure x
  Grammar.Abs.TBool -> failure x

transFType :: Grammar.Abs.FType -> Result
transFType x = case x of
  Grammar.Abs.FTInt -> failure x
  Grammar.Abs.FTBool -> failure x

transVarIdent :: Grammar.Abs.VarIdent -> Result
transVarIdent x = case x of
  Grammar.Abs.Var ident -> failure x

transArrIdent :: Grammar.Abs.ArrIdent -> Result
transArrIdent x = case x of
  Grammar.Abs.Arr ident -> failure x

transDictIdent :: Grammar.Abs.DictIdent -> Result
transDictIdent x = case x of
  Grammar.Abs.Dict ident -> failure x

transFuncIdent :: Grammar.Abs.FuncIdent -> Result
transFuncIdent x = case x of
  Grammar.Abs.Func ident -> failure x

transExpr :: Grammar.Abs.Expr -> Result
transExpr x = case x of
  Grammar.Abs.IE iexpr -> failure x
  Grammar.Abs.BE bexpr -> failure x

transIExpr :: Grammar.Abs.IExpr -> Result
transIExpr x = case x of
  Grammar.Abs.EPlus iexpr1 iexpr2 -> failure x
  Grammar.Abs.EMinus iexpr1 iexpr2 -> failure x
  Grammar.Abs.EDiv iexpr1 iexpr2 -> failure x
  Grammar.Abs.EMul iexpr1 iexpr2 -> failure x
  Grammar.Abs.EMod iexpr1 iexpr2 -> failure x
  Grammar.Abs.ENum integer -> failure x
  Grammar.Abs.EVar varident -> failure x
  Grammar.Abs.EPostInc varident -> failure x
  Grammar.Abs.EPreInc varident -> failure x
  Grammar.Abs.EPostDec varident -> failure x
  Grammar.Abs.EPreDec varident -> failure x
  Grammar.Abs.EArray arrident iexpr -> failure x
  Grammar.Abs.EDict dictident iexpr -> failure x
  Grammar.Abs.EDictB dictident bexpr -> failure x
  Grammar.Abs.EFuncVal funcident args -> failure x

transBExpr :: Grammar.Abs.BExpr -> Result
transBExpr x = case x of
  Grammar.Abs.BTrue -> failure x
  Grammar.Abs.BFalse -> failure x
  Grammar.Abs.BVar varident -> failure x
  Grammar.Abs.BEq iexpr1 iexpr2 -> failure x
  Grammar.Abs.BLeq iexpr1 iexpr2 -> failure x
  Grammar.Abs.BGeq iexpr1 iexpr2 -> failure x
  Grammar.Abs.BLt iexpr1 iexpr2 -> failure x
  Grammar.Abs.BGt iexpr1 iexpr2 -> failure x
  Grammar.Abs.BNeq iexpr1 iexpr2 -> failure x
  Grammar.Abs.BEqB bexpr1 bexpr2 -> failure x
  Grammar.Abs.BNeqB bexpr1 bexpr2 -> failure x
  Grammar.Abs.BNot bexpr -> failure x
  Grammar.Abs.BOr bexpr1 bexpr2 -> failure x
  Grammar.Abs.BAnd bexpr1 bexpr2 -> failure x
  Grammar.Abs.BXor bexpr1 bexpr2 -> failure x
  Grammar.Abs.BArray arrident iexpr -> failure x
  Grammar.Abs.BDict dictident iexpr -> failure x
  Grammar.Abs.BDictB dictident bexpr -> failure x
  Grammar.Abs.BDictHasKey dictident iexpr -> failure x
  Grammar.Abs.BDictHasKeyB dictident bexpr -> failure x
  Grammar.Abs.BFuncVal funcident args -> failure x

transArgs :: Grammar.Abs.Args -> Result
transArgs x = case x of
  Grammar.Abs.ArgsNone -> failure x
  Grammar.Abs.ArgsOne expr -> failure x
  Grammar.Abs.ArgsMany expr args -> failure x

transLambda :: Grammar.Abs.Lambda -> Result
transLambda x = case x of
  Grammar.Abs.Lam ftype params instr -> failure x

transParams :: Grammar.Abs.Params -> Result
transParams x = case x of
  Grammar.Abs.ParamsNone -> failure x
  Grammar.Abs.ParamVar varident type_ -> failure x
  Grammar.Abs.ParamFunc funcident ftype -> failure x
  Grammar.Abs.ParamLambda lambda -> failure x
  Grammar.Abs.ParamVarMany varident type_ params -> failure x
  Grammar.Abs.ParamFuncMany funcident ftype params -> failure x
  Grammar.Abs.ParamLambdaMany lambda params -> failure x

transInstr :: Grammar.Abs.Instr -> Result
transInstr x = case x of
  Grammar.Abs.ISkip -> failure x
  Grammar.Abs.ISeq instr1 instr2 -> failure x
  Grammar.Abs.IIf bexpr instr1 instr2 -> failure x
  Grammar.Abs.IWhile bexpr instr -> failure x
  Grammar.Abs.IFor varident iexpr1 iexpr2 instr -> failure x
  Grammar.Abs.IReturn iexpr -> failure x
  Grammar.Abs.IPrint iexpr -> failure x
  Grammar.Abs.ISwap varident1 varident2 -> failure x
  Grammar.Abs.IBreak iexpr -> failure x
  Grammar.Abs.IBreak1 -> failure x
  Grammar.Abs.IContinue iexpr -> failure x
  Grammar.Abs.IContinue0 -> failure x
  Grammar.Abs.VarDef type_ varident expr -> failure x
  Grammar.Abs.ArrDefInit type_ arrident iexpr expr -> failure x
  Grammar.Abs.ArrDef type_ arrident iexpr -> failure x
  Grammar.Abs.ArrElSet arrident iexpr1 iexpr2 -> failure x
  Grammar.Abs.DictDef type_ dictident -> failure x
  Grammar.Abs.DictElSet dictident iexpr1 iexpr2 -> failure x
  Grammar.Abs.FuncDef ftype funcident params instr -> failure x
  Grammar.Abs.VarAssign varident iexpr -> failure x
  Grammar.Abs.VarAssignPlus varident iexpr -> failure x
  Grammar.Abs.VarAssignMinus varident iexpr -> failure x
  Grammar.Abs.VarAssignMul varident iexpr -> failure x
  Grammar.Abs.VarAssignDiv varident iexpr -> failure x
  Grammar.Abs.VarAssignMod varident iexpr -> failure x
  Grammar.Abs.DebugAssEnable varident -> failure x
  Grammar.Abs.DebugAssDisable varident -> failure x
  Grammar.Abs.DebugReadEnable varident -> failure x
  Grammar.Abs.DebugReadDisable varident -> failure x
