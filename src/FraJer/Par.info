-----------------------------------------------------------------------------
Info file generated by Happy Version 1.20.0 from FraJer/Par.y
-----------------------------------------------------------------------------

state 19 contains 1 reduce/reduce conflicts.
state 44 contains 1 reduce/reduce conflicts.
state 52 contains 1 reduce/reduce conflicts.
state 54 contains 8 reduce/reduce conflicts.
state 122 contains 5 reduce/reduce conflicts.
state 198 contains 5 reduce/reduce conflicts.
state 199 contains 5 reduce/reduce conflicts.
state 200 contains 5 reduce/reduce conflicts.
state 201 contains 5 shift/reduce conflicts.
state 202 contains 5 shift/reduce conflicts.
state 216 contains 8 reduce/reduce conflicts.
state 217 contains 8 reduce/reduce conflicts.
state 218 contains 8 reduce/reduce conflicts.
state 220 contains 8 reduce/reduce conflicts.

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_pType -> Type                               (0)
	%start_pFType -> FType                             (1)
	%start_pVarIdent -> VarIdent                       (2)
	%start_pArrIdent -> ArrIdent                       (3)
	%start_pDictIdent -> DictIdent                     (4)
	%start_pFuncIdent -> FuncIdent                     (5)
	%start_pExpr -> Expr                               (6)
	%start_pIExpr -> IExpr                             (7)
	%start_pIExpr1 -> IExpr1                           (8)
	%start_pIExpr2 -> IExpr2                           (9)
	%start_pBExpr1 -> BExpr1                           (10)
	%start_pBExpr -> BExpr                             (11)
	%start_pArgs -> Args                               (12)
	%start_pLambda -> Lambda                           (13)
	%start_pParams -> Params                           (14)
	%start_pInstr1 -> Instr1                           (15)
	%start_pInstr -> Instr                             (16)
	Ident -> L_Ident                                   (17)
	Integer -> L_integ                                 (18)
	Type -> 'Int'                                      (19)
	Type -> 'Bool'                                     (20)
	FType -> 'IntFunc'                                 (21)
	FType -> 'BoolFunc'                                (22)
	VarIdent -> Ident                                  (23)
	ArrIdent -> Ident                                  (24)
	DictIdent -> Ident                                 (25)
	FuncIdent -> Ident                                 (26)
	Expr -> IExpr                                      (27)
	Expr -> BExpr                                      (28)
	IExpr -> IExpr '+' IExpr1                          (29)
	IExpr -> IExpr '-' IExpr1                          (30)
	IExpr -> IExpr1                                    (31)
	IExpr1 -> IExpr1 '/' IExpr2                        (32)
	IExpr1 -> IExpr1 '*' IExpr2                        (33)
	IExpr1 -> IExpr1 '%' IExpr2                        (34)
	IExpr1 -> IExpr2                                   (35)
	IExpr2 -> Integer                                  (36)
	IExpr2 -> VarIdent                                 (37)
	IExpr2 -> VarIdent '++'                            (38)
	IExpr2 -> '++' VarIdent                            (39)
	IExpr2 -> VarIdent '--'                            (40)
	IExpr2 -> '--' VarIdent                            (41)
	IExpr2 -> ArrIdent '[' IExpr ']'                   (42)
	IExpr2 -> DictIdent '[' IExpr ']'                  (43)
	IExpr2 -> DictIdent '[' BExpr ']'                  (44)
	IExpr2 -> FuncIdent '(' Args ')'                   (45)
	IExpr2 -> '(' IExpr ')'                            (46)
	BExpr1 -> 'true'                                   (47)
	BExpr1 -> 'false'                                  (48)
	BExpr1 -> VarIdent                                 (49)
	BExpr1 -> IExpr '==' IExpr                         (50)
	BExpr1 -> IExpr '<=' IExpr                         (51)
	BExpr1 -> IExpr '>=' IExpr                         (52)
	BExpr1 -> IExpr '<' IExpr                          (53)
	BExpr1 -> IExpr '>' IExpr                          (54)
	BExpr1 -> IExpr '!=' IExpr                         (55)
	BExpr1 -> BExpr '==' BExpr                         (56)
	BExpr1 -> BExpr '!=' BExpr                         (57)
	BExpr1 -> '!' BExpr1                               (58)
	BExpr1 -> BExpr 'or' BExpr1                        (59)
	BExpr1 -> BExpr 'and' BExpr1                       (60)
	BExpr1 -> BExpr 'xor' BExpr1                       (61)
	BExpr1 -> ArrIdent '[' IExpr ']'                   (62)
	BExpr1 -> DictIdent '[' IExpr ']'                  (63)
	BExpr1 -> DictIdent '[' BExpr ']'                  (64)
	BExpr1 -> DictIdent 'has' 'key' '[' IExpr ']'      (65)
	BExpr1 -> DictIdent 'has' 'key' '[' BExpr ']'      (66)
	BExpr1 -> FuncIdent '(' Args ')'                   (67)
	BExpr1 -> '(' BExpr ')'                            (68)
	BExpr -> BExpr1                                    (69)
	Args -> 'none'                                     (70)
	Args -> Expr                                       (71)
	Args -> Expr ',' Args                              (72)
	Lambda -> FType 'lambda' '(' Params ')' '->' '{' Instr '}'   (73)
	Params -> 'none'                                   (74)
	Params -> VarIdent ':' Type                        (75)
	Params -> FuncIdent ':' FType                      (76)
	Params -> Lambda                                   (77)
	Params -> VarIdent ':' Type ',' Params             (78)
	Params -> FuncIdent ':' FType ',' Params           (79)
	Params -> Lambda ',' Params                        (80)
	Instr1 -> 'skip'                                   (81)
	Instr1 -> 'if' '(' BExpr ')' '{' Instr '}' 'else' '{' Instr '}'   (82)
	Instr1 -> 'if' '(' BExpr ')' '{' Instr '}'         (83)
	Instr1 -> 'while' '(' BExpr ')' '{' Instr '}'      (84)
	Instr1 -> 'for' '(' VarIdent '=' IExpr 'to' IExpr ')' '{' Instr '}'   (85)
	Instr1 -> 'return' '(' IExpr ')'                   (86)
	Instr1 -> 'print' '(' IExpr ')'                    (87)
	Instr1 -> 'swap' '(' VarIdent ',' VarIdent ')'     (88)
	Instr1 -> 'break' '(' IExpr ')'                    (89)
	Instr1 -> 'break'                                  (90)
	Instr1 -> 'continue' 'outer' '(' IExpr ')'         (91)
	Instr1 -> 'continue'                               (92)
	Instr1 -> Type VarIdent '=' Expr                   (93)
	Instr1 -> 'Array' Type ArrIdent '[' IExpr ']' '(' Expr ')'   (94)
	Instr1 -> 'Array' Type ArrIdent '[' IExpr ']'      (95)
	Instr1 -> ArrIdent '[' IExpr ']' '=' '(' IExpr ')'   (96)
	Instr1 -> 'Dict' Type DictIdent                    (97)
	Instr1 -> DictIdent '[' IExpr ']' 'set' '(' IExpr ')'   (98)
	Instr1 -> FType FuncIdent '(' Params ')' '{' Instr '}'   (99)
	Instr1 -> VarIdent '=' IExpr                       (100)
	Instr1 -> VarIdent '+=' IExpr                      (101)
	Instr1 -> VarIdent '-=' IExpr                      (102)
	Instr1 -> VarIdent '*=' IExpr                      (103)
	Instr1 -> VarIdent '/=' IExpr                      (104)
	Instr1 -> VarIdent '%=' IExpr                      (105)
	Instr1 -> 'debug' 'assignment' 'enable' VarIdent   (106)
	Instr1 -> 'debug' 'assignment' 'disable' VarIdent   (107)
	Instr1 -> 'debug' 'reading' 'enable' VarIdent      (108)
	Instr1 -> 'debug' 'reading' 'disable' VarIdent     (109)
	Instr -> Instr1 ';' Instr                          (110)
	Instr -> Instr1                                    (111)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	'!'            { PT _ (TS _ 1) }
	'!='           { PT _ (TS _ 2) }
	'%'            { PT _ (TS _ 3) }
	'%='           { PT _ (TS _ 4) }
	'('            { PT _ (TS _ 5) }
	')'            { PT _ (TS _ 6) }
	'*'            { PT _ (TS _ 7) }
	'*='           { PT _ (TS _ 8) }
	'+'            { PT _ (TS _ 9) }
	'++'           { PT _ (TS _ 10) }
	'+='           { PT _ (TS _ 11) }
	','            { PT _ (TS _ 12) }
	'-'            { PT _ (TS _ 13) }
	'--'           { PT _ (TS _ 14) }
	'-='           { PT _ (TS _ 15) }
	'->'           { PT _ (TS _ 16) }
	'/'            { PT _ (TS _ 17) }
	'/='           { PT _ (TS _ 18) }
	':'            { PT _ (TS _ 19) }
	';'            { PT _ (TS _ 20) }
	'<'            { PT _ (TS _ 21) }
	'<='           { PT _ (TS _ 22) }
	'='            { PT _ (TS _ 23) }
	'=='           { PT _ (TS _ 24) }
	'>'            { PT _ (TS _ 25) }
	'>='           { PT _ (TS _ 26) }
	'Array'        { PT _ (TS _ 27) }
	'Bool'         { PT _ (TS _ 28) }
	'BoolFunc'     { PT _ (TS _ 29) }
	'Dict'         { PT _ (TS _ 30) }
	'Int'          { PT _ (TS _ 31) }
	'IntFunc'      { PT _ (TS _ 32) }
	'['            { PT _ (TS _ 33) }
	']'            { PT _ (TS _ 34) }
	'and'          { PT _ (TS _ 35) }
	'assignment'   { PT _ (TS _ 36) }
	'break'        { PT _ (TS _ 37) }
	'continue'     { PT _ (TS _ 38) }
	'debug'        { PT _ (TS _ 39) }
	'disable'      { PT _ (TS _ 40) }
	'else'         { PT _ (TS _ 41) }
	'enable'       { PT _ (TS _ 42) }
	'false'        { PT _ (TS _ 43) }
	'for'          { PT _ (TS _ 44) }
	'has'          { PT _ (TS _ 45) }
	'if'           { PT _ (TS _ 46) }
	'key'          { PT _ (TS _ 47) }
	'lambda'       { PT _ (TS _ 48) }
	'none'         { PT _ (TS _ 49) }
	'or'           { PT _ (TS _ 50) }
	'outer'        { PT _ (TS _ 51) }
	'print'        { PT _ (TS _ 52) }
	'reading'      { PT _ (TS _ 53) }
	'return'       { PT _ (TS _ 54) }
	'set'          { PT _ (TS _ 55) }
	'skip'         { PT _ (TS _ 56) }
	'swap'         { PT _ (TS _ 57) }
	'to'           { PT _ (TS _ 58) }
	'true'         { PT _ (TS _ 59) }
	'while'        { PT _ (TS _ 60) }
	'xor'          { PT _ (TS _ 61) }
	'{'            { PT _ (TS _ 62) }
	'}'            { PT _ (TS _ 63) }
	L_Ident        { PT _ (TV $$) }
	L_integ        { PT _ (TI $$) }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_pType    rule  0
	%start_pFType   rule  1
	%start_pVarIdent rule  2
	%start_pArrIdent rule  3
	%start_pDictIdent rule  4
	%start_pFuncIdent rule  5
	%start_pExpr    rule  6
	%start_pIExpr   rule  7
	%start_pIExpr1  rule  8
	%start_pIExpr2  rule  9
	%start_pBExpr1  rule  10
	%start_pBExpr   rule  11
	%start_pArgs    rule  12
	%start_pLambda  rule  13
	%start_pParams  rule  14
	%start_pInstr1  rule  15
	%start_pInstr   rule  16
	Ident           rule  17
	Integer         rule  18
	Type            rules 19, 20
	FType           rules 21, 22
	VarIdent        rule  23
	ArrIdent        rule  24
	DictIdent       rule  25
	FuncIdent       rule  26
	Expr            rules 27, 28
	IExpr           rules 29, 30, 31
	IExpr1          rules 32, 33, 34, 35
	IExpr2          rules 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46
	BExpr1          rules 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68
	BExpr           rule  69
	Args            rules 70, 71, 72
	Lambda          rule  73
	Params          rules 74, 75, 76, 77, 78, 79, 80
	Instr1          rules 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109
	Instr           rules 110, 111

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0

	%start_pType -> . Type                              (rule 0)

	'Bool'         shift, and enter state 28
	'Int'          shift, and enter state 31

	Type           goto state 95

State 1

	%start_pFType -> . FType                            (rule 1)

	'BoolFunc'     shift, and enter state 29
	'IntFunc'      shift, and enter state 32

	FType          goto state 94

State 2

	%start_pVarIdent -> . VarIdent                      (rule 2)

	L_Ident        shift, and enter state 18

	Ident          goto state 92
	VarIdent       goto state 93

State 3

	%start_pArrIdent -> . ArrIdent                      (rule 3)

	L_Ident        shift, and enter state 18

	Ident          goto state 90
	ArrIdent       goto state 91

State 4

	%start_pDictIdent -> . DictIdent                    (rule 4)

	L_Ident        shift, and enter state 18

	Ident          goto state 88
	DictIdent      goto state 89

State 5

	%start_pFuncIdent -> . FuncIdent                    (rule 5)

	L_Ident        shift, and enter state 18

	Ident          goto state 86
	FuncIdent      goto state 87

State 6

	%start_pExpr -> . Expr                              (rule 6)

	'!'            shift, and enter state 65
	'('            shift, and enter state 66
	'++'           shift, and enter state 67
	'--'           shift, and enter state 68
	'false'        shift, and enter state 69
	'true'         shift, and enter state 71
	L_Ident        shift, and enter state 18
	L_integ        shift, and enter state 72

	Ident          goto state 52
	Integer        goto state 53
	VarIdent       goto state 54
	ArrIdent       goto state 55
	DictIdent      goto state 56
	FuncIdent      goto state 57
	Expr           goto state 85
	IExpr          goto state 59
	IExpr1         goto state 60
	IExpr2         goto state 61
	BExpr1         goto state 62
	BExpr          goto state 63

State 7

	%start_pIExpr -> . IExpr                            (rule 7)

	'('            shift, and enter state 82
	'++'           shift, and enter state 67
	'--'           shift, and enter state 68
	L_Ident        shift, and enter state 18
	L_integ        shift, and enter state 72

	Ident          goto state 52
	Integer        goto state 53
	VarIdent       goto state 77
	ArrIdent       goto state 78
	DictIdent      goto state 79
	FuncIdent      goto state 80
	IExpr          goto state 84
	IExpr1         goto state 60
	IExpr2         goto state 61

State 8

	%start_pIExpr1 -> . IExpr1                          (rule 8)

	'('            shift, and enter state 82
	'++'           shift, and enter state 67
	'--'           shift, and enter state 68
	L_Ident        shift, and enter state 18
	L_integ        shift, and enter state 72

	Ident          goto state 52
	Integer        goto state 53
	VarIdent       goto state 77
	ArrIdent       goto state 78
	DictIdent      goto state 79
	FuncIdent      goto state 80
	IExpr1         goto state 83
	IExpr2         goto state 61

State 9

	%start_pIExpr2 -> . IExpr2                          (rule 9)

	'('            shift, and enter state 82
	'++'           shift, and enter state 67
	'--'           shift, and enter state 68
	L_Ident        shift, and enter state 18
	L_integ        shift, and enter state 72

	Ident          goto state 52
	Integer        goto state 53
	VarIdent       goto state 77
	ArrIdent       goto state 78
	DictIdent      goto state 79
	FuncIdent      goto state 80
	IExpr2         goto state 81

State 10

	%start_pBExpr1 -> . BExpr1                          (rule 10)

	'!'            shift, and enter state 65
	'('            shift, and enter state 66
	'++'           shift, and enter state 67
	'--'           shift, and enter state 68
	'false'        shift, and enter state 69
	'true'         shift, and enter state 71
	L_Ident        shift, and enter state 18
	L_integ        shift, and enter state 72

	Ident          goto state 52
	Integer        goto state 53
	VarIdent       goto state 54
	ArrIdent       goto state 55
	DictIdent      goto state 56
	FuncIdent      goto state 57
	IExpr          goto state 73
	IExpr1         goto state 60
	IExpr2         goto state 61
	BExpr1         goto state 75
	BExpr          goto state 76

State 11

	%start_pBExpr -> . BExpr                            (rule 11)

	'!'            shift, and enter state 65
	'('            shift, and enter state 66
	'++'           shift, and enter state 67
	'--'           shift, and enter state 68
	'false'        shift, and enter state 69
	'true'         shift, and enter state 71
	L_Ident        shift, and enter state 18
	L_integ        shift, and enter state 72

	Ident          goto state 52
	Integer        goto state 53
	VarIdent       goto state 54
	ArrIdent       goto state 55
	DictIdent      goto state 56
	FuncIdent      goto state 57
	IExpr          goto state 73
	IExpr1         goto state 60
	IExpr2         goto state 61
	BExpr1         goto state 62
	BExpr          goto state 74

State 12

	%start_pArgs -> . Args                              (rule 12)

	'!'            shift, and enter state 65
	'('            shift, and enter state 66
	'++'           shift, and enter state 67
	'--'           shift, and enter state 68
	'false'        shift, and enter state 69
	'none'         shift, and enter state 70
	'true'         shift, and enter state 71
	L_Ident        shift, and enter state 18
	L_integ        shift, and enter state 72

	Ident          goto state 52
	Integer        goto state 53
	VarIdent       goto state 54
	ArrIdent       goto state 55
	DictIdent      goto state 56
	FuncIdent      goto state 57
	Expr           goto state 58
	IExpr          goto state 59
	IExpr1         goto state 60
	IExpr2         goto state 61
	BExpr1         goto state 62
	BExpr          goto state 63
	Args           goto state 64

State 13

	%start_pLambda -> . Lambda                          (rule 13)

	'BoolFunc'     shift, and enter state 29
	'IntFunc'      shift, and enter state 32

	FType          goto state 45
	Lambda         goto state 51

State 14

	%start_pParams -> . Params                          (rule 14)

	'BoolFunc'     shift, and enter state 29
	'IntFunc'      shift, and enter state 32
	'none'         shift, and enter state 50
	L_Ident        shift, and enter state 18

	Ident          goto state 44
	FType          goto state 45
	VarIdent       goto state 46
	FuncIdent      goto state 47
	Lambda         goto state 48
	Params         goto state 49

State 15

	%start_pInstr1 -> . Instr1                          (rule 15)

	'Array'        shift, and enter state 27
	'Bool'         shift, and enter state 28
	'BoolFunc'     shift, and enter state 29
	'Dict'         shift, and enter state 30
	'Int'          shift, and enter state 31
	'IntFunc'      shift, and enter state 32
	'break'        shift, and enter state 33
	'continue'     shift, and enter state 34
	'debug'        shift, and enter state 35
	'for'          shift, and enter state 36
	'if'           shift, and enter state 37
	'print'        shift, and enter state 38
	'return'       shift, and enter state 39
	'skip'         shift, and enter state 40
	'swap'         shift, and enter state 41
	'while'        shift, and enter state 42
	L_Ident        shift, and enter state 18

	Ident          goto state 19
	Type           goto state 20
	FType          goto state 21
	VarIdent       goto state 22
	ArrIdent       goto state 23
	DictIdent      goto state 24
	Instr1         goto state 43

State 16

	%start_pInstr -> . Instr                            (rule 16)

	'Array'        shift, and enter state 27
	'Bool'         shift, and enter state 28
	'BoolFunc'     shift, and enter state 29
	'Dict'         shift, and enter state 30
	'Int'          shift, and enter state 31
	'IntFunc'      shift, and enter state 32
	'break'        shift, and enter state 33
	'continue'     shift, and enter state 34
	'debug'        shift, and enter state 35
	'for'          shift, and enter state 36
	'if'           shift, and enter state 37
	'print'        shift, and enter state 38
	'return'       shift, and enter state 39
	'skip'         shift, and enter state 40
	'swap'         shift, and enter state 41
	'while'        shift, and enter state 42
	L_Ident        shift, and enter state 18

	Ident          goto state 19
	Type           goto state 20
	FType          goto state 21
	VarIdent       goto state 22
	ArrIdent       goto state 23
	DictIdent      goto state 24
	Instr1         goto state 25
	Instr          goto state 26

State 17

	Ident -> . L_Ident                                  (rule 17)

	L_Ident        shift, and enter state 18


State 18

	Ident -> L_Ident .                                  (rule 17)

	'!='           reduce using rule 17
	'%'            reduce using rule 17
	'%='           reduce using rule 17
	'('            reduce using rule 17
	')'            reduce using rule 17
	'*'            reduce using rule 17
	'*='           reduce using rule 17
	'+'            reduce using rule 17
	'++'           reduce using rule 17
	'+='           reduce using rule 17
	','            reduce using rule 17
	'-'            reduce using rule 17
	'--'           reduce using rule 17
	'-='           reduce using rule 17
	'/'            reduce using rule 17
	'/='           reduce using rule 17
	':'            reduce using rule 17
	';'            reduce using rule 17
	'<'            reduce using rule 17
	'<='           reduce using rule 17
	'='            reduce using rule 17
	'=='           reduce using rule 17
	'>'            reduce using rule 17
	'>='           reduce using rule 17
	'['            reduce using rule 17
	']'            reduce using rule 17
	'and'          reduce using rule 17
	'has'          reduce using rule 17
	'or'           reduce using rule 17
	'to'           reduce using rule 17
	'xor'          reduce using rule 17
	'}'            reduce using rule 17
	%eof           reduce using rule 17


State 19

	VarIdent -> Ident .                                 (rule 23)
	ArrIdent -> Ident .                                 (rule 24)
	DictIdent -> Ident .                                (rule 25)

	'%='           reduce using rule 23
	'*='           reduce using rule 23
	'+='           reduce using rule 23
	'-='           reduce using rule 23
	'/='           reduce using rule 23
	'='            reduce using rule 23
	'['            reduce using rule 25
			(reduce using rule 24)



State 20

	Instr1 -> Type . VarIdent '=' Expr                  (rule 93)

	L_Ident        shift, and enter state 18

	Ident          goto state 92
	VarIdent       goto state 154

State 21

	Instr1 -> FType . FuncIdent '(' Params ')' '{' Instr '}'    (rule 99)

	L_Ident        shift, and enter state 18

	Ident          goto state 86
	FuncIdent      goto state 153

State 22

	Instr1 -> VarIdent . '=' IExpr                      (rule 100)
	Instr1 -> VarIdent . '+=' IExpr                     (rule 101)
	Instr1 -> VarIdent . '-=' IExpr                     (rule 102)
	Instr1 -> VarIdent . '*=' IExpr                     (rule 103)
	Instr1 -> VarIdent . '/=' IExpr                     (rule 104)
	Instr1 -> VarIdent . '%=' IExpr                     (rule 105)

	'%='           shift, and enter state 147
	'*='           shift, and enter state 148
	'+='           shift, and enter state 149
	'-='           shift, and enter state 150
	'/='           shift, and enter state 151
	'='            shift, and enter state 152


State 23

	Instr1 -> ArrIdent . '[' IExpr ']' '=' '(' IExpr ')'    (rule 96)

	'['            shift, and enter state 146


State 24

	Instr1 -> DictIdent . '[' IExpr ']' 'set' '(' IExpr ')'    (rule 98)

	'['            shift, and enter state 145


State 25

	Instr -> Instr1 . ';' Instr                         (rule 110)
	Instr -> Instr1 .                                   (rule 111)

	';'            shift, and enter state 144
	'}'            reduce using rule 111
	%eof           reduce using rule 111


State 26

	%start_pInstr -> Instr .                            (rule 16)

	%eof           accept


State 27

	Instr1 -> 'Array' . Type ArrIdent '[' IExpr ']' '(' Expr ')'    (rule 94)
	Instr1 -> 'Array' . Type ArrIdent '[' IExpr ']'     (rule 95)

	'Bool'         shift, and enter state 28
	'Int'          shift, and enter state 31

	Type           goto state 143

State 28

	Type -> 'Bool' .                                    (rule 20)

	')'            reduce using rule 20
	','            reduce using rule 20
	L_Ident        reduce using rule 20
	%eof           reduce using rule 20


State 29

	FType -> 'BoolFunc' .                               (rule 22)

	')'            reduce using rule 22
	','            reduce using rule 22
	'lambda'       reduce using rule 22
	L_Ident        reduce using rule 22
	%eof           reduce using rule 22


State 30

	Instr1 -> 'Dict' . Type DictIdent                   (rule 97)

	'Bool'         shift, and enter state 28
	'Int'          shift, and enter state 31

	Type           goto state 142

State 31

	Type -> 'Int' .                                     (rule 19)

	')'            reduce using rule 19
	','            reduce using rule 19
	L_Ident        reduce using rule 19
	%eof           reduce using rule 19


State 32

	FType -> 'IntFunc' .                                (rule 21)

	')'            reduce using rule 21
	','            reduce using rule 21
	'lambda'       reduce using rule 21
	L_Ident        reduce using rule 21
	%eof           reduce using rule 21


State 33

	Instr1 -> 'break' . '(' IExpr ')'                   (rule 89)
	Instr1 -> 'break' .                                 (rule 90)

	'('            shift, and enter state 141
	';'            reduce using rule 90
	'}'            reduce using rule 90
	%eof           reduce using rule 90


State 34

	Instr1 -> 'continue' . 'outer' '(' IExpr ')'        (rule 91)
	Instr1 -> 'continue' .                              (rule 92)

	';'            reduce using rule 92
	'outer'        shift, and enter state 140
	'}'            reduce using rule 92
	%eof           reduce using rule 92


State 35

	Instr1 -> 'debug' . 'assignment' 'enable' VarIdent    (rule 106)
	Instr1 -> 'debug' . 'assignment' 'disable' VarIdent    (rule 107)
	Instr1 -> 'debug' . 'reading' 'enable' VarIdent     (rule 108)
	Instr1 -> 'debug' . 'reading' 'disable' VarIdent    (rule 109)

	'assignment'   shift, and enter state 138
	'reading'      shift, and enter state 139


State 36

	Instr1 -> 'for' . '(' VarIdent '=' IExpr 'to' IExpr ')' '{' Instr '}'    (rule 85)

	'('            shift, and enter state 137


State 37

	Instr1 -> 'if' . '(' BExpr ')' '{' Instr '}' 'else' '{' Instr '}'    (rule 82)
	Instr1 -> 'if' . '(' BExpr ')' '{' Instr '}'        (rule 83)

	'('            shift, and enter state 136


State 38

	Instr1 -> 'print' . '(' IExpr ')'                   (rule 87)

	'('            shift, and enter state 135


State 39

	Instr1 -> 'return' . '(' IExpr ')'                  (rule 86)

	'('            shift, and enter state 134


State 40

	Instr1 -> 'skip' .                                  (rule 81)

	';'            reduce using rule 81
	'}'            reduce using rule 81
	%eof           reduce using rule 81


State 41

	Instr1 -> 'swap' . '(' VarIdent ',' VarIdent ')'    (rule 88)

	'('            shift, and enter state 133


State 42

	Instr1 -> 'while' . '(' BExpr ')' '{' Instr '}'     (rule 84)

	'('            shift, and enter state 132


State 43

	%start_pInstr1 -> Instr1 .                          (rule 15)

	%eof           accept


State 44

	VarIdent -> Ident .                                 (rule 23)
	FuncIdent -> Ident .                                (rule 26)

	':'            reduce using rule 26
			(reduce using rule 23)



State 45

	Lambda -> FType . 'lambda' '(' Params ')' '->' '{' Instr '}'    (rule 73)

	'lambda'       shift, and enter state 131


State 46

	Params -> VarIdent . ':' Type                       (rule 75)
	Params -> VarIdent . ':' Type ',' Params            (rule 78)

	':'            shift, and enter state 130


State 47

	Params -> FuncIdent . ':' FType                     (rule 76)
	Params -> FuncIdent . ':' FType ',' Params          (rule 79)

	':'            shift, and enter state 129


State 48

	Params -> Lambda .                                  (rule 77)
	Params -> Lambda . ',' Params                       (rule 80)

	')'            reduce using rule 77
	','            shift, and enter state 128
	%eof           reduce using rule 77


State 49

	%start_pParams -> Params .                          (rule 14)

	%eof           accept


State 50

	Params -> 'none' .                                  (rule 74)

	')'            reduce using rule 74
	%eof           reduce using rule 74


State 51

	%start_pLambda -> Lambda .                          (rule 13)

	%eof           accept


State 52

	VarIdent -> Ident .                                 (rule 23)
	ArrIdent -> Ident .                                 (rule 24)
	DictIdent -> Ident .                                (rule 25)
	FuncIdent -> Ident .                                (rule 26)

	'!='           reduce using rule 23
	'%'            reduce using rule 23
	'('            reduce using rule 26
	')'            reduce using rule 23
	'*'            reduce using rule 23
	'+'            reduce using rule 23
	'++'           reduce using rule 23
	','            reduce using rule 23
	'-'            reduce using rule 23
	'--'           reduce using rule 23
	'/'            reduce using rule 23
	';'            reduce using rule 23
	'<'            reduce using rule 23
	'<='           reduce using rule 23
	'=='           reduce using rule 23
	'>'            reduce using rule 23
	'>='           reduce using rule 23
	'['            reduce using rule 25
			(reduce using rule 24)

	']'            reduce using rule 23
	'and'          reduce using rule 23
	'has'          reduce using rule 25
	'or'           reduce using rule 23
	'to'           reduce using rule 23
	'xor'          reduce using rule 23
	'}'            reduce using rule 23
	%eof           reduce using rule 23


State 53

	IExpr2 -> Integer .                                 (rule 36)

	'!='           reduce using rule 36
	'%'            reduce using rule 36
	')'            reduce using rule 36
	'*'            reduce using rule 36
	'+'            reduce using rule 36
	','            reduce using rule 36
	'-'            reduce using rule 36
	'/'            reduce using rule 36
	';'            reduce using rule 36
	'<'            reduce using rule 36
	'<='           reduce using rule 36
	'=='           reduce using rule 36
	'>'            reduce using rule 36
	'>='           reduce using rule 36
	']'            reduce using rule 36
	'and'          reduce using rule 36
	'or'           reduce using rule 36
	'to'           reduce using rule 36
	'xor'          reduce using rule 36
	'}'            reduce using rule 36
	%eof           reduce using rule 36


State 54

	IExpr2 -> VarIdent .                                (rule 37)
	IExpr2 -> VarIdent . '++'                           (rule 38)
	IExpr2 -> VarIdent . '--'                           (rule 40)
	BExpr1 -> VarIdent .                                (rule 49)

	'!='           reduce using rule 49
			(reduce using rule 37)

	'%'            reduce using rule 37
	')'            reduce using rule 49
			(reduce using rule 37)

	'*'            reduce using rule 37
	'+'            reduce using rule 37
	'++'           shift, and enter state 105
	','            reduce using rule 49
			(reduce using rule 37)

	'-'            reduce using rule 37
	'--'           shift, and enter state 106
	'/'            reduce using rule 37
	';'            reduce using rule 49
			(reduce using rule 37)

	'<'            reduce using rule 37
	'<='           reduce using rule 37
	'=='           reduce using rule 49
			(reduce using rule 37)

	'>'            reduce using rule 37
	'>='           reduce using rule 37
	']'            reduce using rule 49
			(reduce using rule 37)

	'and'          reduce using rule 49
	'or'           reduce using rule 49
	'xor'          reduce using rule 49
	'}'            reduce using rule 49
			(reduce using rule 37)

	%eof           reduce using rule 49
			(reduce using rule 37)



State 55

	IExpr2 -> ArrIdent . '[' IExpr ']'                  (rule 42)
	BExpr1 -> ArrIdent . '[' IExpr ']'                  (rule 62)

	'['            shift, and enter state 127


State 56

	IExpr2 -> DictIdent . '[' IExpr ']'                 (rule 43)
	IExpr2 -> DictIdent . '[' BExpr ']'                 (rule 44)
	BExpr1 -> DictIdent . '[' IExpr ']'                 (rule 63)
	BExpr1 -> DictIdent . '[' BExpr ']'                 (rule 64)
	BExpr1 -> DictIdent . 'has' 'key' '[' IExpr ']'     (rule 65)
	BExpr1 -> DictIdent . 'has' 'key' '[' BExpr ']'     (rule 66)

	'['            shift, and enter state 125
	'has'          shift, and enter state 126


State 57

	IExpr2 -> FuncIdent . '(' Args ')'                  (rule 45)
	BExpr1 -> FuncIdent . '(' Args ')'                  (rule 67)

	'('            shift, and enter state 124


State 58

	Args -> Expr .                                      (rule 71)
	Args -> Expr . ',' Args                             (rule 72)

	')'            reduce using rule 71
	','            shift, and enter state 123
	%eof           reduce using rule 71


State 59

	Expr -> IExpr .                                     (rule 27)
	IExpr -> IExpr . '+' IExpr1                         (rule 29)
	IExpr -> IExpr . '-' IExpr1                         (rule 30)
	BExpr1 -> IExpr . '==' IExpr                        (rule 50)
	BExpr1 -> IExpr . '<=' IExpr                        (rule 51)
	BExpr1 -> IExpr . '>=' IExpr                        (rule 52)
	BExpr1 -> IExpr . '<' IExpr                         (rule 53)
	BExpr1 -> IExpr . '>' IExpr                         (rule 54)
	BExpr1 -> IExpr . '!=' IExpr                        (rule 55)

	'!='           shift, and enter state 112
	')'            reduce using rule 27
	'+'            shift, and enter state 96
	','            reduce using rule 27
	'-'            shift, and enter state 97
	';'            reduce using rule 27
	'<'            shift, and enter state 113
	'<='           shift, and enter state 114
	'=='           shift, and enter state 115
	'>'            shift, and enter state 116
	'>='           shift, and enter state 117
	'}'            reduce using rule 27
	%eof           reduce using rule 27


State 60

	IExpr -> IExpr1 .                                   (rule 31)
	IExpr1 -> IExpr1 . '/' IExpr2                       (rule 32)
	IExpr1 -> IExpr1 . '*' IExpr2                       (rule 33)
	IExpr1 -> IExpr1 . '%' IExpr2                       (rule 34)

	'!='           reduce using rule 31
	'%'            shift, and enter state 98
	')'            reduce using rule 31
	'*'            shift, and enter state 99
	'+'            reduce using rule 31
	','            reduce using rule 31
	'-'            reduce using rule 31
	'/'            shift, and enter state 100
	';'            reduce using rule 31
	'<'            reduce using rule 31
	'<='           reduce using rule 31
	'=='           reduce using rule 31
	'>'            reduce using rule 31
	'>='           reduce using rule 31
	']'            reduce using rule 31
	'and'          reduce using rule 31
	'or'           reduce using rule 31
	'to'           reduce using rule 31
	'xor'          reduce using rule 31
	'}'            reduce using rule 31
	%eof           reduce using rule 31


State 61

	IExpr1 -> IExpr2 .                                  (rule 35)

	'!='           reduce using rule 35
	'%'            reduce using rule 35
	')'            reduce using rule 35
	'*'            reduce using rule 35
	'+'            reduce using rule 35
	','            reduce using rule 35
	'-'            reduce using rule 35
	'/'            reduce using rule 35
	';'            reduce using rule 35
	'<'            reduce using rule 35
	'<='           reduce using rule 35
	'=='           reduce using rule 35
	'>'            reduce using rule 35
	'>='           reduce using rule 35
	']'            reduce using rule 35
	'and'          reduce using rule 35
	'or'           reduce using rule 35
	'to'           reduce using rule 35
	'xor'          reduce using rule 35
	'}'            reduce using rule 35
	%eof           reduce using rule 35


State 62

	BExpr -> BExpr1 .                                   (rule 69)

	'!='           reduce using rule 69
	')'            reduce using rule 69
	','            reduce using rule 69
	';'            reduce using rule 69
	'=='           reduce using rule 69
	']'            reduce using rule 69
	'and'          reduce using rule 69
	'or'           reduce using rule 69
	'xor'          reduce using rule 69
	'}'            reduce using rule 69
	%eof           reduce using rule 69


State 63

	Expr -> BExpr .                                     (rule 28)
	BExpr1 -> BExpr . '==' BExpr                        (rule 56)
	BExpr1 -> BExpr . '!=' BExpr                        (rule 57)
	BExpr1 -> BExpr . 'or' BExpr1                       (rule 59)
	BExpr1 -> BExpr . 'and' BExpr1                      (rule 60)
	BExpr1 -> BExpr . 'xor' BExpr1                      (rule 61)

	'!='           shift, and enter state 107
	')'            reduce using rule 28
	','            reduce using rule 28
	';'            reduce using rule 28
	'=='           shift, and enter state 108
	'and'          shift, and enter state 109
	'or'           shift, and enter state 110
	'xor'          shift, and enter state 111
	'}'            reduce using rule 28
	%eof           reduce using rule 28


State 64

	%start_pArgs -> Args .                              (rule 12)

	%eof           accept


State 65

	BExpr1 -> '!' . BExpr1                              (rule 58)

	'!'            shift, and enter state 65
	'('            shift, and enter state 66
	'++'           shift, and enter state 67
	'--'           shift, and enter state 68
	'false'        shift, and enter state 69
	'true'         shift, and enter state 71
	L_Ident        shift, and enter state 18
	L_integ        shift, and enter state 72

	Ident          goto state 52
	Integer        goto state 53
	VarIdent       goto state 54
	ArrIdent       goto state 55
	DictIdent      goto state 56
	FuncIdent      goto state 57
	IExpr          goto state 73
	IExpr1         goto state 60
	IExpr2         goto state 61
	BExpr1         goto state 122
	BExpr          goto state 76

State 66

	IExpr2 -> '(' . IExpr ')'                           (rule 46)
	BExpr1 -> '(' . BExpr ')'                           (rule 68)

	'!'            shift, and enter state 65
	'('            shift, and enter state 66
	'++'           shift, and enter state 67
	'--'           shift, and enter state 68
	'false'        shift, and enter state 69
	'true'         shift, and enter state 71
	L_Ident        shift, and enter state 18
	L_integ        shift, and enter state 72

	Ident          goto state 52
	Integer        goto state 53
	VarIdent       goto state 54
	ArrIdent       goto state 55
	DictIdent      goto state 56
	FuncIdent      goto state 57
	IExpr          goto state 120
	IExpr1         goto state 60
	IExpr2         goto state 61
	BExpr1         goto state 62
	BExpr          goto state 121

State 67

	IExpr2 -> '++' . VarIdent                           (rule 39)

	L_Ident        shift, and enter state 18

	Ident          goto state 92
	VarIdent       goto state 119

State 68

	IExpr2 -> '--' . VarIdent                           (rule 41)

	L_Ident        shift, and enter state 18

	Ident          goto state 92
	VarIdent       goto state 118

State 69

	BExpr1 -> 'false' .                                 (rule 48)

	'!='           reduce using rule 48
	')'            reduce using rule 48
	','            reduce using rule 48
	';'            reduce using rule 48
	'=='           reduce using rule 48
	']'            reduce using rule 48
	'and'          reduce using rule 48
	'or'           reduce using rule 48
	'xor'          reduce using rule 48
	'}'            reduce using rule 48
	%eof           reduce using rule 48


State 70

	Args -> 'none' .                                    (rule 70)

	')'            reduce using rule 70
	%eof           reduce using rule 70


State 71

	BExpr1 -> 'true' .                                  (rule 47)

	'!='           reduce using rule 47
	')'            reduce using rule 47
	','            reduce using rule 47
	';'            reduce using rule 47
	'=='           reduce using rule 47
	']'            reduce using rule 47
	'and'          reduce using rule 47
	'or'           reduce using rule 47
	'xor'          reduce using rule 47
	'}'            reduce using rule 47
	%eof           reduce using rule 47


State 72

	Integer -> L_integ .                                (rule 18)

	'!='           reduce using rule 18
	'%'            reduce using rule 18
	')'            reduce using rule 18
	'*'            reduce using rule 18
	'+'            reduce using rule 18
	','            reduce using rule 18
	'-'            reduce using rule 18
	'/'            reduce using rule 18
	';'            reduce using rule 18
	'<'            reduce using rule 18
	'<='           reduce using rule 18
	'=='           reduce using rule 18
	'>'            reduce using rule 18
	'>='           reduce using rule 18
	']'            reduce using rule 18
	'and'          reduce using rule 18
	'or'           reduce using rule 18
	'to'           reduce using rule 18
	'xor'          reduce using rule 18
	'}'            reduce using rule 18
	%eof           reduce using rule 18


State 73

	IExpr -> IExpr . '+' IExpr1                         (rule 29)
	IExpr -> IExpr . '-' IExpr1                         (rule 30)
	BExpr1 -> IExpr . '==' IExpr                        (rule 50)
	BExpr1 -> IExpr . '<=' IExpr                        (rule 51)
	BExpr1 -> IExpr . '>=' IExpr                        (rule 52)
	BExpr1 -> IExpr . '<' IExpr                         (rule 53)
	BExpr1 -> IExpr . '>' IExpr                         (rule 54)
	BExpr1 -> IExpr . '!=' IExpr                        (rule 55)

	'!='           shift, and enter state 112
	'+'            shift, and enter state 96
	'-'            shift, and enter state 97
	'<'            shift, and enter state 113
	'<='           shift, and enter state 114
	'=='           shift, and enter state 115
	'>'            shift, and enter state 116
	'>='           shift, and enter state 117


State 74

	%start_pBExpr -> BExpr .                            (rule 11)
	BExpr1 -> BExpr . '==' BExpr                        (rule 56)
	BExpr1 -> BExpr . '!=' BExpr                        (rule 57)
	BExpr1 -> BExpr . 'or' BExpr1                       (rule 59)
	BExpr1 -> BExpr . 'and' BExpr1                      (rule 60)
	BExpr1 -> BExpr . 'xor' BExpr1                      (rule 61)

	'!='           shift, and enter state 107
	'=='           shift, and enter state 108
	'and'          shift, and enter state 109
	'or'           shift, and enter state 110
	'xor'          shift, and enter state 111
	%eof           accept


State 75

	%start_pBExpr1 -> BExpr1 .                          (rule 10)
	BExpr -> BExpr1 .                                   (rule 69)

	'!='           reduce using rule 69
	'=='           reduce using rule 69
	'and'          reduce using rule 69
	'or'           reduce using rule 69
	'xor'          reduce using rule 69
	%eof           accept


State 76

	BExpr1 -> BExpr . '==' BExpr                        (rule 56)
	BExpr1 -> BExpr . '!=' BExpr                        (rule 57)
	BExpr1 -> BExpr . 'or' BExpr1                       (rule 59)
	BExpr1 -> BExpr . 'and' BExpr1                      (rule 60)
	BExpr1 -> BExpr . 'xor' BExpr1                      (rule 61)

	'!='           shift, and enter state 107
	'=='           shift, and enter state 108
	'and'          shift, and enter state 109
	'or'           shift, and enter state 110
	'xor'          shift, and enter state 111


State 77

	IExpr2 -> VarIdent .                                (rule 37)
	IExpr2 -> VarIdent . '++'                           (rule 38)
	IExpr2 -> VarIdent . '--'                           (rule 40)

	'!='           reduce using rule 37
	'%'            reduce using rule 37
	')'            reduce using rule 37
	'*'            reduce using rule 37
	'+'            reduce using rule 37
	'++'           shift, and enter state 105
	','            reduce using rule 37
	'-'            reduce using rule 37
	'--'           shift, and enter state 106
	'/'            reduce using rule 37
	';'            reduce using rule 37
	'<'            reduce using rule 37
	'<='           reduce using rule 37
	'=='           reduce using rule 37
	'>'            reduce using rule 37
	'>='           reduce using rule 37
	']'            reduce using rule 37
	'and'          reduce using rule 37
	'or'           reduce using rule 37
	'to'           reduce using rule 37
	'xor'          reduce using rule 37
	'}'            reduce using rule 37
	%eof           reduce using rule 37


State 78

	IExpr2 -> ArrIdent . '[' IExpr ']'                  (rule 42)

	'['            shift, and enter state 104


State 79

	IExpr2 -> DictIdent . '[' IExpr ']'                 (rule 43)
	IExpr2 -> DictIdent . '[' BExpr ']'                 (rule 44)

	'['            shift, and enter state 103


State 80

	IExpr2 -> FuncIdent . '(' Args ')'                  (rule 45)

	'('            shift, and enter state 102


State 81

	%start_pIExpr2 -> IExpr2 .                          (rule 9)

	%eof           accept


State 82

	IExpr2 -> '(' . IExpr ')'                           (rule 46)

	'('            shift, and enter state 82
	'++'           shift, and enter state 67
	'--'           shift, and enter state 68
	L_Ident        shift, and enter state 18
	L_integ        shift, and enter state 72

	Ident          goto state 52
	Integer        goto state 53
	VarIdent       goto state 77
	ArrIdent       goto state 78
	DictIdent      goto state 79
	FuncIdent      goto state 80
	IExpr          goto state 101
	IExpr1         goto state 60
	IExpr2         goto state 61

State 83

	%start_pIExpr1 -> IExpr1 .                          (rule 8)
	IExpr1 -> IExpr1 . '/' IExpr2                       (rule 32)
	IExpr1 -> IExpr1 . '*' IExpr2                       (rule 33)
	IExpr1 -> IExpr1 . '%' IExpr2                       (rule 34)

	'%'            shift, and enter state 98
	'*'            shift, and enter state 99
	'/'            shift, and enter state 100
	%eof           accept


State 84

	%start_pIExpr -> IExpr .                            (rule 7)
	IExpr -> IExpr . '+' IExpr1                         (rule 29)
	IExpr -> IExpr . '-' IExpr1                         (rule 30)

	'+'            shift, and enter state 96
	'-'            shift, and enter state 97
	%eof           accept


State 85

	%start_pExpr -> Expr .                              (rule 6)

	%eof           accept


State 86

	FuncIdent -> Ident .                                (rule 26)

	'('            reduce using rule 26
	%eof           reduce using rule 26


State 87

	%start_pFuncIdent -> FuncIdent .                    (rule 5)

	%eof           accept


State 88

	DictIdent -> Ident .                                (rule 25)

	';'            reduce using rule 25
	'}'            reduce using rule 25
	%eof           reduce using rule 25


State 89

	%start_pDictIdent -> DictIdent .                    (rule 4)

	%eof           accept


State 90

	ArrIdent -> Ident .                                 (rule 24)

	'['            reduce using rule 24
	%eof           reduce using rule 24


State 91

	%start_pArrIdent -> ArrIdent .                      (rule 3)

	%eof           accept


State 92

	VarIdent -> Ident .                                 (rule 23)

	'!='           reduce using rule 23
	'%'            reduce using rule 23
	')'            reduce using rule 23
	'*'            reduce using rule 23
	'+'            reduce using rule 23
	','            reduce using rule 23
	'-'            reduce using rule 23
	'/'            reduce using rule 23
	';'            reduce using rule 23
	'<'            reduce using rule 23
	'<='           reduce using rule 23
	'='            reduce using rule 23
	'=='           reduce using rule 23
	'>'            reduce using rule 23
	'>='           reduce using rule 23
	']'            reduce using rule 23
	'and'          reduce using rule 23
	'or'           reduce using rule 23
	'to'           reduce using rule 23
	'xor'          reduce using rule 23
	'}'            reduce using rule 23
	%eof           reduce using rule 23


State 93

	%start_pVarIdent -> VarIdent .                      (rule 2)

	%eof           accept


State 94

	%start_pFType -> FType .                            (rule 1)

	%eof           accept


State 95

	%start_pType -> Type .                              (rule 0)

	%eof           accept


State 96

	IExpr -> IExpr '+' . IExpr1                         (rule 29)

	'('            shift, and enter state 82
	'++'           shift, and enter state 67
	'--'           shift, and enter state 68
	L_Ident        shift, and enter state 18
	L_integ        shift, and enter state 72

	Ident          goto state 52
	Integer        goto state 53
	VarIdent       goto state 77
	ArrIdent       goto state 78
	DictIdent      goto state 79
	FuncIdent      goto state 80
	IExpr1         goto state 211
	IExpr2         goto state 61

State 97

	IExpr -> IExpr '-' . IExpr1                         (rule 30)

	'('            shift, and enter state 82
	'++'           shift, and enter state 67
	'--'           shift, and enter state 68
	L_Ident        shift, and enter state 18
	L_integ        shift, and enter state 72

	Ident          goto state 52
	Integer        goto state 53
	VarIdent       goto state 77
	ArrIdent       goto state 78
	DictIdent      goto state 79
	FuncIdent      goto state 80
	IExpr1         goto state 210
	IExpr2         goto state 61

State 98

	IExpr1 -> IExpr1 '%' . IExpr2                       (rule 34)

	'('            shift, and enter state 82
	'++'           shift, and enter state 67
	'--'           shift, and enter state 68
	L_Ident        shift, and enter state 18
	L_integ        shift, and enter state 72

	Ident          goto state 52
	Integer        goto state 53
	VarIdent       goto state 77
	ArrIdent       goto state 78
	DictIdent      goto state 79
	FuncIdent      goto state 80
	IExpr2         goto state 209

State 99

	IExpr1 -> IExpr1 '*' . IExpr2                       (rule 33)

	'('            shift, and enter state 82
	'++'           shift, and enter state 67
	'--'           shift, and enter state 68
	L_Ident        shift, and enter state 18
	L_integ        shift, and enter state 72

	Ident          goto state 52
	Integer        goto state 53
	VarIdent       goto state 77
	ArrIdent       goto state 78
	DictIdent      goto state 79
	FuncIdent      goto state 80
	IExpr2         goto state 208

State 100

	IExpr1 -> IExpr1 '/' . IExpr2                       (rule 32)

	'('            shift, and enter state 82
	'++'           shift, and enter state 67
	'--'           shift, and enter state 68
	L_Ident        shift, and enter state 18
	L_integ        shift, and enter state 72

	Ident          goto state 52
	Integer        goto state 53
	VarIdent       goto state 77
	ArrIdent       goto state 78
	DictIdent      goto state 79
	FuncIdent      goto state 80
	IExpr2         goto state 207

State 101

	IExpr -> IExpr . '+' IExpr1                         (rule 29)
	IExpr -> IExpr . '-' IExpr1                         (rule 30)
	IExpr2 -> '(' IExpr . ')'                           (rule 46)

	')'            shift, and enter state 191
	'+'            shift, and enter state 96
	'-'            shift, and enter state 97


State 102

	IExpr2 -> FuncIdent '(' . Args ')'                  (rule 45)

	'!'            shift, and enter state 65
	'('            shift, and enter state 66
	'++'           shift, and enter state 67
	'--'           shift, and enter state 68
	'false'        shift, and enter state 69
	'none'         shift, and enter state 70
	'true'         shift, and enter state 71
	L_Ident        shift, and enter state 18
	L_integ        shift, and enter state 72

	Ident          goto state 52
	Integer        goto state 53
	VarIdent       goto state 54
	ArrIdent       goto state 55
	DictIdent      goto state 56
	FuncIdent      goto state 57
	Expr           goto state 58
	IExpr          goto state 59
	IExpr1         goto state 60
	IExpr2         goto state 61
	BExpr1         goto state 62
	BExpr          goto state 63
	Args           goto state 206

State 103

	IExpr2 -> DictIdent '[' . IExpr ']'                 (rule 43)
	IExpr2 -> DictIdent '[' . BExpr ']'                 (rule 44)

	'!'            shift, and enter state 65
	'('            shift, and enter state 66
	'++'           shift, and enter state 67
	'--'           shift, and enter state 68
	'false'        shift, and enter state 69
	'true'         shift, and enter state 71
	L_Ident        shift, and enter state 18
	L_integ        shift, and enter state 72

	Ident          goto state 52
	Integer        goto state 53
	VarIdent       goto state 54
	ArrIdent       goto state 55
	DictIdent      goto state 56
	FuncIdent      goto state 57
	IExpr          goto state 204
	IExpr1         goto state 60
	IExpr2         goto state 61
	BExpr1         goto state 62
	BExpr          goto state 205

State 104

	IExpr2 -> ArrIdent '[' . IExpr ']'                  (rule 42)

	'('            shift, and enter state 82
	'++'           shift, and enter state 67
	'--'           shift, and enter state 68
	L_Ident        shift, and enter state 18
	L_integ        shift, and enter state 72

	Ident          goto state 52
	Integer        goto state 53
	VarIdent       goto state 77
	ArrIdent       goto state 78
	DictIdent      goto state 79
	FuncIdent      goto state 80
	IExpr          goto state 203
	IExpr1         goto state 60
	IExpr2         goto state 61

State 105

	IExpr2 -> VarIdent '++' .                           (rule 38)

	'!='           reduce using rule 38
	'%'            reduce using rule 38
	')'            reduce using rule 38
	'*'            reduce using rule 38
	'+'            reduce using rule 38
	','            reduce using rule 38
	'-'            reduce using rule 38
	'/'            reduce using rule 38
	';'            reduce using rule 38
	'<'            reduce using rule 38
	'<='           reduce using rule 38
	'=='           reduce using rule 38
	'>'            reduce using rule 38
	'>='           reduce using rule 38
	']'            reduce using rule 38
	'and'          reduce using rule 38
	'or'           reduce using rule 38
	'to'           reduce using rule 38
	'xor'          reduce using rule 38
	'}'            reduce using rule 38
	%eof           reduce using rule 38


State 106

	IExpr2 -> VarIdent '--' .                           (rule 40)

	'!='           reduce using rule 40
	'%'            reduce using rule 40
	')'            reduce using rule 40
	'*'            reduce using rule 40
	'+'            reduce using rule 40
	','            reduce using rule 40
	'-'            reduce using rule 40
	'/'            reduce using rule 40
	';'            reduce using rule 40
	'<'            reduce using rule 40
	'<='           reduce using rule 40
	'=='           reduce using rule 40
	'>'            reduce using rule 40
	'>='           reduce using rule 40
	']'            reduce using rule 40
	'and'          reduce using rule 40
	'or'           reduce using rule 40
	'to'           reduce using rule 40
	'xor'          reduce using rule 40
	'}'            reduce using rule 40
	%eof           reduce using rule 40


State 107

	BExpr1 -> BExpr '!=' . BExpr                        (rule 57)

	'!'            shift, and enter state 65
	'('            shift, and enter state 66
	'++'           shift, and enter state 67
	'--'           shift, and enter state 68
	'false'        shift, and enter state 69
	'true'         shift, and enter state 71
	L_Ident        shift, and enter state 18
	L_integ        shift, and enter state 72

	Ident          goto state 52
	Integer        goto state 53
	VarIdent       goto state 54
	ArrIdent       goto state 55
	DictIdent      goto state 56
	FuncIdent      goto state 57
	IExpr          goto state 73
	IExpr1         goto state 60
	IExpr2         goto state 61
	BExpr1         goto state 62
	BExpr          goto state 202

State 108

	BExpr1 -> BExpr '==' . BExpr                        (rule 56)

	'!'            shift, and enter state 65
	'('            shift, and enter state 66
	'++'           shift, and enter state 67
	'--'           shift, and enter state 68
	'false'        shift, and enter state 69
	'true'         shift, and enter state 71
	L_Ident        shift, and enter state 18
	L_integ        shift, and enter state 72

	Ident          goto state 52
	Integer        goto state 53
	VarIdent       goto state 54
	ArrIdent       goto state 55
	DictIdent      goto state 56
	FuncIdent      goto state 57
	IExpr          goto state 73
	IExpr1         goto state 60
	IExpr2         goto state 61
	BExpr1         goto state 62
	BExpr          goto state 201

State 109

	BExpr1 -> BExpr 'and' . BExpr1                      (rule 60)

	'!'            shift, and enter state 65
	'('            shift, and enter state 66
	'++'           shift, and enter state 67
	'--'           shift, and enter state 68
	'false'        shift, and enter state 69
	'true'         shift, and enter state 71
	L_Ident        shift, and enter state 18
	L_integ        shift, and enter state 72

	Ident          goto state 52
	Integer        goto state 53
	VarIdent       goto state 54
	ArrIdent       goto state 55
	DictIdent      goto state 56
	FuncIdent      goto state 57
	IExpr          goto state 73
	IExpr1         goto state 60
	IExpr2         goto state 61
	BExpr1         goto state 200
	BExpr          goto state 76

State 110

	BExpr1 -> BExpr 'or' . BExpr1                       (rule 59)

	'!'            shift, and enter state 65
	'('            shift, and enter state 66
	'++'           shift, and enter state 67
	'--'           shift, and enter state 68
	'false'        shift, and enter state 69
	'true'         shift, and enter state 71
	L_Ident        shift, and enter state 18
	L_integ        shift, and enter state 72

	Ident          goto state 52
	Integer        goto state 53
	VarIdent       goto state 54
	ArrIdent       goto state 55
	DictIdent      goto state 56
	FuncIdent      goto state 57
	IExpr          goto state 73
	IExpr1         goto state 60
	IExpr2         goto state 61
	BExpr1         goto state 199
	BExpr          goto state 76

State 111

	BExpr1 -> BExpr 'xor' . BExpr1                      (rule 61)

	'!'            shift, and enter state 65
	'('            shift, and enter state 66
	'++'           shift, and enter state 67
	'--'           shift, and enter state 68
	'false'        shift, and enter state 69
	'true'         shift, and enter state 71
	L_Ident        shift, and enter state 18
	L_integ        shift, and enter state 72

	Ident          goto state 52
	Integer        goto state 53
	VarIdent       goto state 54
	ArrIdent       goto state 55
	DictIdent      goto state 56
	FuncIdent      goto state 57
	IExpr          goto state 73
	IExpr1         goto state 60
	IExpr2         goto state 61
	BExpr1         goto state 198
	BExpr          goto state 76

State 112

	BExpr1 -> IExpr '!=' . IExpr                        (rule 55)

	'('            shift, and enter state 82
	'++'           shift, and enter state 67
	'--'           shift, and enter state 68
	L_Ident        shift, and enter state 18
	L_integ        shift, and enter state 72

	Ident          goto state 52
	Integer        goto state 53
	VarIdent       goto state 77
	ArrIdent       goto state 78
	DictIdent      goto state 79
	FuncIdent      goto state 80
	IExpr          goto state 197
	IExpr1         goto state 60
	IExpr2         goto state 61

State 113

	BExpr1 -> IExpr '<' . IExpr                         (rule 53)

	'('            shift, and enter state 82
	'++'           shift, and enter state 67
	'--'           shift, and enter state 68
	L_Ident        shift, and enter state 18
	L_integ        shift, and enter state 72

	Ident          goto state 52
	Integer        goto state 53
	VarIdent       goto state 77
	ArrIdent       goto state 78
	DictIdent      goto state 79
	FuncIdent      goto state 80
	IExpr          goto state 196
	IExpr1         goto state 60
	IExpr2         goto state 61

State 114

	BExpr1 -> IExpr '<=' . IExpr                        (rule 51)

	'('            shift, and enter state 82
	'++'           shift, and enter state 67
	'--'           shift, and enter state 68
	L_Ident        shift, and enter state 18
	L_integ        shift, and enter state 72

	Ident          goto state 52
	Integer        goto state 53
	VarIdent       goto state 77
	ArrIdent       goto state 78
	DictIdent      goto state 79
	FuncIdent      goto state 80
	IExpr          goto state 195
	IExpr1         goto state 60
	IExpr2         goto state 61

State 115

	BExpr1 -> IExpr '==' . IExpr                        (rule 50)

	'('            shift, and enter state 82
	'++'           shift, and enter state 67
	'--'           shift, and enter state 68
	L_Ident        shift, and enter state 18
	L_integ        shift, and enter state 72

	Ident          goto state 52
	Integer        goto state 53
	VarIdent       goto state 77
	ArrIdent       goto state 78
	DictIdent      goto state 79
	FuncIdent      goto state 80
	IExpr          goto state 194
	IExpr1         goto state 60
	IExpr2         goto state 61

State 116

	BExpr1 -> IExpr '>' . IExpr                         (rule 54)

	'('            shift, and enter state 82
	'++'           shift, and enter state 67
	'--'           shift, and enter state 68
	L_Ident        shift, and enter state 18
	L_integ        shift, and enter state 72

	Ident          goto state 52
	Integer        goto state 53
	VarIdent       goto state 77
	ArrIdent       goto state 78
	DictIdent      goto state 79
	FuncIdent      goto state 80
	IExpr          goto state 193
	IExpr1         goto state 60
	IExpr2         goto state 61

State 117

	BExpr1 -> IExpr '>=' . IExpr                        (rule 52)

	'('            shift, and enter state 82
	'++'           shift, and enter state 67
	'--'           shift, and enter state 68
	L_Ident        shift, and enter state 18
	L_integ        shift, and enter state 72

	Ident          goto state 52
	Integer        goto state 53
	VarIdent       goto state 77
	ArrIdent       goto state 78
	DictIdent      goto state 79
	FuncIdent      goto state 80
	IExpr          goto state 192
	IExpr1         goto state 60
	IExpr2         goto state 61

State 118

	IExpr2 -> '--' VarIdent .                           (rule 41)

	'!='           reduce using rule 41
	'%'            reduce using rule 41
	')'            reduce using rule 41
	'*'            reduce using rule 41
	'+'            reduce using rule 41
	','            reduce using rule 41
	'-'            reduce using rule 41
	'/'            reduce using rule 41
	';'            reduce using rule 41
	'<'            reduce using rule 41
	'<='           reduce using rule 41
	'=='           reduce using rule 41
	'>'            reduce using rule 41
	'>='           reduce using rule 41
	']'            reduce using rule 41
	'and'          reduce using rule 41
	'or'           reduce using rule 41
	'to'           reduce using rule 41
	'xor'          reduce using rule 41
	'}'            reduce using rule 41
	%eof           reduce using rule 41


State 119

	IExpr2 -> '++' VarIdent .                           (rule 39)

	'!='           reduce using rule 39
	'%'            reduce using rule 39
	')'            reduce using rule 39
	'*'            reduce using rule 39
	'+'            reduce using rule 39
	','            reduce using rule 39
	'-'            reduce using rule 39
	'/'            reduce using rule 39
	';'            reduce using rule 39
	'<'            reduce using rule 39
	'<='           reduce using rule 39
	'=='           reduce using rule 39
	'>'            reduce using rule 39
	'>='           reduce using rule 39
	']'            reduce using rule 39
	'and'          reduce using rule 39
	'or'           reduce using rule 39
	'to'           reduce using rule 39
	'xor'          reduce using rule 39
	'}'            reduce using rule 39
	%eof           reduce using rule 39


State 120

	IExpr -> IExpr . '+' IExpr1                         (rule 29)
	IExpr -> IExpr . '-' IExpr1                         (rule 30)
	IExpr2 -> '(' IExpr . ')'                           (rule 46)
	BExpr1 -> IExpr . '==' IExpr                        (rule 50)
	BExpr1 -> IExpr . '<=' IExpr                        (rule 51)
	BExpr1 -> IExpr . '>=' IExpr                        (rule 52)
	BExpr1 -> IExpr . '<' IExpr                         (rule 53)
	BExpr1 -> IExpr . '>' IExpr                         (rule 54)
	BExpr1 -> IExpr . '!=' IExpr                        (rule 55)

	'!='           shift, and enter state 112
	')'            shift, and enter state 191
	'+'            shift, and enter state 96
	'-'            shift, and enter state 97
	'<'            shift, and enter state 113
	'<='           shift, and enter state 114
	'=='           shift, and enter state 115
	'>'            shift, and enter state 116
	'>='           shift, and enter state 117


State 121

	BExpr1 -> BExpr . '==' BExpr                        (rule 56)
	BExpr1 -> BExpr . '!=' BExpr                        (rule 57)
	BExpr1 -> BExpr . 'or' BExpr1                       (rule 59)
	BExpr1 -> BExpr . 'and' BExpr1                      (rule 60)
	BExpr1 -> BExpr . 'xor' BExpr1                      (rule 61)
	BExpr1 -> '(' BExpr . ')'                           (rule 68)

	'!='           shift, and enter state 107
	')'            shift, and enter state 190
	'=='           shift, and enter state 108
	'and'          shift, and enter state 109
	'or'           shift, and enter state 110
	'xor'          shift, and enter state 111


State 122

	BExpr1 -> '!' BExpr1 .                              (rule 58)
	BExpr -> BExpr1 .                                   (rule 69)

	'!='           reduce using rule 69
			(reduce using rule 58)

	')'            reduce using rule 58
	','            reduce using rule 58
	';'            reduce using rule 58
	'=='           reduce using rule 69
			(reduce using rule 58)

	']'            reduce using rule 58
	'and'          reduce using rule 69
			(reduce using rule 58)

	'or'           reduce using rule 69
			(reduce using rule 58)

	'xor'          reduce using rule 69
			(reduce using rule 58)

	'}'            reduce using rule 58
	%eof           reduce using rule 58


State 123

	Args -> Expr ',' . Args                             (rule 72)

	'!'            shift, and enter state 65
	'('            shift, and enter state 66
	'++'           shift, and enter state 67
	'--'           shift, and enter state 68
	'false'        shift, and enter state 69
	'none'         shift, and enter state 70
	'true'         shift, and enter state 71
	L_Ident        shift, and enter state 18
	L_integ        shift, and enter state 72

	Ident          goto state 52
	Integer        goto state 53
	VarIdent       goto state 54
	ArrIdent       goto state 55
	DictIdent      goto state 56
	FuncIdent      goto state 57
	Expr           goto state 58
	IExpr          goto state 59
	IExpr1         goto state 60
	IExpr2         goto state 61
	BExpr1         goto state 62
	BExpr          goto state 63
	Args           goto state 189

State 124

	IExpr2 -> FuncIdent '(' . Args ')'                  (rule 45)
	BExpr1 -> FuncIdent '(' . Args ')'                  (rule 67)

	'!'            shift, and enter state 65
	'('            shift, and enter state 66
	'++'           shift, and enter state 67
	'--'           shift, and enter state 68
	'false'        shift, and enter state 69
	'none'         shift, and enter state 70
	'true'         shift, and enter state 71
	L_Ident        shift, and enter state 18
	L_integ        shift, and enter state 72

	Ident          goto state 52
	Integer        goto state 53
	VarIdent       goto state 54
	ArrIdent       goto state 55
	DictIdent      goto state 56
	FuncIdent      goto state 57
	Expr           goto state 58
	IExpr          goto state 59
	IExpr1         goto state 60
	IExpr2         goto state 61
	BExpr1         goto state 62
	BExpr          goto state 63
	Args           goto state 188

State 125

	IExpr2 -> DictIdent '[' . IExpr ']'                 (rule 43)
	IExpr2 -> DictIdent '[' . BExpr ']'                 (rule 44)
	BExpr1 -> DictIdent '[' . IExpr ']'                 (rule 63)
	BExpr1 -> DictIdent '[' . BExpr ']'                 (rule 64)

	'!'            shift, and enter state 65
	'('            shift, and enter state 66
	'++'           shift, and enter state 67
	'--'           shift, and enter state 68
	'false'        shift, and enter state 69
	'true'         shift, and enter state 71
	L_Ident        shift, and enter state 18
	L_integ        shift, and enter state 72

	Ident          goto state 52
	Integer        goto state 53
	VarIdent       goto state 54
	ArrIdent       goto state 55
	DictIdent      goto state 56
	FuncIdent      goto state 57
	IExpr          goto state 186
	IExpr1         goto state 60
	IExpr2         goto state 61
	BExpr1         goto state 62
	BExpr          goto state 187

State 126

	BExpr1 -> DictIdent 'has' . 'key' '[' IExpr ']'     (rule 65)
	BExpr1 -> DictIdent 'has' . 'key' '[' BExpr ']'     (rule 66)

	'key'          shift, and enter state 185


State 127

	IExpr2 -> ArrIdent '[' . IExpr ']'                  (rule 42)
	BExpr1 -> ArrIdent '[' . IExpr ']'                  (rule 62)

	'('            shift, and enter state 82
	'++'           shift, and enter state 67
	'--'           shift, and enter state 68
	L_Ident        shift, and enter state 18
	L_integ        shift, and enter state 72

	Ident          goto state 52
	Integer        goto state 53
	VarIdent       goto state 77
	ArrIdent       goto state 78
	DictIdent      goto state 79
	FuncIdent      goto state 80
	IExpr          goto state 184
	IExpr1         goto state 60
	IExpr2         goto state 61

State 128

	Params -> Lambda ',' . Params                       (rule 80)

	'BoolFunc'     shift, and enter state 29
	'IntFunc'      shift, and enter state 32
	'none'         shift, and enter state 50
	L_Ident        shift, and enter state 18

	Ident          goto state 44
	FType          goto state 45
	VarIdent       goto state 46
	FuncIdent      goto state 47
	Lambda         goto state 48
	Params         goto state 183

State 129

	Params -> FuncIdent ':' . FType                     (rule 76)
	Params -> FuncIdent ':' . FType ',' Params          (rule 79)

	'BoolFunc'     shift, and enter state 29
	'IntFunc'      shift, and enter state 32

	FType          goto state 182

State 130

	Params -> VarIdent ':' . Type                       (rule 75)
	Params -> VarIdent ':' . Type ',' Params            (rule 78)

	'Bool'         shift, and enter state 28
	'Int'          shift, and enter state 31

	Type           goto state 181

State 131

	Lambda -> FType 'lambda' . '(' Params ')' '->' '{' Instr '}'    (rule 73)

	'('            shift, and enter state 180


State 132

	Instr1 -> 'while' '(' . BExpr ')' '{' Instr '}'     (rule 84)

	'!'            shift, and enter state 65
	'('            shift, and enter state 66
	'++'           shift, and enter state 67
	'--'           shift, and enter state 68
	'false'        shift, and enter state 69
	'true'         shift, and enter state 71
	L_Ident        shift, and enter state 18
	L_integ        shift, and enter state 72

	Ident          goto state 52
	Integer        goto state 53
	VarIdent       goto state 54
	ArrIdent       goto state 55
	DictIdent      goto state 56
	FuncIdent      goto state 57
	IExpr          goto state 73
	IExpr1         goto state 60
	IExpr2         goto state 61
	BExpr1         goto state 62
	BExpr          goto state 179

State 133

	Instr1 -> 'swap' '(' . VarIdent ',' VarIdent ')'    (rule 88)

	L_Ident        shift, and enter state 18

	Ident          goto state 92
	VarIdent       goto state 178

State 134

	Instr1 -> 'return' '(' . IExpr ')'                  (rule 86)

	'('            shift, and enter state 82
	'++'           shift, and enter state 67
	'--'           shift, and enter state 68
	L_Ident        shift, and enter state 18
	L_integ        shift, and enter state 72

	Ident          goto state 52
	Integer        goto state 53
	VarIdent       goto state 77
	ArrIdent       goto state 78
	DictIdent      goto state 79
	FuncIdent      goto state 80
	IExpr          goto state 177
	IExpr1         goto state 60
	IExpr2         goto state 61

State 135

	Instr1 -> 'print' '(' . IExpr ')'                   (rule 87)

	'('            shift, and enter state 82
	'++'           shift, and enter state 67
	'--'           shift, and enter state 68
	L_Ident        shift, and enter state 18
	L_integ        shift, and enter state 72

	Ident          goto state 52
	Integer        goto state 53
	VarIdent       goto state 77
	ArrIdent       goto state 78
	DictIdent      goto state 79
	FuncIdent      goto state 80
	IExpr          goto state 176
	IExpr1         goto state 60
	IExpr2         goto state 61

State 136

	Instr1 -> 'if' '(' . BExpr ')' '{' Instr '}' 'else' '{' Instr '}'    (rule 82)
	Instr1 -> 'if' '(' . BExpr ')' '{' Instr '}'        (rule 83)

	'!'            shift, and enter state 65
	'('            shift, and enter state 66
	'++'           shift, and enter state 67
	'--'           shift, and enter state 68
	'false'        shift, and enter state 69
	'true'         shift, and enter state 71
	L_Ident        shift, and enter state 18
	L_integ        shift, and enter state 72

	Ident          goto state 52
	Integer        goto state 53
	VarIdent       goto state 54
	ArrIdent       goto state 55
	DictIdent      goto state 56
	FuncIdent      goto state 57
	IExpr          goto state 73
	IExpr1         goto state 60
	IExpr2         goto state 61
	BExpr1         goto state 62
	BExpr          goto state 175

State 137

	Instr1 -> 'for' '(' . VarIdent '=' IExpr 'to' IExpr ')' '{' Instr '}'    (rule 85)

	L_Ident        shift, and enter state 18

	Ident          goto state 92
	VarIdent       goto state 174

State 138

	Instr1 -> 'debug' 'assignment' . 'enable' VarIdent    (rule 106)
	Instr1 -> 'debug' 'assignment' . 'disable' VarIdent    (rule 107)

	'disable'      shift, and enter state 172
	'enable'       shift, and enter state 173


State 139

	Instr1 -> 'debug' 'reading' . 'enable' VarIdent     (rule 108)
	Instr1 -> 'debug' 'reading' . 'disable' VarIdent    (rule 109)

	'disable'      shift, and enter state 170
	'enable'       shift, and enter state 171


State 140

	Instr1 -> 'continue' 'outer' . '(' IExpr ')'        (rule 91)

	'('            shift, and enter state 169


State 141

	Instr1 -> 'break' '(' . IExpr ')'                   (rule 89)

	'('            shift, and enter state 82
	'++'           shift, and enter state 67
	'--'           shift, and enter state 68
	L_Ident        shift, and enter state 18
	L_integ        shift, and enter state 72

	Ident          goto state 52
	Integer        goto state 53
	VarIdent       goto state 77
	ArrIdent       goto state 78
	DictIdent      goto state 79
	FuncIdent      goto state 80
	IExpr          goto state 168
	IExpr1         goto state 60
	IExpr2         goto state 61

State 142

	Instr1 -> 'Dict' Type . DictIdent                   (rule 97)

	L_Ident        shift, and enter state 18

	Ident          goto state 88
	DictIdent      goto state 167

State 143

	Instr1 -> 'Array' Type . ArrIdent '[' IExpr ']' '(' Expr ')'    (rule 94)
	Instr1 -> 'Array' Type . ArrIdent '[' IExpr ']'     (rule 95)

	L_Ident        shift, and enter state 18

	Ident          goto state 90
	ArrIdent       goto state 166

State 144

	Instr -> Instr1 ';' . Instr                         (rule 110)

	'Array'        shift, and enter state 27
	'Bool'         shift, and enter state 28
	'BoolFunc'     shift, and enter state 29
	'Dict'         shift, and enter state 30
	'Int'          shift, and enter state 31
	'IntFunc'      shift, and enter state 32
	'break'        shift, and enter state 33
	'continue'     shift, and enter state 34
	'debug'        shift, and enter state 35
	'for'          shift, and enter state 36
	'if'           shift, and enter state 37
	'print'        shift, and enter state 38
	'return'       shift, and enter state 39
	'skip'         shift, and enter state 40
	'swap'         shift, and enter state 41
	'while'        shift, and enter state 42
	L_Ident        shift, and enter state 18

	Ident          goto state 19
	Type           goto state 20
	FType          goto state 21
	VarIdent       goto state 22
	ArrIdent       goto state 23
	DictIdent      goto state 24
	Instr1         goto state 25
	Instr          goto state 165

State 145

	Instr1 -> DictIdent '[' . IExpr ']' 'set' '(' IExpr ')'    (rule 98)

	'('            shift, and enter state 82
	'++'           shift, and enter state 67
	'--'           shift, and enter state 68
	L_Ident        shift, and enter state 18
	L_integ        shift, and enter state 72

	Ident          goto state 52
	Integer        goto state 53
	VarIdent       goto state 77
	ArrIdent       goto state 78
	DictIdent      goto state 79
	FuncIdent      goto state 80
	IExpr          goto state 164
	IExpr1         goto state 60
	IExpr2         goto state 61

State 146

	Instr1 -> ArrIdent '[' . IExpr ']' '=' '(' IExpr ')'    (rule 96)

	'('            shift, and enter state 82
	'++'           shift, and enter state 67
	'--'           shift, and enter state 68
	L_Ident        shift, and enter state 18
	L_integ        shift, and enter state 72

	Ident          goto state 52
	Integer        goto state 53
	VarIdent       goto state 77
	ArrIdent       goto state 78
	DictIdent      goto state 79
	FuncIdent      goto state 80
	IExpr          goto state 163
	IExpr1         goto state 60
	IExpr2         goto state 61

State 147

	Instr1 -> VarIdent '%=' . IExpr                     (rule 105)

	'('            shift, and enter state 82
	'++'           shift, and enter state 67
	'--'           shift, and enter state 68
	L_Ident        shift, and enter state 18
	L_integ        shift, and enter state 72

	Ident          goto state 52
	Integer        goto state 53
	VarIdent       goto state 77
	ArrIdent       goto state 78
	DictIdent      goto state 79
	FuncIdent      goto state 80
	IExpr          goto state 162
	IExpr1         goto state 60
	IExpr2         goto state 61

State 148

	Instr1 -> VarIdent '*=' . IExpr                     (rule 103)

	'('            shift, and enter state 82
	'++'           shift, and enter state 67
	'--'           shift, and enter state 68
	L_Ident        shift, and enter state 18
	L_integ        shift, and enter state 72

	Ident          goto state 52
	Integer        goto state 53
	VarIdent       goto state 77
	ArrIdent       goto state 78
	DictIdent      goto state 79
	FuncIdent      goto state 80
	IExpr          goto state 161
	IExpr1         goto state 60
	IExpr2         goto state 61

State 149

	Instr1 -> VarIdent '+=' . IExpr                     (rule 101)

	'('            shift, and enter state 82
	'++'           shift, and enter state 67
	'--'           shift, and enter state 68
	L_Ident        shift, and enter state 18
	L_integ        shift, and enter state 72

	Ident          goto state 52
	Integer        goto state 53
	VarIdent       goto state 77
	ArrIdent       goto state 78
	DictIdent      goto state 79
	FuncIdent      goto state 80
	IExpr          goto state 160
	IExpr1         goto state 60
	IExpr2         goto state 61

State 150

	Instr1 -> VarIdent '-=' . IExpr                     (rule 102)

	'('            shift, and enter state 82
	'++'           shift, and enter state 67
	'--'           shift, and enter state 68
	L_Ident        shift, and enter state 18
	L_integ        shift, and enter state 72

	Ident          goto state 52
	Integer        goto state 53
	VarIdent       goto state 77
	ArrIdent       goto state 78
	DictIdent      goto state 79
	FuncIdent      goto state 80
	IExpr          goto state 159
	IExpr1         goto state 60
	IExpr2         goto state 61

State 151

	Instr1 -> VarIdent '/=' . IExpr                     (rule 104)

	'('            shift, and enter state 82
	'++'           shift, and enter state 67
	'--'           shift, and enter state 68
	L_Ident        shift, and enter state 18
	L_integ        shift, and enter state 72

	Ident          goto state 52
	Integer        goto state 53
	VarIdent       goto state 77
	ArrIdent       goto state 78
	DictIdent      goto state 79
	FuncIdent      goto state 80
	IExpr          goto state 158
	IExpr1         goto state 60
	IExpr2         goto state 61

State 152

	Instr1 -> VarIdent '=' . IExpr                      (rule 100)

	'('            shift, and enter state 82
	'++'           shift, and enter state 67
	'--'           shift, and enter state 68
	L_Ident        shift, and enter state 18
	L_integ        shift, and enter state 72

	Ident          goto state 52
	Integer        goto state 53
	VarIdent       goto state 77
	ArrIdent       goto state 78
	DictIdent      goto state 79
	FuncIdent      goto state 80
	IExpr          goto state 157
	IExpr1         goto state 60
	IExpr2         goto state 61

State 153

	Instr1 -> FType FuncIdent . '(' Params ')' '{' Instr '}'    (rule 99)

	'('            shift, and enter state 156


State 154

	Instr1 -> Type VarIdent . '=' Expr                  (rule 93)

	'='            shift, and enter state 155


State 155

	Instr1 -> Type VarIdent '=' . Expr                  (rule 93)

	'!'            shift, and enter state 65
	'('            shift, and enter state 66
	'++'           shift, and enter state 67
	'--'           shift, and enter state 68
	'false'        shift, and enter state 69
	'true'         shift, and enter state 71
	L_Ident        shift, and enter state 18
	L_integ        shift, and enter state 72

	Ident          goto state 52
	Integer        goto state 53
	VarIdent       goto state 54
	ArrIdent       goto state 55
	DictIdent      goto state 56
	FuncIdent      goto state 57
	Expr           goto state 240
	IExpr          goto state 59
	IExpr1         goto state 60
	IExpr2         goto state 61
	BExpr1         goto state 62
	BExpr          goto state 63

State 156

	Instr1 -> FType FuncIdent '(' . Params ')' '{' Instr '}'    (rule 99)

	'BoolFunc'     shift, and enter state 29
	'IntFunc'      shift, and enter state 32
	'none'         shift, and enter state 50
	L_Ident        shift, and enter state 18

	Ident          goto state 44
	FType          goto state 45
	VarIdent       goto state 46
	FuncIdent      goto state 47
	Lambda         goto state 48
	Params         goto state 239

State 157

	IExpr -> IExpr . '+' IExpr1                         (rule 29)
	IExpr -> IExpr . '-' IExpr1                         (rule 30)
	Instr1 -> VarIdent '=' IExpr .                      (rule 100)

	'+'            shift, and enter state 96
	'-'            shift, and enter state 97
	';'            reduce using rule 100
	'}'            reduce using rule 100
	%eof           reduce using rule 100


State 158

	IExpr -> IExpr . '+' IExpr1                         (rule 29)
	IExpr -> IExpr . '-' IExpr1                         (rule 30)
	Instr1 -> VarIdent '/=' IExpr .                     (rule 104)

	'+'            shift, and enter state 96
	'-'            shift, and enter state 97
	';'            reduce using rule 104
	'}'            reduce using rule 104
	%eof           reduce using rule 104


State 159

	IExpr -> IExpr . '+' IExpr1                         (rule 29)
	IExpr -> IExpr . '-' IExpr1                         (rule 30)
	Instr1 -> VarIdent '-=' IExpr .                     (rule 102)

	'+'            shift, and enter state 96
	'-'            shift, and enter state 97
	';'            reduce using rule 102
	'}'            reduce using rule 102
	%eof           reduce using rule 102


State 160

	IExpr -> IExpr . '+' IExpr1                         (rule 29)
	IExpr -> IExpr . '-' IExpr1                         (rule 30)
	Instr1 -> VarIdent '+=' IExpr .                     (rule 101)

	'+'            shift, and enter state 96
	'-'            shift, and enter state 97
	';'            reduce using rule 101
	'}'            reduce using rule 101
	%eof           reduce using rule 101


State 161

	IExpr -> IExpr . '+' IExpr1                         (rule 29)
	IExpr -> IExpr . '-' IExpr1                         (rule 30)
	Instr1 -> VarIdent '*=' IExpr .                     (rule 103)

	'+'            shift, and enter state 96
	'-'            shift, and enter state 97
	';'            reduce using rule 103
	'}'            reduce using rule 103
	%eof           reduce using rule 103


State 162

	IExpr -> IExpr . '+' IExpr1                         (rule 29)
	IExpr -> IExpr . '-' IExpr1                         (rule 30)
	Instr1 -> VarIdent '%=' IExpr .                     (rule 105)

	'+'            shift, and enter state 96
	'-'            shift, and enter state 97
	';'            reduce using rule 105
	'}'            reduce using rule 105
	%eof           reduce using rule 105


State 163

	IExpr -> IExpr . '+' IExpr1                         (rule 29)
	IExpr -> IExpr . '-' IExpr1                         (rule 30)
	Instr1 -> ArrIdent '[' IExpr . ']' '=' '(' IExpr ')'    (rule 96)

	'+'            shift, and enter state 96
	'-'            shift, and enter state 97
	']'            shift, and enter state 238


State 164

	IExpr -> IExpr . '+' IExpr1                         (rule 29)
	IExpr -> IExpr . '-' IExpr1                         (rule 30)
	Instr1 -> DictIdent '[' IExpr . ']' 'set' '(' IExpr ')'    (rule 98)

	'+'            shift, and enter state 96
	'-'            shift, and enter state 97
	']'            shift, and enter state 237


State 165

	Instr -> Instr1 ';' Instr .                         (rule 110)

	'}'            reduce using rule 110
	%eof           reduce using rule 110


State 166

	Instr1 -> 'Array' Type ArrIdent . '[' IExpr ']' '(' Expr ')'    (rule 94)
	Instr1 -> 'Array' Type ArrIdent . '[' IExpr ']'     (rule 95)

	'['            shift, and enter state 236


State 167

	Instr1 -> 'Dict' Type DictIdent .                   (rule 97)

	';'            reduce using rule 97
	'}'            reduce using rule 97
	%eof           reduce using rule 97


State 168

	IExpr -> IExpr . '+' IExpr1                         (rule 29)
	IExpr -> IExpr . '-' IExpr1                         (rule 30)
	Instr1 -> 'break' '(' IExpr . ')'                   (rule 89)

	')'            shift, and enter state 235
	'+'            shift, and enter state 96
	'-'            shift, and enter state 97


State 169

	Instr1 -> 'continue' 'outer' '(' . IExpr ')'        (rule 91)

	'('            shift, and enter state 82
	'++'           shift, and enter state 67
	'--'           shift, and enter state 68
	L_Ident        shift, and enter state 18
	L_integ        shift, and enter state 72

	Ident          goto state 52
	Integer        goto state 53
	VarIdent       goto state 77
	ArrIdent       goto state 78
	DictIdent      goto state 79
	FuncIdent      goto state 80
	IExpr          goto state 234
	IExpr1         goto state 60
	IExpr2         goto state 61

State 170

	Instr1 -> 'debug' 'reading' 'disable' . VarIdent    (rule 109)

	L_Ident        shift, and enter state 18

	Ident          goto state 92
	VarIdent       goto state 233

State 171

	Instr1 -> 'debug' 'reading' 'enable' . VarIdent     (rule 108)

	L_Ident        shift, and enter state 18

	Ident          goto state 92
	VarIdent       goto state 232

State 172

	Instr1 -> 'debug' 'assignment' 'disable' . VarIdent    (rule 107)

	L_Ident        shift, and enter state 18

	Ident          goto state 92
	VarIdent       goto state 231

State 173

	Instr1 -> 'debug' 'assignment' 'enable' . VarIdent    (rule 106)

	L_Ident        shift, and enter state 18

	Ident          goto state 92
	VarIdent       goto state 230

State 174

	Instr1 -> 'for' '(' VarIdent . '=' IExpr 'to' IExpr ')' '{' Instr '}'    (rule 85)

	'='            shift, and enter state 229


State 175

	BExpr1 -> BExpr . '==' BExpr                        (rule 56)
	BExpr1 -> BExpr . '!=' BExpr                        (rule 57)
	BExpr1 -> BExpr . 'or' BExpr1                       (rule 59)
	BExpr1 -> BExpr . 'and' BExpr1                      (rule 60)
	BExpr1 -> BExpr . 'xor' BExpr1                      (rule 61)
	Instr1 -> 'if' '(' BExpr . ')' '{' Instr '}' 'else' '{' Instr '}'    (rule 82)
	Instr1 -> 'if' '(' BExpr . ')' '{' Instr '}'        (rule 83)

	'!='           shift, and enter state 107
	')'            shift, and enter state 228
	'=='           shift, and enter state 108
	'and'          shift, and enter state 109
	'or'           shift, and enter state 110
	'xor'          shift, and enter state 111


State 176

	IExpr -> IExpr . '+' IExpr1                         (rule 29)
	IExpr -> IExpr . '-' IExpr1                         (rule 30)
	Instr1 -> 'print' '(' IExpr . ')'                   (rule 87)

	')'            shift, and enter state 227
	'+'            shift, and enter state 96
	'-'            shift, and enter state 97


State 177

	IExpr -> IExpr . '+' IExpr1                         (rule 29)
	IExpr -> IExpr . '-' IExpr1                         (rule 30)
	Instr1 -> 'return' '(' IExpr . ')'                  (rule 86)

	')'            shift, and enter state 226
	'+'            shift, and enter state 96
	'-'            shift, and enter state 97


State 178

	Instr1 -> 'swap' '(' VarIdent . ',' VarIdent ')'    (rule 88)

	','            shift, and enter state 225


State 179

	BExpr1 -> BExpr . '==' BExpr                        (rule 56)
	BExpr1 -> BExpr . '!=' BExpr                        (rule 57)
	BExpr1 -> BExpr . 'or' BExpr1                       (rule 59)
	BExpr1 -> BExpr . 'and' BExpr1                      (rule 60)
	BExpr1 -> BExpr . 'xor' BExpr1                      (rule 61)
	Instr1 -> 'while' '(' BExpr . ')' '{' Instr '}'     (rule 84)

	'!='           shift, and enter state 107
	')'            shift, and enter state 224
	'=='           shift, and enter state 108
	'and'          shift, and enter state 109
	'or'           shift, and enter state 110
	'xor'          shift, and enter state 111


State 180

	Lambda -> FType 'lambda' '(' . Params ')' '->' '{' Instr '}'    (rule 73)

	'BoolFunc'     shift, and enter state 29
	'IntFunc'      shift, and enter state 32
	'none'         shift, and enter state 50
	L_Ident        shift, and enter state 18

	Ident          goto state 44
	FType          goto state 45
	VarIdent       goto state 46
	FuncIdent      goto state 47
	Lambda         goto state 48
	Params         goto state 223

State 181

	Params -> VarIdent ':' Type .                       (rule 75)
	Params -> VarIdent ':' Type . ',' Params            (rule 78)

	')'            reduce using rule 75
	','            shift, and enter state 222
	%eof           reduce using rule 75


State 182

	Params -> FuncIdent ':' FType .                     (rule 76)
	Params -> FuncIdent ':' FType . ',' Params          (rule 79)

	')'            reduce using rule 76
	','            shift, and enter state 221
	%eof           reduce using rule 76


State 183

	Params -> Lambda ',' Params .                       (rule 80)

	')'            reduce using rule 80
	%eof           reduce using rule 80


State 184

	IExpr -> IExpr . '+' IExpr1                         (rule 29)
	IExpr -> IExpr . '-' IExpr1                         (rule 30)
	IExpr2 -> ArrIdent '[' IExpr . ']'                  (rule 42)
	BExpr1 -> ArrIdent '[' IExpr . ']'                  (rule 62)

	'+'            shift, and enter state 96
	'-'            shift, and enter state 97
	']'            shift, and enter state 220


State 185

	BExpr1 -> DictIdent 'has' 'key' . '[' IExpr ']'     (rule 65)
	BExpr1 -> DictIdent 'has' 'key' . '[' BExpr ']'     (rule 66)

	'['            shift, and enter state 219


State 186

	IExpr -> IExpr . '+' IExpr1                         (rule 29)
	IExpr -> IExpr . '-' IExpr1                         (rule 30)
	IExpr2 -> DictIdent '[' IExpr . ']'                 (rule 43)
	BExpr1 -> IExpr . '==' IExpr                        (rule 50)
	BExpr1 -> IExpr . '<=' IExpr                        (rule 51)
	BExpr1 -> IExpr . '>=' IExpr                        (rule 52)
	BExpr1 -> IExpr . '<' IExpr                         (rule 53)
	BExpr1 -> IExpr . '>' IExpr                         (rule 54)
	BExpr1 -> IExpr . '!=' IExpr                        (rule 55)
	BExpr1 -> DictIdent '[' IExpr . ']'                 (rule 63)

	'!='           shift, and enter state 112
	'+'            shift, and enter state 96
	'-'            shift, and enter state 97
	'<'            shift, and enter state 113
	'<='           shift, and enter state 114
	'=='           shift, and enter state 115
	'>'            shift, and enter state 116
	'>='           shift, and enter state 117
	']'            shift, and enter state 218


State 187

	IExpr2 -> DictIdent '[' BExpr . ']'                 (rule 44)
	BExpr1 -> BExpr . '==' BExpr                        (rule 56)
	BExpr1 -> BExpr . '!=' BExpr                        (rule 57)
	BExpr1 -> BExpr . 'or' BExpr1                       (rule 59)
	BExpr1 -> BExpr . 'and' BExpr1                      (rule 60)
	BExpr1 -> BExpr . 'xor' BExpr1                      (rule 61)
	BExpr1 -> DictIdent '[' BExpr . ']'                 (rule 64)

	'!='           shift, and enter state 107
	'=='           shift, and enter state 108
	']'            shift, and enter state 217
	'and'          shift, and enter state 109
	'or'           shift, and enter state 110
	'xor'          shift, and enter state 111


State 188

	IExpr2 -> FuncIdent '(' Args . ')'                  (rule 45)
	BExpr1 -> FuncIdent '(' Args . ')'                  (rule 67)

	')'            shift, and enter state 216


State 189

	Args -> Expr ',' Args .                             (rule 72)

	')'            reduce using rule 72
	%eof           reduce using rule 72


State 190

	BExpr1 -> '(' BExpr ')' .                           (rule 68)

	'!='           reduce using rule 68
	')'            reduce using rule 68
	','            reduce using rule 68
	';'            reduce using rule 68
	'=='           reduce using rule 68
	']'            reduce using rule 68
	'and'          reduce using rule 68
	'or'           reduce using rule 68
	'xor'          reduce using rule 68
	'}'            reduce using rule 68
	%eof           reduce using rule 68


State 191

	IExpr2 -> '(' IExpr ')' .                           (rule 46)

	'!='           reduce using rule 46
	'%'            reduce using rule 46
	')'            reduce using rule 46
	'*'            reduce using rule 46
	'+'            reduce using rule 46
	','            reduce using rule 46
	'-'            reduce using rule 46
	'/'            reduce using rule 46
	';'            reduce using rule 46
	'<'            reduce using rule 46
	'<='           reduce using rule 46
	'=='           reduce using rule 46
	'>'            reduce using rule 46
	'>='           reduce using rule 46
	']'            reduce using rule 46
	'and'          reduce using rule 46
	'or'           reduce using rule 46
	'to'           reduce using rule 46
	'xor'          reduce using rule 46
	'}'            reduce using rule 46
	%eof           reduce using rule 46


State 192

	IExpr -> IExpr . '+' IExpr1                         (rule 29)
	IExpr -> IExpr . '-' IExpr1                         (rule 30)
	BExpr1 -> IExpr '>=' IExpr .                        (rule 52)

	'!='           reduce using rule 52
	')'            reduce using rule 52
	'+'            shift, and enter state 96
	','            reduce using rule 52
	'-'            shift, and enter state 97
	';'            reduce using rule 52
	'=='           reduce using rule 52
	']'            reduce using rule 52
	'and'          reduce using rule 52
	'or'           reduce using rule 52
	'xor'          reduce using rule 52
	'}'            reduce using rule 52
	%eof           reduce using rule 52


State 193

	IExpr -> IExpr . '+' IExpr1                         (rule 29)
	IExpr -> IExpr . '-' IExpr1                         (rule 30)
	BExpr1 -> IExpr '>' IExpr .                         (rule 54)

	'!='           reduce using rule 54
	')'            reduce using rule 54
	'+'            shift, and enter state 96
	','            reduce using rule 54
	'-'            shift, and enter state 97
	';'            reduce using rule 54
	'=='           reduce using rule 54
	']'            reduce using rule 54
	'and'          reduce using rule 54
	'or'           reduce using rule 54
	'xor'          reduce using rule 54
	'}'            reduce using rule 54
	%eof           reduce using rule 54


State 194

	IExpr -> IExpr . '+' IExpr1                         (rule 29)
	IExpr -> IExpr . '-' IExpr1                         (rule 30)
	BExpr1 -> IExpr '==' IExpr .                        (rule 50)

	'!='           reduce using rule 50
	')'            reduce using rule 50
	'+'            shift, and enter state 96
	','            reduce using rule 50
	'-'            shift, and enter state 97
	';'            reduce using rule 50
	'=='           reduce using rule 50
	']'            reduce using rule 50
	'and'          reduce using rule 50
	'or'           reduce using rule 50
	'xor'          reduce using rule 50
	'}'            reduce using rule 50
	%eof           reduce using rule 50


State 195

	IExpr -> IExpr . '+' IExpr1                         (rule 29)
	IExpr -> IExpr . '-' IExpr1                         (rule 30)
	BExpr1 -> IExpr '<=' IExpr .                        (rule 51)

	'!='           reduce using rule 51
	')'            reduce using rule 51
	'+'            shift, and enter state 96
	','            reduce using rule 51
	'-'            shift, and enter state 97
	';'            reduce using rule 51
	'=='           reduce using rule 51
	']'            reduce using rule 51
	'and'          reduce using rule 51
	'or'           reduce using rule 51
	'xor'          reduce using rule 51
	'}'            reduce using rule 51
	%eof           reduce using rule 51


State 196

	IExpr -> IExpr . '+' IExpr1                         (rule 29)
	IExpr -> IExpr . '-' IExpr1                         (rule 30)
	BExpr1 -> IExpr '<' IExpr .                         (rule 53)

	'!='           reduce using rule 53
	')'            reduce using rule 53
	'+'            shift, and enter state 96
	','            reduce using rule 53
	'-'            shift, and enter state 97
	';'            reduce using rule 53
	'=='           reduce using rule 53
	']'            reduce using rule 53
	'and'          reduce using rule 53
	'or'           reduce using rule 53
	'xor'          reduce using rule 53
	'}'            reduce using rule 53
	%eof           reduce using rule 53


State 197

	IExpr -> IExpr . '+' IExpr1                         (rule 29)
	IExpr -> IExpr . '-' IExpr1                         (rule 30)
	BExpr1 -> IExpr '!=' IExpr .                        (rule 55)

	'!='           reduce using rule 55
	')'            reduce using rule 55
	'+'            shift, and enter state 96
	','            reduce using rule 55
	'-'            shift, and enter state 97
	';'            reduce using rule 55
	'=='           reduce using rule 55
	']'            reduce using rule 55
	'and'          reduce using rule 55
	'or'           reduce using rule 55
	'xor'          reduce using rule 55
	'}'            reduce using rule 55
	%eof           reduce using rule 55


State 198

	BExpr1 -> BExpr 'xor' BExpr1 .                      (rule 61)
	BExpr -> BExpr1 .                                   (rule 69)

	'!='           reduce using rule 69
			(reduce using rule 61)

	')'            reduce using rule 61
	','            reduce using rule 61
	';'            reduce using rule 61
	'=='           reduce using rule 69
			(reduce using rule 61)

	']'            reduce using rule 61
	'and'          reduce using rule 69
			(reduce using rule 61)

	'or'           reduce using rule 69
			(reduce using rule 61)

	'xor'          reduce using rule 69
			(reduce using rule 61)

	'}'            reduce using rule 61
	%eof           reduce using rule 61


State 199

	BExpr1 -> BExpr 'or' BExpr1 .                       (rule 59)
	BExpr -> BExpr1 .                                   (rule 69)

	'!='           reduce using rule 69
			(reduce using rule 59)

	')'            reduce using rule 59
	','            reduce using rule 59
	';'            reduce using rule 59
	'=='           reduce using rule 69
			(reduce using rule 59)

	']'            reduce using rule 59
	'and'          reduce using rule 69
			(reduce using rule 59)

	'or'           reduce using rule 69
			(reduce using rule 59)

	'xor'          reduce using rule 69
			(reduce using rule 59)

	'}'            reduce using rule 59
	%eof           reduce using rule 59


State 200

	BExpr1 -> BExpr 'and' BExpr1 .                      (rule 60)
	BExpr -> BExpr1 .                                   (rule 69)

	'!='           reduce using rule 69
			(reduce using rule 60)

	')'            reduce using rule 60
	','            reduce using rule 60
	';'            reduce using rule 60
	'=='           reduce using rule 69
			(reduce using rule 60)

	']'            reduce using rule 60
	'and'          reduce using rule 69
			(reduce using rule 60)

	'or'           reduce using rule 69
			(reduce using rule 60)

	'xor'          reduce using rule 69
			(reduce using rule 60)

	'}'            reduce using rule 60
	%eof           reduce using rule 60


State 201

	BExpr1 -> BExpr . '==' BExpr                        (rule 56)
	BExpr1 -> BExpr '==' BExpr .                        (rule 56)
	BExpr1 -> BExpr . '!=' BExpr                        (rule 57)
	BExpr1 -> BExpr . 'or' BExpr1                       (rule 59)
	BExpr1 -> BExpr . 'and' BExpr1                      (rule 60)
	BExpr1 -> BExpr . 'xor' BExpr1                      (rule 61)

	'!='           shift, and enter state 107
			(reduce using rule 56)

	')'            reduce using rule 56
	','            reduce using rule 56
	';'            reduce using rule 56
	'=='           shift, and enter state 108
			(reduce using rule 56)

	']'            reduce using rule 56
	'and'          shift, and enter state 109
			(reduce using rule 56)

	'or'           shift, and enter state 110
			(reduce using rule 56)

	'xor'          shift, and enter state 111
			(reduce using rule 56)

	'}'            reduce using rule 56
	%eof           reduce using rule 56


State 202

	BExpr1 -> BExpr . '==' BExpr                        (rule 56)
	BExpr1 -> BExpr . '!=' BExpr                        (rule 57)
	BExpr1 -> BExpr '!=' BExpr .                        (rule 57)
	BExpr1 -> BExpr . 'or' BExpr1                       (rule 59)
	BExpr1 -> BExpr . 'and' BExpr1                      (rule 60)
	BExpr1 -> BExpr . 'xor' BExpr1                      (rule 61)

	'!='           shift, and enter state 107
			(reduce using rule 57)

	')'            reduce using rule 57
	','            reduce using rule 57
	';'            reduce using rule 57
	'=='           shift, and enter state 108
			(reduce using rule 57)

	']'            reduce using rule 57
	'and'          shift, and enter state 109
			(reduce using rule 57)

	'or'           shift, and enter state 110
			(reduce using rule 57)

	'xor'          shift, and enter state 111
			(reduce using rule 57)

	'}'            reduce using rule 57
	%eof           reduce using rule 57


State 203

	IExpr -> IExpr . '+' IExpr1                         (rule 29)
	IExpr -> IExpr . '-' IExpr1                         (rule 30)
	IExpr2 -> ArrIdent '[' IExpr . ']'                  (rule 42)

	'+'            shift, and enter state 96
	'-'            shift, and enter state 97
	']'            shift, and enter state 215


State 204

	IExpr -> IExpr . '+' IExpr1                         (rule 29)
	IExpr -> IExpr . '-' IExpr1                         (rule 30)
	IExpr2 -> DictIdent '[' IExpr . ']'                 (rule 43)
	BExpr1 -> IExpr . '==' IExpr                        (rule 50)
	BExpr1 -> IExpr . '<=' IExpr                        (rule 51)
	BExpr1 -> IExpr . '>=' IExpr                        (rule 52)
	BExpr1 -> IExpr . '<' IExpr                         (rule 53)
	BExpr1 -> IExpr . '>' IExpr                         (rule 54)
	BExpr1 -> IExpr . '!=' IExpr                        (rule 55)

	'!='           shift, and enter state 112
	'+'            shift, and enter state 96
	'-'            shift, and enter state 97
	'<'            shift, and enter state 113
	'<='           shift, and enter state 114
	'=='           shift, and enter state 115
	'>'            shift, and enter state 116
	'>='           shift, and enter state 117
	']'            shift, and enter state 214


State 205

	IExpr2 -> DictIdent '[' BExpr . ']'                 (rule 44)
	BExpr1 -> BExpr . '==' BExpr                        (rule 56)
	BExpr1 -> BExpr . '!=' BExpr                        (rule 57)
	BExpr1 -> BExpr . 'or' BExpr1                       (rule 59)
	BExpr1 -> BExpr . 'and' BExpr1                      (rule 60)
	BExpr1 -> BExpr . 'xor' BExpr1                      (rule 61)

	'!='           shift, and enter state 107
	'=='           shift, and enter state 108
	']'            shift, and enter state 213
	'and'          shift, and enter state 109
	'or'           shift, and enter state 110
	'xor'          shift, and enter state 111


State 206

	IExpr2 -> FuncIdent '(' Args . ')'                  (rule 45)

	')'            shift, and enter state 212


State 207

	IExpr1 -> IExpr1 '/' IExpr2 .                       (rule 32)

	'!='           reduce using rule 32
	'%'            reduce using rule 32
	')'            reduce using rule 32
	'*'            reduce using rule 32
	'+'            reduce using rule 32
	','            reduce using rule 32
	'-'            reduce using rule 32
	'/'            reduce using rule 32
	';'            reduce using rule 32
	'<'            reduce using rule 32
	'<='           reduce using rule 32
	'=='           reduce using rule 32
	'>'            reduce using rule 32
	'>='           reduce using rule 32
	']'            reduce using rule 32
	'and'          reduce using rule 32
	'or'           reduce using rule 32
	'to'           reduce using rule 32
	'xor'          reduce using rule 32
	'}'            reduce using rule 32
	%eof           reduce using rule 32


State 208

	IExpr1 -> IExpr1 '*' IExpr2 .                       (rule 33)

	'!='           reduce using rule 33
	'%'            reduce using rule 33
	')'            reduce using rule 33
	'*'            reduce using rule 33
	'+'            reduce using rule 33
	','            reduce using rule 33
	'-'            reduce using rule 33
	'/'            reduce using rule 33
	';'            reduce using rule 33
	'<'            reduce using rule 33
	'<='           reduce using rule 33
	'=='           reduce using rule 33
	'>'            reduce using rule 33
	'>='           reduce using rule 33
	']'            reduce using rule 33
	'and'          reduce using rule 33
	'or'           reduce using rule 33
	'to'           reduce using rule 33
	'xor'          reduce using rule 33
	'}'            reduce using rule 33
	%eof           reduce using rule 33


State 209

	IExpr1 -> IExpr1 '%' IExpr2 .                       (rule 34)

	'!='           reduce using rule 34
	'%'            reduce using rule 34
	')'            reduce using rule 34
	'*'            reduce using rule 34
	'+'            reduce using rule 34
	','            reduce using rule 34
	'-'            reduce using rule 34
	'/'            reduce using rule 34
	';'            reduce using rule 34
	'<'            reduce using rule 34
	'<='           reduce using rule 34
	'=='           reduce using rule 34
	'>'            reduce using rule 34
	'>='           reduce using rule 34
	']'            reduce using rule 34
	'and'          reduce using rule 34
	'or'           reduce using rule 34
	'to'           reduce using rule 34
	'xor'          reduce using rule 34
	'}'            reduce using rule 34
	%eof           reduce using rule 34


State 210

	IExpr -> IExpr '-' IExpr1 .                         (rule 30)
	IExpr1 -> IExpr1 . '/' IExpr2                       (rule 32)
	IExpr1 -> IExpr1 . '*' IExpr2                       (rule 33)
	IExpr1 -> IExpr1 . '%' IExpr2                       (rule 34)

	'!='           reduce using rule 30
	'%'            shift, and enter state 98
	')'            reduce using rule 30
	'*'            shift, and enter state 99
	'+'            reduce using rule 30
	','            reduce using rule 30
	'-'            reduce using rule 30
	'/'            shift, and enter state 100
	';'            reduce using rule 30
	'<'            reduce using rule 30
	'<='           reduce using rule 30
	'=='           reduce using rule 30
	'>'            reduce using rule 30
	'>='           reduce using rule 30
	']'            reduce using rule 30
	'and'          reduce using rule 30
	'or'           reduce using rule 30
	'to'           reduce using rule 30
	'xor'          reduce using rule 30
	'}'            reduce using rule 30
	%eof           reduce using rule 30


State 211

	IExpr -> IExpr '+' IExpr1 .                         (rule 29)
	IExpr1 -> IExpr1 . '/' IExpr2                       (rule 32)
	IExpr1 -> IExpr1 . '*' IExpr2                       (rule 33)
	IExpr1 -> IExpr1 . '%' IExpr2                       (rule 34)

	'!='           reduce using rule 29
	'%'            shift, and enter state 98
	')'            reduce using rule 29
	'*'            shift, and enter state 99
	'+'            reduce using rule 29
	','            reduce using rule 29
	'-'            reduce using rule 29
	'/'            shift, and enter state 100
	';'            reduce using rule 29
	'<'            reduce using rule 29
	'<='           reduce using rule 29
	'=='           reduce using rule 29
	'>'            reduce using rule 29
	'>='           reduce using rule 29
	']'            reduce using rule 29
	'and'          reduce using rule 29
	'or'           reduce using rule 29
	'to'           reduce using rule 29
	'xor'          reduce using rule 29
	'}'            reduce using rule 29
	%eof           reduce using rule 29


State 212

	IExpr2 -> FuncIdent '(' Args ')' .                  (rule 45)

	'!='           reduce using rule 45
	'%'            reduce using rule 45
	')'            reduce using rule 45
	'*'            reduce using rule 45
	'+'            reduce using rule 45
	','            reduce using rule 45
	'-'            reduce using rule 45
	'/'            reduce using rule 45
	';'            reduce using rule 45
	'<'            reduce using rule 45
	'<='           reduce using rule 45
	'=='           reduce using rule 45
	'>'            reduce using rule 45
	'>='           reduce using rule 45
	']'            reduce using rule 45
	'and'          reduce using rule 45
	'or'           reduce using rule 45
	'to'           reduce using rule 45
	'xor'          reduce using rule 45
	'}'            reduce using rule 45
	%eof           reduce using rule 45


State 213

	IExpr2 -> DictIdent '[' BExpr ']' .                 (rule 44)

	'!='           reduce using rule 44
	'%'            reduce using rule 44
	')'            reduce using rule 44
	'*'            reduce using rule 44
	'+'            reduce using rule 44
	','            reduce using rule 44
	'-'            reduce using rule 44
	'/'            reduce using rule 44
	';'            reduce using rule 44
	'<'            reduce using rule 44
	'<='           reduce using rule 44
	'=='           reduce using rule 44
	'>'            reduce using rule 44
	'>='           reduce using rule 44
	']'            reduce using rule 44
	'and'          reduce using rule 44
	'or'           reduce using rule 44
	'to'           reduce using rule 44
	'xor'          reduce using rule 44
	'}'            reduce using rule 44
	%eof           reduce using rule 44


State 214

	IExpr2 -> DictIdent '[' IExpr ']' .                 (rule 43)

	'!='           reduce using rule 43
	'%'            reduce using rule 43
	')'            reduce using rule 43
	'*'            reduce using rule 43
	'+'            reduce using rule 43
	','            reduce using rule 43
	'-'            reduce using rule 43
	'/'            reduce using rule 43
	';'            reduce using rule 43
	'<'            reduce using rule 43
	'<='           reduce using rule 43
	'=='           reduce using rule 43
	'>'            reduce using rule 43
	'>='           reduce using rule 43
	']'            reduce using rule 43
	'and'          reduce using rule 43
	'or'           reduce using rule 43
	'to'           reduce using rule 43
	'xor'          reduce using rule 43
	'}'            reduce using rule 43
	%eof           reduce using rule 43


State 215

	IExpr2 -> ArrIdent '[' IExpr ']' .                  (rule 42)

	'!='           reduce using rule 42
	'%'            reduce using rule 42
	')'            reduce using rule 42
	'*'            reduce using rule 42
	'+'            reduce using rule 42
	','            reduce using rule 42
	'-'            reduce using rule 42
	'/'            reduce using rule 42
	';'            reduce using rule 42
	'<'            reduce using rule 42
	'<='           reduce using rule 42
	'=='           reduce using rule 42
	'>'            reduce using rule 42
	'>='           reduce using rule 42
	']'            reduce using rule 42
	'and'          reduce using rule 42
	'or'           reduce using rule 42
	'to'           reduce using rule 42
	'xor'          reduce using rule 42
	'}'            reduce using rule 42
	%eof           reduce using rule 42


State 216

	IExpr2 -> FuncIdent '(' Args ')' .                  (rule 45)
	BExpr1 -> FuncIdent '(' Args ')' .                  (rule 67)

	'!='           reduce using rule 67
			(reduce using rule 45)

	'%'            reduce using rule 45
	')'            reduce using rule 67
			(reduce using rule 45)

	'*'            reduce using rule 45
	'+'            reduce using rule 45
	','            reduce using rule 67
			(reduce using rule 45)

	'-'            reduce using rule 45
	'/'            reduce using rule 45
	';'            reduce using rule 67
			(reduce using rule 45)

	'<'            reduce using rule 45
	'<='           reduce using rule 45
	'=='           reduce using rule 67
			(reduce using rule 45)

	'>'            reduce using rule 45
	'>='           reduce using rule 45
	']'            reduce using rule 67
			(reduce using rule 45)

	'and'          reduce using rule 67
	'or'           reduce using rule 67
	'xor'          reduce using rule 67
	'}'            reduce using rule 67
			(reduce using rule 45)

	%eof           reduce using rule 67
			(reduce using rule 45)



State 217

	IExpr2 -> DictIdent '[' BExpr ']' .                 (rule 44)
	BExpr1 -> DictIdent '[' BExpr ']' .                 (rule 64)

	'!='           reduce using rule 64
			(reduce using rule 44)

	'%'            reduce using rule 44
	')'            reduce using rule 64
			(reduce using rule 44)

	'*'            reduce using rule 44
	'+'            reduce using rule 44
	','            reduce using rule 64
			(reduce using rule 44)

	'-'            reduce using rule 44
	'/'            reduce using rule 44
	';'            reduce using rule 64
			(reduce using rule 44)

	'<'            reduce using rule 44
	'<='           reduce using rule 44
	'=='           reduce using rule 64
			(reduce using rule 44)

	'>'            reduce using rule 44
	'>='           reduce using rule 44
	']'            reduce using rule 64
			(reduce using rule 44)

	'and'          reduce using rule 64
	'or'           reduce using rule 64
	'xor'          reduce using rule 64
	'}'            reduce using rule 64
			(reduce using rule 44)

	%eof           reduce using rule 64
			(reduce using rule 44)



State 218

	IExpr2 -> DictIdent '[' IExpr ']' .                 (rule 43)
	BExpr1 -> DictIdent '[' IExpr ']' .                 (rule 63)

	'!='           reduce using rule 63
			(reduce using rule 43)

	'%'            reduce using rule 43
	')'            reduce using rule 63
			(reduce using rule 43)

	'*'            reduce using rule 43
	'+'            reduce using rule 43
	','            reduce using rule 63
			(reduce using rule 43)

	'-'            reduce using rule 43
	'/'            reduce using rule 43
	';'            reduce using rule 63
			(reduce using rule 43)

	'<'            reduce using rule 43
	'<='           reduce using rule 43
	'=='           reduce using rule 63
			(reduce using rule 43)

	'>'            reduce using rule 43
	'>='           reduce using rule 43
	']'            reduce using rule 63
			(reduce using rule 43)

	'and'          reduce using rule 63
	'or'           reduce using rule 63
	'xor'          reduce using rule 63
	'}'            reduce using rule 63
			(reduce using rule 43)

	%eof           reduce using rule 63
			(reduce using rule 43)



State 219

	BExpr1 -> DictIdent 'has' 'key' '[' . IExpr ']'     (rule 65)
	BExpr1 -> DictIdent 'has' 'key' '[' . BExpr ']'     (rule 66)

	'!'            shift, and enter state 65
	'('            shift, and enter state 66
	'++'           shift, and enter state 67
	'--'           shift, and enter state 68
	'false'        shift, and enter state 69
	'true'         shift, and enter state 71
	L_Ident        shift, and enter state 18
	L_integ        shift, and enter state 72

	Ident          goto state 52
	Integer        goto state 53
	VarIdent       goto state 54
	ArrIdent       goto state 55
	DictIdent      goto state 56
	FuncIdent      goto state 57
	IExpr          goto state 253
	IExpr1         goto state 60
	IExpr2         goto state 61
	BExpr1         goto state 62
	BExpr          goto state 254

State 220

	IExpr2 -> ArrIdent '[' IExpr ']' .                  (rule 42)
	BExpr1 -> ArrIdent '[' IExpr ']' .                  (rule 62)

	'!='           reduce using rule 62
			(reduce using rule 42)

	'%'            reduce using rule 42
	')'            reduce using rule 62
			(reduce using rule 42)

	'*'            reduce using rule 42
	'+'            reduce using rule 42
	','            reduce using rule 62
			(reduce using rule 42)

	'-'            reduce using rule 42
	'/'            reduce using rule 42
	';'            reduce using rule 62
			(reduce using rule 42)

	'<'            reduce using rule 42
	'<='           reduce using rule 42
	'=='           reduce using rule 62
			(reduce using rule 42)

	'>'            reduce using rule 42
	'>='           reduce using rule 42
	']'            reduce using rule 62
			(reduce using rule 42)

	'and'          reduce using rule 62
	'or'           reduce using rule 62
	'xor'          reduce using rule 62
	'}'            reduce using rule 62
			(reduce using rule 42)

	%eof           reduce using rule 62
			(reduce using rule 42)



State 221

	Params -> FuncIdent ':' FType ',' . Params          (rule 79)

	'BoolFunc'     shift, and enter state 29
	'IntFunc'      shift, and enter state 32
	'none'         shift, and enter state 50
	L_Ident        shift, and enter state 18

	Ident          goto state 44
	FType          goto state 45
	VarIdent       goto state 46
	FuncIdent      goto state 47
	Lambda         goto state 48
	Params         goto state 252

State 222

	Params -> VarIdent ':' Type ',' . Params            (rule 78)

	'BoolFunc'     shift, and enter state 29
	'IntFunc'      shift, and enter state 32
	'none'         shift, and enter state 50
	L_Ident        shift, and enter state 18

	Ident          goto state 44
	FType          goto state 45
	VarIdent       goto state 46
	FuncIdent      goto state 47
	Lambda         goto state 48
	Params         goto state 251

State 223

	Lambda -> FType 'lambda' '(' Params . ')' '->' '{' Instr '}'    (rule 73)

	')'            shift, and enter state 250


State 224

	Instr1 -> 'while' '(' BExpr ')' . '{' Instr '}'     (rule 84)

	'{'            shift, and enter state 249


State 225

	Instr1 -> 'swap' '(' VarIdent ',' . VarIdent ')'    (rule 88)

	L_Ident        shift, and enter state 18

	Ident          goto state 92
	VarIdent       goto state 248

State 226

	Instr1 -> 'return' '(' IExpr ')' .                  (rule 86)

	';'            reduce using rule 86
	'}'            reduce using rule 86
	%eof           reduce using rule 86


State 227

	Instr1 -> 'print' '(' IExpr ')' .                   (rule 87)

	';'            reduce using rule 87
	'}'            reduce using rule 87
	%eof           reduce using rule 87


State 228

	Instr1 -> 'if' '(' BExpr ')' . '{' Instr '}' 'else' '{' Instr '}'    (rule 82)
	Instr1 -> 'if' '(' BExpr ')' . '{' Instr '}'        (rule 83)

	'{'            shift, and enter state 247


State 229

	Instr1 -> 'for' '(' VarIdent '=' . IExpr 'to' IExpr ')' '{' Instr '}'    (rule 85)

	'('            shift, and enter state 82
	'++'           shift, and enter state 67
	'--'           shift, and enter state 68
	L_Ident        shift, and enter state 18
	L_integ        shift, and enter state 72

	Ident          goto state 52
	Integer        goto state 53
	VarIdent       goto state 77
	ArrIdent       goto state 78
	DictIdent      goto state 79
	FuncIdent      goto state 80
	IExpr          goto state 246
	IExpr1         goto state 60
	IExpr2         goto state 61

State 230

	Instr1 -> 'debug' 'assignment' 'enable' VarIdent .    (rule 106)

	';'            reduce using rule 106
	'}'            reduce using rule 106
	%eof           reduce using rule 106


State 231

	Instr1 -> 'debug' 'assignment' 'disable' VarIdent .    (rule 107)

	';'            reduce using rule 107
	'}'            reduce using rule 107
	%eof           reduce using rule 107


State 232

	Instr1 -> 'debug' 'reading' 'enable' VarIdent .     (rule 108)

	';'            reduce using rule 108
	'}'            reduce using rule 108
	%eof           reduce using rule 108


State 233

	Instr1 -> 'debug' 'reading' 'disable' VarIdent .    (rule 109)

	';'            reduce using rule 109
	'}'            reduce using rule 109
	%eof           reduce using rule 109


State 234

	IExpr -> IExpr . '+' IExpr1                         (rule 29)
	IExpr -> IExpr . '-' IExpr1                         (rule 30)
	Instr1 -> 'continue' 'outer' '(' IExpr . ')'        (rule 91)

	')'            shift, and enter state 245
	'+'            shift, and enter state 96
	'-'            shift, and enter state 97


State 235

	Instr1 -> 'break' '(' IExpr ')' .                   (rule 89)

	';'            reduce using rule 89
	'}'            reduce using rule 89
	%eof           reduce using rule 89


State 236

	Instr1 -> 'Array' Type ArrIdent '[' . IExpr ']' '(' Expr ')'    (rule 94)
	Instr1 -> 'Array' Type ArrIdent '[' . IExpr ']'     (rule 95)

	'('            shift, and enter state 82
	'++'           shift, and enter state 67
	'--'           shift, and enter state 68
	L_Ident        shift, and enter state 18
	L_integ        shift, and enter state 72

	Ident          goto state 52
	Integer        goto state 53
	VarIdent       goto state 77
	ArrIdent       goto state 78
	DictIdent      goto state 79
	FuncIdent      goto state 80
	IExpr          goto state 244
	IExpr1         goto state 60
	IExpr2         goto state 61

State 237

	Instr1 -> DictIdent '[' IExpr ']' . 'set' '(' IExpr ')'    (rule 98)

	'set'          shift, and enter state 243


State 238

	Instr1 -> ArrIdent '[' IExpr ']' . '=' '(' IExpr ')'    (rule 96)

	'='            shift, and enter state 242


State 239

	Instr1 -> FType FuncIdent '(' Params . ')' '{' Instr '}'    (rule 99)

	')'            shift, and enter state 241


State 240

	Instr1 -> Type VarIdent '=' Expr .                  (rule 93)

	';'            reduce using rule 93
	'}'            reduce using rule 93
	%eof           reduce using rule 93


State 241

	Instr1 -> FType FuncIdent '(' Params ')' . '{' Instr '}'    (rule 99)

	'{'            shift, and enter state 265


State 242

	Instr1 -> ArrIdent '[' IExpr ']' '=' . '(' IExpr ')'    (rule 96)

	'('            shift, and enter state 264


State 243

	Instr1 -> DictIdent '[' IExpr ']' 'set' . '(' IExpr ')'    (rule 98)

	'('            shift, and enter state 263


State 244

	IExpr -> IExpr . '+' IExpr1                         (rule 29)
	IExpr -> IExpr . '-' IExpr1                         (rule 30)
	Instr1 -> 'Array' Type ArrIdent '[' IExpr . ']' '(' Expr ')'    (rule 94)
	Instr1 -> 'Array' Type ArrIdent '[' IExpr . ']'     (rule 95)

	'+'            shift, and enter state 96
	'-'            shift, and enter state 97
	']'            shift, and enter state 262


State 245

	Instr1 -> 'continue' 'outer' '(' IExpr ')' .        (rule 91)

	';'            reduce using rule 91
	'}'            reduce using rule 91
	%eof           reduce using rule 91


State 246

	IExpr -> IExpr . '+' IExpr1                         (rule 29)
	IExpr -> IExpr . '-' IExpr1                         (rule 30)
	Instr1 -> 'for' '(' VarIdent '=' IExpr . 'to' IExpr ')' '{' Instr '}'    (rule 85)

	'+'            shift, and enter state 96
	'-'            shift, and enter state 97
	'to'           shift, and enter state 261


State 247

	Instr1 -> 'if' '(' BExpr ')' '{' . Instr '}' 'else' '{' Instr '}'    (rule 82)
	Instr1 -> 'if' '(' BExpr ')' '{' . Instr '}'        (rule 83)

	'Array'        shift, and enter state 27
	'Bool'         shift, and enter state 28
	'BoolFunc'     shift, and enter state 29
	'Dict'         shift, and enter state 30
	'Int'          shift, and enter state 31
	'IntFunc'      shift, and enter state 32
	'break'        shift, and enter state 33
	'continue'     shift, and enter state 34
	'debug'        shift, and enter state 35
	'for'          shift, and enter state 36
	'if'           shift, and enter state 37
	'print'        shift, and enter state 38
	'return'       shift, and enter state 39
	'skip'         shift, and enter state 40
	'swap'         shift, and enter state 41
	'while'        shift, and enter state 42
	L_Ident        shift, and enter state 18

	Ident          goto state 19
	Type           goto state 20
	FType          goto state 21
	VarIdent       goto state 22
	ArrIdent       goto state 23
	DictIdent      goto state 24
	Instr1         goto state 25
	Instr          goto state 260

State 248

	Instr1 -> 'swap' '(' VarIdent ',' VarIdent . ')'    (rule 88)

	')'            shift, and enter state 259


State 249

	Instr1 -> 'while' '(' BExpr ')' '{' . Instr '}'     (rule 84)

	'Array'        shift, and enter state 27
	'Bool'         shift, and enter state 28
	'BoolFunc'     shift, and enter state 29
	'Dict'         shift, and enter state 30
	'Int'          shift, and enter state 31
	'IntFunc'      shift, and enter state 32
	'break'        shift, and enter state 33
	'continue'     shift, and enter state 34
	'debug'        shift, and enter state 35
	'for'          shift, and enter state 36
	'if'           shift, and enter state 37
	'print'        shift, and enter state 38
	'return'       shift, and enter state 39
	'skip'         shift, and enter state 40
	'swap'         shift, and enter state 41
	'while'        shift, and enter state 42
	L_Ident        shift, and enter state 18

	Ident          goto state 19
	Type           goto state 20
	FType          goto state 21
	VarIdent       goto state 22
	ArrIdent       goto state 23
	DictIdent      goto state 24
	Instr1         goto state 25
	Instr          goto state 258

State 250

	Lambda -> FType 'lambda' '(' Params ')' . '->' '{' Instr '}'    (rule 73)

	'->'           shift, and enter state 257


State 251

	Params -> VarIdent ':' Type ',' Params .            (rule 78)

	')'            reduce using rule 78
	%eof           reduce using rule 78


State 252

	Params -> FuncIdent ':' FType ',' Params .          (rule 79)

	')'            reduce using rule 79
	%eof           reduce using rule 79


State 253

	IExpr -> IExpr . '+' IExpr1                         (rule 29)
	IExpr -> IExpr . '-' IExpr1                         (rule 30)
	BExpr1 -> IExpr . '==' IExpr                        (rule 50)
	BExpr1 -> IExpr . '<=' IExpr                        (rule 51)
	BExpr1 -> IExpr . '>=' IExpr                        (rule 52)
	BExpr1 -> IExpr . '<' IExpr                         (rule 53)
	BExpr1 -> IExpr . '>' IExpr                         (rule 54)
	BExpr1 -> IExpr . '!=' IExpr                        (rule 55)
	BExpr1 -> DictIdent 'has' 'key' '[' IExpr . ']'     (rule 65)

	'!='           shift, and enter state 112
	'+'            shift, and enter state 96
	'-'            shift, and enter state 97
	'<'            shift, and enter state 113
	'<='           shift, and enter state 114
	'=='           shift, and enter state 115
	'>'            shift, and enter state 116
	'>='           shift, and enter state 117
	']'            shift, and enter state 256


State 254

	BExpr1 -> BExpr . '==' BExpr                        (rule 56)
	BExpr1 -> BExpr . '!=' BExpr                        (rule 57)
	BExpr1 -> BExpr . 'or' BExpr1                       (rule 59)
	BExpr1 -> BExpr . 'and' BExpr1                      (rule 60)
	BExpr1 -> BExpr . 'xor' BExpr1                      (rule 61)
	BExpr1 -> DictIdent 'has' 'key' '[' BExpr . ']'     (rule 66)

	'!='           shift, and enter state 107
	'=='           shift, and enter state 108
	']'            shift, and enter state 255
	'and'          shift, and enter state 109
	'or'           shift, and enter state 110
	'xor'          shift, and enter state 111


State 255

	BExpr1 -> DictIdent 'has' 'key' '[' BExpr ']' .     (rule 66)

	'!='           reduce using rule 66
	')'            reduce using rule 66
	','            reduce using rule 66
	';'            reduce using rule 66
	'=='           reduce using rule 66
	']'            reduce using rule 66
	'and'          reduce using rule 66
	'or'           reduce using rule 66
	'xor'          reduce using rule 66
	'}'            reduce using rule 66
	%eof           reduce using rule 66


State 256

	BExpr1 -> DictIdent 'has' 'key' '[' IExpr ']' .     (rule 65)

	'!='           reduce using rule 65
	')'            reduce using rule 65
	','            reduce using rule 65
	';'            reduce using rule 65
	'=='           reduce using rule 65
	']'            reduce using rule 65
	'and'          reduce using rule 65
	'or'           reduce using rule 65
	'xor'          reduce using rule 65
	'}'            reduce using rule 65
	%eof           reduce using rule 65


State 257

	Lambda -> FType 'lambda' '(' Params ')' '->' . '{' Instr '}'    (rule 73)

	'{'            shift, and enter state 273


State 258

	Instr1 -> 'while' '(' BExpr ')' '{' Instr . '}'     (rule 84)

	'}'            shift, and enter state 272


State 259

	Instr1 -> 'swap' '(' VarIdent ',' VarIdent ')' .    (rule 88)

	';'            reduce using rule 88
	'}'            reduce using rule 88
	%eof           reduce using rule 88


State 260

	Instr1 -> 'if' '(' BExpr ')' '{' Instr . '}' 'else' '{' Instr '}'    (rule 82)
	Instr1 -> 'if' '(' BExpr ')' '{' Instr . '}'        (rule 83)

	'}'            shift, and enter state 271


State 261

	Instr1 -> 'for' '(' VarIdent '=' IExpr 'to' . IExpr ')' '{' Instr '}'    (rule 85)

	'('            shift, and enter state 82
	'++'           shift, and enter state 67
	'--'           shift, and enter state 68
	L_Ident        shift, and enter state 18
	L_integ        shift, and enter state 72

	Ident          goto state 52
	Integer        goto state 53
	VarIdent       goto state 77
	ArrIdent       goto state 78
	DictIdent      goto state 79
	FuncIdent      goto state 80
	IExpr          goto state 270
	IExpr1         goto state 60
	IExpr2         goto state 61

State 262

	Instr1 -> 'Array' Type ArrIdent '[' IExpr ']' . '(' Expr ')'    (rule 94)
	Instr1 -> 'Array' Type ArrIdent '[' IExpr ']' .     (rule 95)

	'('            shift, and enter state 269
	';'            reduce using rule 95
	'}'            reduce using rule 95
	%eof           reduce using rule 95


State 263

	Instr1 -> DictIdent '[' IExpr ']' 'set' '(' . IExpr ')'    (rule 98)

	'('            shift, and enter state 82
	'++'           shift, and enter state 67
	'--'           shift, and enter state 68
	L_Ident        shift, and enter state 18
	L_integ        shift, and enter state 72

	Ident          goto state 52
	Integer        goto state 53
	VarIdent       goto state 77
	ArrIdent       goto state 78
	DictIdent      goto state 79
	FuncIdent      goto state 80
	IExpr          goto state 268
	IExpr1         goto state 60
	IExpr2         goto state 61

State 264

	Instr1 -> ArrIdent '[' IExpr ']' '=' '(' . IExpr ')'    (rule 96)

	'('            shift, and enter state 82
	'++'           shift, and enter state 67
	'--'           shift, and enter state 68
	L_Ident        shift, and enter state 18
	L_integ        shift, and enter state 72

	Ident          goto state 52
	Integer        goto state 53
	VarIdent       goto state 77
	ArrIdent       goto state 78
	DictIdent      goto state 79
	FuncIdent      goto state 80
	IExpr          goto state 267
	IExpr1         goto state 60
	IExpr2         goto state 61

State 265

	Instr1 -> FType FuncIdent '(' Params ')' '{' . Instr '}'    (rule 99)

	'Array'        shift, and enter state 27
	'Bool'         shift, and enter state 28
	'BoolFunc'     shift, and enter state 29
	'Dict'         shift, and enter state 30
	'Int'          shift, and enter state 31
	'IntFunc'      shift, and enter state 32
	'break'        shift, and enter state 33
	'continue'     shift, and enter state 34
	'debug'        shift, and enter state 35
	'for'          shift, and enter state 36
	'if'           shift, and enter state 37
	'print'        shift, and enter state 38
	'return'       shift, and enter state 39
	'skip'         shift, and enter state 40
	'swap'         shift, and enter state 41
	'while'        shift, and enter state 42
	L_Ident        shift, and enter state 18

	Ident          goto state 19
	Type           goto state 20
	FType          goto state 21
	VarIdent       goto state 22
	ArrIdent       goto state 23
	DictIdent      goto state 24
	Instr1         goto state 25
	Instr          goto state 266

State 266

	Instr1 -> FType FuncIdent '(' Params ')' '{' Instr . '}'    (rule 99)

	'}'            shift, and enter state 280


State 267

	IExpr -> IExpr . '+' IExpr1                         (rule 29)
	IExpr -> IExpr . '-' IExpr1                         (rule 30)
	Instr1 -> ArrIdent '[' IExpr ']' '=' '(' IExpr . ')'    (rule 96)

	')'            shift, and enter state 279
	'+'            shift, and enter state 96
	'-'            shift, and enter state 97


State 268

	IExpr -> IExpr . '+' IExpr1                         (rule 29)
	IExpr -> IExpr . '-' IExpr1                         (rule 30)
	Instr1 -> DictIdent '[' IExpr ']' 'set' '(' IExpr . ')'    (rule 98)

	')'            shift, and enter state 278
	'+'            shift, and enter state 96
	'-'            shift, and enter state 97


State 269

	Instr1 -> 'Array' Type ArrIdent '[' IExpr ']' '(' . Expr ')'    (rule 94)

	'!'            shift, and enter state 65
	'('            shift, and enter state 66
	'++'           shift, and enter state 67
	'--'           shift, and enter state 68
	'false'        shift, and enter state 69
	'true'         shift, and enter state 71
	L_Ident        shift, and enter state 18
	L_integ        shift, and enter state 72

	Ident          goto state 52
	Integer        goto state 53
	VarIdent       goto state 54
	ArrIdent       goto state 55
	DictIdent      goto state 56
	FuncIdent      goto state 57
	Expr           goto state 277
	IExpr          goto state 59
	IExpr1         goto state 60
	IExpr2         goto state 61
	BExpr1         goto state 62
	BExpr          goto state 63

State 270

	IExpr -> IExpr . '+' IExpr1                         (rule 29)
	IExpr -> IExpr . '-' IExpr1                         (rule 30)
	Instr1 -> 'for' '(' VarIdent '=' IExpr 'to' IExpr . ')' '{' Instr '}'    (rule 85)

	')'            shift, and enter state 276
	'+'            shift, and enter state 96
	'-'            shift, and enter state 97


State 271

	Instr1 -> 'if' '(' BExpr ')' '{' Instr '}' . 'else' '{' Instr '}'    (rule 82)
	Instr1 -> 'if' '(' BExpr ')' '{' Instr '}' .        (rule 83)

	';'            reduce using rule 83
	'else'         shift, and enter state 275
	'}'            reduce using rule 83
	%eof           reduce using rule 83


State 272

	Instr1 -> 'while' '(' BExpr ')' '{' Instr '}' .     (rule 84)

	';'            reduce using rule 84
	'}'            reduce using rule 84
	%eof           reduce using rule 84


State 273

	Lambda -> FType 'lambda' '(' Params ')' '->' '{' . Instr '}'    (rule 73)

	'Array'        shift, and enter state 27
	'Bool'         shift, and enter state 28
	'BoolFunc'     shift, and enter state 29
	'Dict'         shift, and enter state 30
	'Int'          shift, and enter state 31
	'IntFunc'      shift, and enter state 32
	'break'        shift, and enter state 33
	'continue'     shift, and enter state 34
	'debug'        shift, and enter state 35
	'for'          shift, and enter state 36
	'if'           shift, and enter state 37
	'print'        shift, and enter state 38
	'return'       shift, and enter state 39
	'skip'         shift, and enter state 40
	'swap'         shift, and enter state 41
	'while'        shift, and enter state 42
	L_Ident        shift, and enter state 18

	Ident          goto state 19
	Type           goto state 20
	FType          goto state 21
	VarIdent       goto state 22
	ArrIdent       goto state 23
	DictIdent      goto state 24
	Instr1         goto state 25
	Instr          goto state 274

State 274

	Lambda -> FType 'lambda' '(' Params ')' '->' '{' Instr . '}'    (rule 73)

	'}'            shift, and enter state 284


State 275

	Instr1 -> 'if' '(' BExpr ')' '{' Instr '}' 'else' . '{' Instr '}'    (rule 82)

	'{'            shift, and enter state 283


State 276

	Instr1 -> 'for' '(' VarIdent '=' IExpr 'to' IExpr ')' . '{' Instr '}'    (rule 85)

	'{'            shift, and enter state 282


State 277

	Instr1 -> 'Array' Type ArrIdent '[' IExpr ']' '(' Expr . ')'    (rule 94)

	')'            shift, and enter state 281


State 278

	Instr1 -> DictIdent '[' IExpr ']' 'set' '(' IExpr ')' .    (rule 98)

	';'            reduce using rule 98
	'}'            reduce using rule 98
	%eof           reduce using rule 98


State 279

	Instr1 -> ArrIdent '[' IExpr ']' '=' '(' IExpr ')' .    (rule 96)

	';'            reduce using rule 96
	'}'            reduce using rule 96
	%eof           reduce using rule 96


State 280

	Instr1 -> FType FuncIdent '(' Params ')' '{' Instr '}' .    (rule 99)

	';'            reduce using rule 99
	'}'            reduce using rule 99
	%eof           reduce using rule 99


State 281

	Instr1 -> 'Array' Type ArrIdent '[' IExpr ']' '(' Expr ')' .    (rule 94)

	';'            reduce using rule 94
	'}'            reduce using rule 94
	%eof           reduce using rule 94


State 282

	Instr1 -> 'for' '(' VarIdent '=' IExpr 'to' IExpr ')' '{' . Instr '}'    (rule 85)

	'Array'        shift, and enter state 27
	'Bool'         shift, and enter state 28
	'BoolFunc'     shift, and enter state 29
	'Dict'         shift, and enter state 30
	'Int'          shift, and enter state 31
	'IntFunc'      shift, and enter state 32
	'break'        shift, and enter state 33
	'continue'     shift, and enter state 34
	'debug'        shift, and enter state 35
	'for'          shift, and enter state 36
	'if'           shift, and enter state 37
	'print'        shift, and enter state 38
	'return'       shift, and enter state 39
	'skip'         shift, and enter state 40
	'swap'         shift, and enter state 41
	'while'        shift, and enter state 42
	L_Ident        shift, and enter state 18

	Ident          goto state 19
	Type           goto state 20
	FType          goto state 21
	VarIdent       goto state 22
	ArrIdent       goto state 23
	DictIdent      goto state 24
	Instr1         goto state 25
	Instr          goto state 286

State 283

	Instr1 -> 'if' '(' BExpr ')' '{' Instr '}' 'else' '{' . Instr '}'    (rule 82)

	'Array'        shift, and enter state 27
	'Bool'         shift, and enter state 28
	'BoolFunc'     shift, and enter state 29
	'Dict'         shift, and enter state 30
	'Int'          shift, and enter state 31
	'IntFunc'      shift, and enter state 32
	'break'        shift, and enter state 33
	'continue'     shift, and enter state 34
	'debug'        shift, and enter state 35
	'for'          shift, and enter state 36
	'if'           shift, and enter state 37
	'print'        shift, and enter state 38
	'return'       shift, and enter state 39
	'skip'         shift, and enter state 40
	'swap'         shift, and enter state 41
	'while'        shift, and enter state 42
	L_Ident        shift, and enter state 18

	Ident          goto state 19
	Type           goto state 20
	FType          goto state 21
	VarIdent       goto state 22
	ArrIdent       goto state 23
	DictIdent      goto state 24
	Instr1         goto state 25
	Instr          goto state 285

State 284

	Lambda -> FType 'lambda' '(' Params ')' '->' '{' Instr '}' .    (rule 73)

	')'            reduce using rule 73
	','            reduce using rule 73
	%eof           reduce using rule 73


State 285

	Instr1 -> 'if' '(' BExpr ')' '{' Instr '}' 'else' '{' Instr . '}'    (rule 82)

	'}'            shift, and enter state 288


State 286

	Instr1 -> 'for' '(' VarIdent '=' IExpr 'to' IExpr ')' '{' Instr . '}'    (rule 85)

	'}'            shift, and enter state 287


State 287

	Instr1 -> 'for' '(' VarIdent '=' IExpr 'to' IExpr ')' '{' Instr '}' .    (rule 85)

	';'            reduce using rule 85
	'}'            reduce using rule 85
	%eof           reduce using rule 85


State 288

	Instr1 -> 'if' '(' BExpr ')' '{' Instr '}' 'else' '{' Instr '}' .    (rule 82)

	';'            reduce using rule 82
	'}'            reduce using rule 82
	%eof           reduce using rule 82


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 112
Number of terminals: 65
Number of non-terminals: 36
Number of states: 289
