-- -*- haskell -*- File generated by the BNF Converter (bnfc 2.9.5).

-- Parser definition for use with Happy
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
{-# LANGUAGE PatternSynonyms #-}

module FraJer.Par
  ( happyError
  , myLexer
  , pType
  , pFType
  , pVarIdent
  , pArrIdent
  , pDictIdent
  , pFuncIdent
  , pExpr
  , pIExpr
  , pIExpr1
  , pIExpr2
  , pBExpr1
  , pBExpr
  , pArgs
  , pLambda
  , pParams
  , pInstr1
  , pInstr
  ) where

import Prelude

import qualified FraJer.Abs
import FraJer.Lex

}

%name pType Type
%name pFType FType
%name pVarIdent VarIdent
%name pArrIdent ArrIdent
%name pDictIdent DictIdent
%name pFuncIdent FuncIdent
%name pExpr Expr
%name pIExpr IExpr
%name pIExpr1 IExpr1
%name pIExpr2 IExpr2
%name pBExpr1 BExpr1
%name pBExpr BExpr
%name pArgs Args
%name pLambda Lambda
%name pParams Params
%name pInstr1 Instr1
%name pInstr Instr
-- no lexer declaration
%monad { Err } { (>>=) } { return }
%tokentype {Token}
%token
  '!'          { PT _ (TS _ 1)  }
  '!='         { PT _ (TS _ 2)  }
  '%'          { PT _ (TS _ 3)  }
  '%='         { PT _ (TS _ 4)  }
  '('          { PT _ (TS _ 5)  }
  ')'          { PT _ (TS _ 6)  }
  '*'          { PT _ (TS _ 7)  }
  '*='         { PT _ (TS _ 8)  }
  '+'          { PT _ (TS _ 9)  }
  '++'         { PT _ (TS _ 10) }
  '+='         { PT _ (TS _ 11) }
  ','          { PT _ (TS _ 12) }
  '-'          { PT _ (TS _ 13) }
  '--'         { PT _ (TS _ 14) }
  '-='         { PT _ (TS _ 15) }
  '->'         { PT _ (TS _ 16) }
  '/'          { PT _ (TS _ 17) }
  '/='         { PT _ (TS _ 18) }
  ':'          { PT _ (TS _ 19) }
  ';'          { PT _ (TS _ 20) }
  '<'          { PT _ (TS _ 21) }
  '<='         { PT _ (TS _ 22) }
  '='          { PT _ (TS _ 23) }
  '=='         { PT _ (TS _ 24) }
  '>'          { PT _ (TS _ 25) }
  '>='         { PT _ (TS _ 26) }
  'Array'      { PT _ (TS _ 27) }
  'Bool'       { PT _ (TS _ 28) }
  'BoolFunc'   { PT _ (TS _ 29) }
  'Dict'       { PT _ (TS _ 30) }
  'Int'        { PT _ (TS _ 31) }
  'IntFunc'    { PT _ (TS _ 32) }
  '['          { PT _ (TS _ 33) }
  ']'          { PT _ (TS _ 34) }
  'and'        { PT _ (TS _ 35) }
  'assignment' { PT _ (TS _ 36) }
  'break'      { PT _ (TS _ 37) }
  'continue'   { PT _ (TS _ 38) }
  'debug'      { PT _ (TS _ 39) }
  'disable'    { PT _ (TS _ 40) }
  'else'       { PT _ (TS _ 41) }
  'enable'     { PT _ (TS _ 42) }
  'false'      { PT _ (TS _ 43) }
  'for'        { PT _ (TS _ 44) }
  'has'        { PT _ (TS _ 45) }
  'if'         { PT _ (TS _ 46) }
  'key'        { PT _ (TS _ 47) }
  'lambda'     { PT _ (TS _ 48) }
  'none'       { PT _ (TS _ 49) }
  'or'         { PT _ (TS _ 50) }
  'outer'      { PT _ (TS _ 51) }
  'print'      { PT _ (TS _ 52) }
  'reading'    { PT _ (TS _ 53) }
  'return'     { PT _ (TS _ 54) }
  'set'        { PT _ (TS _ 55) }
  'skip'       { PT _ (TS _ 56) }
  'swap'       { PT _ (TS _ 57) }
  'to'         { PT _ (TS _ 58) }
  'true'       { PT _ (TS _ 59) }
  'while'      { PT _ (TS _ 60) }
  'xor'        { PT _ (TS _ 61) }
  '{'          { PT _ (TS _ 62) }
  '}'          { PT _ (TS _ 63) }
  L_Ident      { PT _ (TV $$)   }
  L_integ      { PT _ (TI $$)   }

%%

Ident :: { FraJer.Abs.Ident }
Ident  : L_Ident { FraJer.Abs.Ident $1 }

Integer :: { Integer }
Integer  : L_integ  { (read $1) :: Integer }

Type :: { FraJer.Abs.Type }
Type : 'Int' { FraJer.Abs.TInt } | 'Bool' { FraJer.Abs.TBool }

FType :: { FraJer.Abs.FType }
FType
  : 'IntFunc' { FraJer.Abs.FTInt } | 'BoolFunc' { FraJer.Abs.FTBool }

VarIdent :: { FraJer.Abs.VarIdent }
VarIdent : Ident { FraJer.Abs.Var $1 }

ArrIdent :: { FraJer.Abs.ArrIdent }
ArrIdent : Ident { FraJer.Abs.Arr $1 }

DictIdent :: { FraJer.Abs.DictIdent }
DictIdent : Ident { FraJer.Abs.Dict $1 }

FuncIdent :: { FraJer.Abs.FuncIdent }
FuncIdent : Ident { FraJer.Abs.Func $1 }

Expr :: { FraJer.Abs.Expr }
Expr : IExpr { FraJer.Abs.IE $1 } | BExpr { FraJer.Abs.BE $1 }

IExpr :: { FraJer.Abs.IExpr }
IExpr
  : IExpr '+' IExpr1 { FraJer.Abs.EPlus $1 $3 }
  | IExpr '-' IExpr1 { FraJer.Abs.EMinus $1 $3 }
  | IExpr1 { $1 }

IExpr1 :: { FraJer.Abs.IExpr }
IExpr1
  : IExpr1 '/' IExpr2 { FraJer.Abs.EDiv $1 $3 }
  | IExpr1 '*' IExpr2 { FraJer.Abs.EMul $1 $3 }
  | IExpr1 '%' IExpr2 { FraJer.Abs.EMod $1 $3 }
  | IExpr2 { $1 }

IExpr2 :: { FraJer.Abs.IExpr }
IExpr2
  : Integer { FraJer.Abs.ENum $1 }
  | VarIdent { FraJer.Abs.EVar $1 }
  | VarIdent '++' { FraJer.Abs.EPostInc $1 }
  | '++' VarIdent { FraJer.Abs.EPreInc $2 }
  | VarIdent '--' { FraJer.Abs.EPostDec $1 }
  | '--' VarIdent { FraJer.Abs.EPreDec $2 }
  | ArrIdent '[' IExpr ']' { FraJer.Abs.EArray $1 $3 }
  | DictIdent '[' IExpr ']' { FraJer.Abs.EDict $1 $3 }
  | DictIdent '[' BExpr ']' { FraJer.Abs.EDictB $1 $3 }
  | FuncIdent '(' Args ')' { FraJer.Abs.EFuncVal $1 $3 }
  | '(' IExpr ')' { $2 }

BExpr1 :: { FraJer.Abs.BExpr }
BExpr1
  : 'true' { FraJer.Abs.BTrue }
  | 'false' { FraJer.Abs.BFalse }
  | VarIdent { FraJer.Abs.BVar $1 }
  | IExpr '==' IExpr { FraJer.Abs.BEq $1 $3 }
  | IExpr '<=' IExpr { FraJer.Abs.BLeq $1 $3 }
  | IExpr '>=' IExpr { FraJer.Abs.BGeq $1 $3 }
  | IExpr '<' IExpr { FraJer.Abs.BLt $1 $3 }
  | IExpr '>' IExpr { FraJer.Abs.BGt $1 $3 }
  | IExpr '!=' IExpr { FraJer.Abs.BNeq $1 $3 }
  | BExpr '==' BExpr { FraJer.Abs.BEqB $1 $3 }
  | BExpr '!=' BExpr { FraJer.Abs.BNeqB $1 $3 }
  | '!' BExpr1 { FraJer.Abs.BNot $2 }
  | BExpr 'or' BExpr1 { FraJer.Abs.BOr $1 $3 }
  | BExpr 'and' BExpr1 { FraJer.Abs.BAnd $1 $3 }
  | BExpr 'xor' BExpr1 { FraJer.Abs.BXor $1 $3 }
  | ArrIdent '[' IExpr ']' { FraJer.Abs.BArray $1 $3 }
  | DictIdent '[' IExpr ']' { FraJer.Abs.BDict $1 $3 }
  | DictIdent '[' BExpr ']' { FraJer.Abs.BDictB $1 $3 }
  | DictIdent 'has' 'key' '[' IExpr ']' { FraJer.Abs.BDictHasKey $1 $5 }
  | DictIdent 'has' 'key' '[' BExpr ']' { FraJer.Abs.BDictHasKeyB $1 $5 }
  | FuncIdent '(' Args ')' { FraJer.Abs.BFuncVal $1 $3 }
  | '(' BExpr ')' { $2 }

BExpr :: { FraJer.Abs.BExpr }
BExpr : BExpr1 { $1 }

Args :: { FraJer.Abs.Args }
Args
  : 'none' { FraJer.Abs.ArgsNone }
  | Expr { FraJer.Abs.ArgsOne $1 }
  | Expr ',' Args { FraJer.Abs.ArgsMany $1 $3 }

Lambda :: { FraJer.Abs.Lambda }
Lambda
  : FType 'lambda' '(' Params ')' '->' '{' Instr '}' { FraJer.Abs.Lam $1 $4 $8 }

Params :: { FraJer.Abs.Params }
Params
  : 'none' { FraJer.Abs.ParamsNone }
  | VarIdent ':' Type { FraJer.Abs.ParamVar $1 $3 }
  | FuncIdent ':' FType { FraJer.Abs.ParamFunc $1 $3 }
  | Lambda { FraJer.Abs.ParamLambda $1 }
  | VarIdent ':' Type ',' Params { FraJer.Abs.ParamVarMany $1 $3 $5 }
  | FuncIdent ':' FType ',' Params { FraJer.Abs.ParamFuncMany $1 $3 $5 }
  | Lambda ',' Params { FraJer.Abs.ParamLambdaMany $1 $3 }

Instr1 :: { FraJer.Abs.Instr }
Instr1
  : 'skip' { FraJer.Abs.ISkip }
  | 'if' '(' BExpr ')' '{' Instr '}' 'else' '{' Instr '}' { FraJer.Abs.iif1 $3 $6 $10 }
  | 'if' '(' BExpr ')' '{' Instr '}' { FraJer.Abs.iif2 $3 $6 }
  | 'while' '(' BExpr ')' '{' Instr '}' { FraJer.Abs.IWhile $3 $6 }
  | 'for' '(' VarIdent '=' IExpr 'to' IExpr ')' '{' Instr '}' { FraJer.Abs.IFor $3 $5 $7 $10 }
  | 'return' '(' IExpr ')' { FraJer.Abs.IReturn $3 }
  | 'print' '(' IExpr ')' { FraJer.Abs.IPrint $3 }
  | 'swap' '(' VarIdent ',' VarIdent ')' { FraJer.Abs.ISwap $3 $5 }
  | 'break' '(' IExpr ')' { FraJer.Abs.IBreak $3 }
  | 'break' { FraJer.Abs.IBreak1 }
  | 'continue' 'outer' '(' IExpr ')' { FraJer.Abs.IContinue $4 }
  | 'continue' { FraJer.Abs.IContinue0 }
  | Type VarIdent '=' Expr { FraJer.Abs.VarDef $1 $2 $4 }
  | 'Array' Type ArrIdent '[' IExpr ']' '(' Expr ')' { FraJer.Abs.ArrDefInit $2 $3 $5 $8 }
  | 'Array' Type ArrIdent '[' IExpr ']' { FraJer.Abs.ArrDef $2 $3 $5 }
  | ArrIdent '[' IExpr ']' '=' '(' IExpr ')' { FraJer.Abs.ArrElSet $1 $3 $7 }
  | 'Dict' Type DictIdent { FraJer.Abs.DictDef $2 $3 }
  | DictIdent '[' IExpr ']' 'set' '(' IExpr ')' { FraJer.Abs.DictElSet $1 $3 $7 }
  | FType FuncIdent '(' Params ')' '{' Instr '}' { FraJer.Abs.FuncDef $1 $2 $4 $7 }
  | VarIdent '=' IExpr { FraJer.Abs.VarAssign $1 $3 }
  | VarIdent '+=' IExpr { FraJer.Abs.VarAssignPlus $1 $3 }
  | VarIdent '-=' IExpr { FraJer.Abs.VarAssignMinus $1 $3 }
  | VarIdent '*=' IExpr { FraJer.Abs.VarAssignMul $1 $3 }
  | VarIdent '/=' IExpr { FraJer.Abs.VarAssignDiv $1 $3 }
  | VarIdent '%=' IExpr { FraJer.Abs.VarAssignMod $1 $3 }
  | 'debug' 'assignment' 'enable' VarIdent { FraJer.Abs.DebugAssEnable $4 }
  | 'debug' 'assignment' 'disable' VarIdent { FraJer.Abs.DebugAssDisable $4 }
  | 'debug' 'reading' 'enable' VarIdent { FraJer.Abs.DebugReadEnable $4 }
  | 'debug' 'reading' 'disable' VarIdent { FraJer.Abs.DebugReadDisable $4 }

Instr :: { FraJer.Abs.Instr }
Instr : Instr1 ';' Instr { FraJer.Abs.ISeq $1 $3 } | Instr1 { $1 }

{

type Err = Either String

happyError :: [Token] -> Err a
happyError ts = Left $
  "syntax error at " ++ tokenPos ts ++
  case ts of
    []      -> []
    [Err _] -> " due to lexer error"
    t:_     -> " before `" ++ (prToken t) ++ "'"

myLexer :: String -> [Token]
myLexer = tokens

}

