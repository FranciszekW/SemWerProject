-- File generated by the BNF Converter (bnfc 2.9.5).

{-# LANGUAGE CPP #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE LambdaCase #-}
#if __GLASGOW_HASKELL__ <= 708
{-# LANGUAGE OverlappingInstances #-}
#endif

-- | Pretty-printer for FraJer.

module FraJer.Print where

import Prelude
  ( ($), (.)
  , Bool(..), (==), (<)
  , Int, Integer, Double, (+), (-), (*)
  , String, (++)
  , ShowS, showChar, showString
  , all, elem, foldr, id, map, null, replicate, shows, span
  )
import Data.Char ( Char, isSpace )
import qualified FraJer.Abs

-- | The top-level printing method.

printTree :: Print a => a -> String
printTree = render . prt 0

type Doc = [ShowS] -> [ShowS]

doc :: ShowS -> Doc
doc = (:)

render :: Doc -> String
render d = rend 0 False (map ($ "") $ d []) ""
  where
  rend
    :: Int        -- ^ Indentation level.
    -> Bool       -- ^ Pending indentation to be output before next character?
    -> [String]
    -> ShowS
  rend i p = \case
      "["      :ts -> char '[' . rend i False ts
      "("      :ts -> char '(' . rend i False ts
      "{"      :ts -> onNewLine i     p . showChar   '{'  . new (i+1) ts
      "}" : ";":ts -> onNewLine (i-1) p . showString "};" . new (i-1) ts
      "}"      :ts -> onNewLine (i-1) p . showChar   '}'  . new (i-1) ts
      [";"]        -> char ';'
      ";"      :ts -> char ';' . new i ts
      t  : ts@(s:_) | closingOrPunctuation s
                   -> pending . showString t . rend i False ts
      t        :ts -> pending . space t      . rend i False ts
      []           -> id
    where
    -- Output character after pending indentation.
    char :: Char -> ShowS
    char c = pending . showChar c

    -- Output pending indentation.
    pending :: ShowS
    pending = if p then indent i else id

  -- Indentation (spaces) for given indentation level.
  indent :: Int -> ShowS
  indent i = replicateS (2*i) (showChar ' ')

  -- Continue rendering in new line with new indentation.
  new :: Int -> [String] -> ShowS
  new j ts = showChar '\n' . rend j True ts

  -- Make sure we are on a fresh line.
  onNewLine :: Int -> Bool -> ShowS
  onNewLine i p = (if p then id else showChar '\n') . indent i

  -- Separate given string from following text by a space (if needed).
  space :: String -> ShowS
  space t s =
    case (all isSpace t, null spc, null rest) of
      (True , _   , True ) -> []             -- remove trailing space
      (False, _   , True ) -> t              -- remove trailing space
      (False, True, False) -> t ++ ' ' : s   -- add space if none
      _                    -> t ++ s
    where
      (spc, rest) = span isSpace s

  closingOrPunctuation :: String -> Bool
  closingOrPunctuation [c] = c `elem` closerOrPunct
  closingOrPunctuation _   = False

  closerOrPunct :: String
  closerOrPunct = ")],;"

parenth :: Doc -> Doc
parenth ss = doc (showChar '(') . ss . doc (showChar ')')

concatS :: [ShowS] -> ShowS
concatS = foldr (.) id

concatD :: [Doc] -> Doc
concatD = foldr (.) id

replicateS :: Int -> ShowS -> ShowS
replicateS n f = concatS (replicate n f)

-- | The printer class does the job.

class Print a where
  prt :: Int -> a -> Doc

instance {-# OVERLAPPABLE #-} Print a => Print [a] where
  prt i = concatD . map (prt i)

instance Print Char where
  prt _ c = doc (showChar '\'' . mkEsc '\'' c . showChar '\'')

instance Print String where
  prt _ = printString

printString :: String -> Doc
printString s = doc (showChar '"' . concatS (map (mkEsc '"') s) . showChar '"')

mkEsc :: Char -> Char -> ShowS
mkEsc q = \case
  s | s == q -> showChar '\\' . showChar s
  '\\' -> showString "\\\\"
  '\n' -> showString "\\n"
  '\t' -> showString "\\t"
  s -> showChar s

prPrec :: Int -> Int -> Doc -> Doc
prPrec i j = if j < i then parenth else id

instance Print Integer where
  prt _ x = doc (shows x)

instance Print Double where
  prt _ x = doc (shows x)

instance Print FraJer.Abs.Ident where
  prt _ (FraJer.Abs.Ident i) = doc $ showString i
instance Print FraJer.Abs.SType where
  prt i = \case
    FraJer.Abs.STInt -> prPrec i 0 (concatD [doc (showString "Int")])
    FraJer.Abs.STBool -> prPrec i 0 (concatD [doc (showString "Bool")])

instance Print FraJer.Abs.FType where
  prt i = \case
    FraJer.Abs.FTInt -> prPrec i 0 (concatD [doc (showString "IntFunc")])
    FraJer.Abs.FTBool -> prPrec i 0 (concatD [doc (showString "BoolFunc")])

instance Print FraJer.Abs.Expr where
  prt i = \case
    FraJer.Abs.FuncVal id_ args -> prPrec i 2 (concatD [prt 0 id_, doc (showString "("), prt 0 args, doc (showString ")")])
    FraJer.Abs.VarVal id_ -> prPrec i 2 (concatD [prt 0 id_])
    FraJer.Abs.EPlus expr1 expr2 -> prPrec i 0 (concatD [prt 0 expr1, doc (showString "+"), prt 1 expr2])
    FraJer.Abs.EMinus expr1 expr2 -> prPrec i 0 (concatD [prt 0 expr1, doc (showString "-"), prt 1 expr2])
    FraJer.Abs.EDiv expr1 expr2 -> prPrec i 1 (concatD [prt 1 expr1, doc (showString "/"), prt 2 expr2])
    FraJer.Abs.EMul expr1 expr2 -> prPrec i 1 (concatD [prt 1 expr1, doc (showString "*"), prt 2 expr2])
    FraJer.Abs.EMod expr1 expr2 -> prPrec i 1 (concatD [prt 1 expr1, doc (showString "%"), prt 2 expr2])
    FraJer.Abs.ENum n -> prPrec i 2 (concatD [prt 0 n])
    FraJer.Abs.EPostInc id_ -> prPrec i 2 (concatD [prt 0 id_, doc (showString "++")])
    FraJer.Abs.EPreInc id_ -> prPrec i 2 (concatD [doc (showString "++"), prt 0 id_])
    FraJer.Abs.EPostDec id_ -> prPrec i 2 (concatD [prt 0 id_, doc (showString "--")])
    FraJer.Abs.EPreDec id_ -> prPrec i 2 (concatD [doc (showString "--"), prt 0 id_])
    FraJer.Abs.EArray id_ expr -> prPrec i 2 (concatD [prt 0 id_, doc (showString "["), prt 0 expr, doc (showString "]")])
    FraJer.Abs.EDict id_ expr -> prPrec i 2 (concatD [prt 0 id_, doc (showString "get"), doc (showString "["), prt 0 expr, doc (showString "]")])
    FraJer.Abs.BTrue -> prPrec i 2 (concatD [doc (showString "true")])
    FraJer.Abs.BFalse -> prPrec i 2 (concatD [doc (showString "false")])
    FraJer.Abs.EEq expr1 expr2 -> prPrec i 1 (concatD [prt 1 expr1, doc (showString "=="), prt 2 expr2])
    FraJer.Abs.ELeq expr1 expr2 -> prPrec i 1 (concatD [prt 1 expr1, doc (showString "<="), prt 2 expr2])
    FraJer.Abs.EGeq expr1 expr2 -> prPrec i 1 (concatD [prt 1 expr1, doc (showString ">="), prt 2 expr2])
    FraJer.Abs.ELt expr1 expr2 -> prPrec i 1 (concatD [prt 1 expr1, doc (showString "<"), prt 2 expr2])
    FraJer.Abs.EGt expr1 expr2 -> prPrec i 1 (concatD [prt 1 expr1, doc (showString ">"), prt 2 expr2])
    FraJer.Abs.ENeq expr1 expr2 -> prPrec i 1 (concatD [prt 1 expr1, doc (showString "!="), prt 2 expr2])
    FraJer.Abs.BNot expr -> prPrec i 2 (concatD [doc (showString "!"), prt 2 expr])
    FraJer.Abs.BOr expr1 expr2 -> prPrec i 0 (concatD [prt 0 expr1, doc (showString "or"), prt 1 expr2])
    FraJer.Abs.BAnd expr1 expr2 -> prPrec i 0 (concatD [prt 0 expr1, doc (showString "and"), prt 1 expr2])
    FraJer.Abs.BXor expr1 expr2 -> prPrec i 0 (concatD [prt 0 expr1, doc (showString "xor"), prt 1 expr2])
    FraJer.Abs.BDictHasKey id_ expr -> prPrec i 2 (concatD [prt 0 id_, doc (showString "has"), doc (showString "key"), doc (showString "["), prt 0 expr, doc (showString "]")])

instance Print FraJer.Abs.Args where
  prt i = \case
    FraJer.Abs.ArgsVoid -> prPrec i 0 (concatD [doc (showString "void")])
    FraJer.Abs.ArgsOne expr -> prPrec i 0 (concatD [prt 0 expr])
    FraJer.Abs.ArgsMany expr args -> prPrec i 0 (concatD [prt 0 expr, doc (showString ","), prt 0 args])
    FraJer.Abs.ArgsLambda lambda -> prPrec i 0 (concatD [prt 0 lambda])
    FraJer.Abs.ArgsLambdaMany lambda args -> prPrec i 0 (concatD [prt 0 lambda, doc (showString ","), prt 0 args])

instance Print FraJer.Abs.Params where
  prt i = \case
    FraJer.Abs.ParamsNone -> prPrec i 0 (concatD [doc (showString "none")])
    FraJer.Abs.ParamVar stype id_ -> prPrec i 0 (concatD [prt 0 stype, prt 0 id_])
    FraJer.Abs.ParamFunc ftype id_ -> prPrec i 0 (concatD [prt 0 ftype, prt 0 id_])
    FraJer.Abs.ParamVarMany stype id_ params -> prPrec i 0 (concatD [prt 0 stype, prt 0 id_, doc (showString ","), prt 0 params])
    FraJer.Abs.ParamFuncMany ftype id_ params -> prPrec i 0 (concatD [prt 0 ftype, prt 0 id_, doc (showString ","), prt 0 params])

instance Print FraJer.Abs.Lambda where
  prt i = \case
    FraJer.Abs.Lam ftype params instr -> prPrec i 0 (concatD [prt 0 ftype, doc (showString "lambda"), doc (showString "("), prt 0 params, doc (showString ")"), doc (showString "->"), doc (showString "{"), prt 0 instr, doc (showString "}")])

instance Print FraJer.Abs.Instr where
  prt i = \case
    FraJer.Abs.ISeq instr1 instr2 -> prPrec i 0 (concatD [prt 1 instr1, doc (showString ";"), prt 0 instr2])
    FraJer.Abs.IDSeq def instr -> prPrec i 0 (concatD [prt 0 def, doc (showString ";"), prt 0 instr])
    FraJer.Abs.IStmt stmt -> prPrec i 1 (concatD [prt 0 stmt])
    FraJer.Abs.ISSeq specstmt instr -> prPrec i 0 (concatD [prt 0 specstmt, doc (showString ";"), prt 0 instr])

instance Print FraJer.Abs.Def where
  prt i = \case
    FraJer.Abs.VarDef stype id_ expr -> prPrec i 1 (concatD [prt 0 stype, prt 0 id_, doc (showString "="), prt 0 expr])
    FraJer.Abs.FuncDef ftype id_ params instr -> prPrec i 1 (concatD [prt 0 ftype, prt 0 id_, doc (showString "("), prt 0 params, doc (showString ")"), doc (showString "{"), prt 0 instr, doc (showString "}")])
    FraJer.Abs.ArrDefInit stype id_ expr1 expr2 -> prPrec i 1 (concatD [doc (showString "Array"), prt 0 stype, prt 0 id_, doc (showString "["), prt 0 expr1, doc (showString "]"), doc (showString "("), prt 0 expr2, doc (showString ")")])
    FraJer.Abs.ArrDef stype id_ expr -> prPrec i 1 (concatD [doc (showString "Array"), prt 0 stype, prt 0 id_, doc (showString "["), prt 0 expr, doc (showString "]")])
    FraJer.Abs.DictDef stype id_ -> prPrec i 1 (concatD [doc (showString "Dict"), prt 0 stype, prt 0 id_])

instance Print FraJer.Abs.Stmt where
  prt i = \case
    FraJer.Abs.SIf expr instr1 instr2 -> prPrec i 1 (concatD [doc (showString "if"), doc (showString "("), prt 0 expr, doc (showString ")"), doc (showString "{"), prt 0 instr1, doc (showString "}"), doc (showString "else"), doc (showString "{"), prt 0 instr2, doc (showString "}")])
    FraJer.Abs.SWhile expr instr -> prPrec i 1 (concatD [doc (showString "while"), doc (showString "("), prt 0 expr, doc (showString ")"), doc (showString "{"), prt 0 instr, doc (showString "}")])
    FraJer.Abs.SFor id_ expr1 expr2 instr -> prPrec i 1 (concatD [doc (showString "for"), doc (showString "("), prt 0 id_, doc (showString "="), prt 0 expr1, doc (showString "to"), prt 0 expr2, doc (showString ")"), doc (showString "{"), prt 0 instr, doc (showString "}")])
    FraJer.Abs.SSkip -> prPrec i 1 (concatD [doc (showString "skip")])
    FraJer.Abs.SReturn expr -> prPrec i 1 (concatD [doc (showString "return"), doc (showString "("), prt 0 expr, doc (showString ")")])
    FraJer.Abs.SPrint expr -> prPrec i 1 (concatD [doc (showString "print"), doc (showString "("), prt 0 expr, doc (showString ")")])
    FraJer.Abs.SBreak expr -> prPrec i 1 (concatD [doc (showString "break"), doc (showString "("), prt 0 expr, doc (showString ")")])
    FraJer.Abs.SBreak1 -> prPrec i 1 (concatD [doc (showString "break")])
    FraJer.Abs.SContinue expr -> prPrec i 1 (concatD [doc (showString "continue"), doc (showString "outer"), doc (showString "("), prt 0 expr, doc (showString ")")])
    FraJer.Abs.SContinue0 -> prPrec i 1 (concatD [doc (showString "continue")])
    FraJer.Abs.VarAssign id_ expr -> prPrec i 1 (concatD [prt 0 id_, doc (showString "="), prt 0 expr])
    FraJer.Abs.VarAssignPlus id_ expr -> prPrec i 1 (concatD [prt 0 id_, doc (showString "+="), prt 0 expr])
    FraJer.Abs.VarAssignMinus id_ expr -> prPrec i 1 (concatD [prt 0 id_, doc (showString "-="), prt 0 expr])
    FraJer.Abs.VarAssignMul id_ expr -> prPrec i 1 (concatD [prt 0 id_, doc (showString "*="), prt 0 expr])
    FraJer.Abs.VarAssignDiv id_ expr -> prPrec i 1 (concatD [prt 0 id_, doc (showString "/="), prt 0 expr])
    FraJer.Abs.VarAssignMod id_ expr -> prPrec i 1 (concatD [prt 0 id_, doc (showString "%="), prt 0 expr])
    FraJer.Abs.ArrElSet id_ expr1 expr2 -> prPrec i 1 (concatD [prt 0 id_, doc (showString "["), prt 0 expr1, doc (showString "]"), doc (showString "="), doc (showString "("), prt 0 expr2, doc (showString ")")])
    FraJer.Abs.DictElSet id_ expr1 expr2 -> prPrec i 1 (concatD [prt 0 id_, doc (showString "set"), doc (showString "["), prt 0 expr1, doc (showString "]"), doc (showString "to"), doc (showString "("), prt 0 expr2, doc (showString ")")])

instance Print FraJer.Abs.SpecStmt where
  prt i = \case
    FraJer.Abs.SSwap id_1 id_2 -> prPrec i 0 (concatD [doc (showString "swap"), doc (showString "("), prt 0 id_1, doc (showString ","), prt 0 id_2, doc (showString ")")])
    FraJer.Abs.DebugAssEnable id_ -> prPrec i 0 (concatD [doc (showString "debug"), doc (showString "assignment"), doc (showString "enable"), prt 0 id_])
    FraJer.Abs.DebugAssDisable id_ -> prPrec i 0 (concatD [doc (showString "debug"), doc (showString "assignment"), doc (showString "disable"), prt 0 id_])
    FraJer.Abs.DebugReadEnable id_ -> prPrec i 0 (concatD [doc (showString "debug"), doc (showString "reading"), doc (showString "enable"), prt 0 id_])
    FraJer.Abs.DebugReadDisable id_ -> prPrec i 0 (concatD [doc (showString "debug"), doc (showString "reading"), doc (showString "disable"), prt 0 id_])
