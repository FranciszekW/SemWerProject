-----------------------------------------------------------------------------
Info file generated by Happy Version 1.20.0 from FraJer/Par.y
-----------------------------------------------------------------------------

state 3 contains 1 reduce/reduce conflicts.

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_pInstr -> Instr                             (0)
	Ident -> L_Ident                                   (1)
	Integer -> L_integ                                 (2)
	Type -> 'Int'                                      (3)
	Type -> 'Bool'                                     (4)
	FType -> 'IntFunc'                                 (5)
	FType -> 'BoolFunc'                                (6)
	VarIdent -> Ident                                  (7)
	ArrIdent -> Ident                                  (8)
	DictIdent -> Ident                                 (9)
	FuncIdent -> Ident                                 (10)
	Expr -> FuncIdent '(' Args ')'                     (11)
	Expr -> VarIdent                                   (12)
	Expr -> Expr '+' Expr1                             (13)
	Expr -> Expr '-' Expr1                             (14)
	Expr -> Expr1                                      (15)
	Expr -> Expr 'or' Expr1                            (16)
	Expr -> Expr 'and' Expr1                           (17)
	Expr -> Expr 'xor' Expr1                           (18)
	Expr1 -> Expr1 '/' Expr2                           (19)
	Expr1 -> Expr1 '*' Expr2                           (20)
	Expr1 -> Expr1 '%' Expr2                           (21)
	Expr1 -> Expr2                                     (22)
	Expr1 -> Expr1 '==' Expr2                          (23)
	Expr1 -> Expr1 '<=' Expr2                          (24)
	Expr1 -> Expr1 '>=' Expr2                          (25)
	Expr1 -> Expr1 '<' Expr2                           (26)
	Expr1 -> Expr1 '>' Expr2                           (27)
	Expr1 -> Expr1 '!=' Expr2                          (28)
	Expr2 -> Integer                                   (29)
	Expr2 -> VarIdent '++'                             (30)
	Expr2 -> '++' VarIdent                             (31)
	Expr2 -> VarIdent '--'                             (32)
	Expr2 -> '--' VarIdent                             (33)
	Expr2 -> ArrIdent '[' Expr ']'                     (34)
	Expr2 -> DictIdent 'get' '[' Expr ']'              (35)
	Expr2 -> '(' Expr ')'                              (36)
	Expr2 -> 'true'                                    (37)
	Expr2 -> 'false'                                   (38)
	Expr2 -> '!' Expr2                                 (39)
	Expr2 -> DictIdent 'has' 'key' '[' Expr ']'        (40)
	Args -> 'void'                                     (41)
	Args -> Expr                                       (42)
	Args -> Expr ',' Args                              (43)
	Args -> Lambda                                     (44)
	Args -> Lambda ',' Args                            (45)
	Params -> 'none'                                   (46)
	Params -> Type VarIdent                            (47)
	Params -> FType FuncIdent                          (48)
	Params -> Type VarIdent ',' Params                 (49)
	Params -> FType FuncIdent ',' Params               (50)
	Lambda -> FType 'lambda' '(' Params ')' '->' '{' Instr '}'   (51)
	Instr -> Instr1 ';' Instr                          (52)
	Instr -> Instr1                                    (53)
	Instr1 -> 'skip'                                   (54)
	Instr1 -> 'if' '(' Expr ')' '{' Instr '}' 'else' '{' Instr '}'   (55)
	Instr1 -> 'if' '(' Expr ')' '{' Instr '}'          (56)
	Instr1 -> 'while' '(' Expr ')' '{' Instr '}'       (57)
	Instr1 -> 'for' '(' VarIdent '=' Expr 'to' Expr ')' '{' Instr '}'   (58)
	Instr1 -> 'return' '(' Expr ')'                    (59)
	Instr1 -> 'print' '(' Expr ')'                     (60)
	Instr1 -> 'swap' '(' VarIdent ',' VarIdent ')'     (61)
	Instr1 -> 'break' '(' Expr ')'                     (62)
	Instr1 -> 'break'                                  (63)
	Instr1 -> 'continue' 'outer' '(' Expr ')'          (64)
	Instr1 -> 'continue'                               (65)
	Instr1 -> Type VarIdent '=' Expr                   (66)
	Instr1 -> 'Array' Type ArrIdent '[' Expr ']' '(' Expr ')'   (67)
	Instr1 -> 'Array' Type ArrIdent '[' Expr ']'       (68)
	Instr1 -> ArrIdent '[' Expr ']' '=' '(' Expr ')'   (69)
	Instr1 -> 'Dict' Type DictIdent                    (70)
	Instr1 -> DictIdent '[' Expr ']' 'set' '(' Expr ')'   (71)
	Instr1 -> FType FuncIdent '(' Params ')' '{' Instr '}'   (72)
	Instr1 -> VarIdent '=' Expr                        (73)
	Instr1 -> VarIdent '+=' Expr                       (74)
	Instr1 -> VarIdent '-=' Expr                       (75)
	Instr1 -> VarIdent '*=' Expr                       (76)
	Instr1 -> VarIdent '/=' Expr                       (77)
	Instr1 -> VarIdent '%=' Expr                       (78)
	Instr1 -> 'debug' 'assignment' 'enable' VarIdent   (79)
	Instr1 -> 'debug' 'assignment' 'disable' VarIdent   (80)
	Instr1 -> 'debug' 'reading' 'enable' VarIdent      (81)
	Instr1 -> 'debug' 'reading' 'disable' VarIdent     (82)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	'!'            { PT _ (TS _ 1) }
	'!='           { PT _ (TS _ 2) }
	'%'            { PT _ (TS _ 3) }
	'%='           { PT _ (TS _ 4) }
	'('            { PT _ (TS _ 5) }
	')'            { PT _ (TS _ 6) }
	'*'            { PT _ (TS _ 7) }
	'*='           { PT _ (TS _ 8) }
	'+'            { PT _ (TS _ 9) }
	'++'           { PT _ (TS _ 10) }
	'+='           { PT _ (TS _ 11) }
	','            { PT _ (TS _ 12) }
	'-'            { PT _ (TS _ 13) }
	'--'           { PT _ (TS _ 14) }
	'-='           { PT _ (TS _ 15) }
	'->'           { PT _ (TS _ 16) }
	'/'            { PT _ (TS _ 17) }
	'/='           { PT _ (TS _ 18) }
	';'            { PT _ (TS _ 19) }
	'<'            { PT _ (TS _ 20) }
	'<='           { PT _ (TS _ 21) }
	'='            { PT _ (TS _ 22) }
	'=='           { PT _ (TS _ 23) }
	'>'            { PT _ (TS _ 24) }
	'>='           { PT _ (TS _ 25) }
	'Array'        { PT _ (TS _ 26) }
	'Bool'         { PT _ (TS _ 27) }
	'BoolFunc'     { PT _ (TS _ 28) }
	'Dict'         { PT _ (TS _ 29) }
	'Int'          { PT _ (TS _ 30) }
	'IntFunc'      { PT _ (TS _ 31) }
	'['            { PT _ (TS _ 32) }
	']'            { PT _ (TS _ 33) }
	'and'          { PT _ (TS _ 34) }
	'assignment'   { PT _ (TS _ 35) }
	'break'        { PT _ (TS _ 36) }
	'continue'     { PT _ (TS _ 37) }
	'debug'        { PT _ (TS _ 38) }
	'disable'      { PT _ (TS _ 39) }
	'else'         { PT _ (TS _ 40) }
	'enable'       { PT _ (TS _ 41) }
	'false'        { PT _ (TS _ 42) }
	'for'          { PT _ (TS _ 43) }
	'get'          { PT _ (TS _ 44) }
	'has'          { PT _ (TS _ 45) }
	'if'           { PT _ (TS _ 46) }
	'key'          { PT _ (TS _ 47) }
	'lambda'       { PT _ (TS _ 48) }
	'none'         { PT _ (TS _ 49) }
	'or'           { PT _ (TS _ 50) }
	'outer'        { PT _ (TS _ 51) }
	'print'        { PT _ (TS _ 52) }
	'reading'      { PT _ (TS _ 53) }
	'return'       { PT _ (TS _ 54) }
	'set'          { PT _ (TS _ 55) }
	'skip'         { PT _ (TS _ 56) }
	'swap'         { PT _ (TS _ 57) }
	'to'           { PT _ (TS _ 58) }
	'true'         { PT _ (TS _ 59) }
	'void'         { PT _ (TS _ 60) }
	'while'        { PT _ (TS _ 61) }
	'xor'          { PT _ (TS _ 62) }
	'{'            { PT _ (TS _ 63) }
	'}'            { PT _ (TS _ 64) }
	L_Ident        { PT _ (TV $$) }
	L_integ        { PT _ (TI $$) }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_pInstr   rule  0
	Ident           rule  1
	Integer         rule  2
	Type            rules 3, 4
	FType           rules 5, 6
	VarIdent        rule  7
	ArrIdent        rule  8
	DictIdent       rule  9
	FuncIdent       rule  10
	Expr            rules 11, 12, 13, 14, 15, 16, 17, 18
	Expr1           rules 19, 20, 21, 22, 23, 24, 25, 26, 27, 28
	Expr2           rules 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40
	Args            rules 41, 42, 43, 44, 45
	Params          rules 46, 47, 48, 49, 50
	Lambda          rule  51
	Instr           rules 52, 53
	Instr1          rules 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0

	%start_pInstr -> . Instr                            (rule 0)

	'Array'        shift, and enter state 11
	'Bool'         shift, and enter state 12
	'BoolFunc'     shift, and enter state 13
	'Dict'         shift, and enter state 14
	'Int'          shift, and enter state 15
	'IntFunc'      shift, and enter state 16
	'break'        shift, and enter state 17
	'continue'     shift, and enter state 18
	'debug'        shift, and enter state 19
	'for'          shift, and enter state 20
	'if'           shift, and enter state 21
	'print'        shift, and enter state 22
	'return'       shift, and enter state 23
	'skip'         shift, and enter state 24
	'swap'         shift, and enter state 25
	'while'        shift, and enter state 26
	L_Ident        shift, and enter state 2

	Ident          goto state 3
	Type           goto state 4
	FType          goto state 5
	VarIdent       goto state 6
	ArrIdent       goto state 7
	DictIdent      goto state 8
	Instr          goto state 9
	Instr1         goto state 10

State 1

	Ident -> . L_Ident                                  (rule 1)

	L_Ident        shift, and enter state 2


State 2

	Ident -> L_Ident .                                  (rule 1)

	'!='           reduce using rule 1
	'%'            reduce using rule 1
	'%='           reduce using rule 1
	'('            reduce using rule 1
	')'            reduce using rule 1
	'*'            reduce using rule 1
	'*='           reduce using rule 1
	'+'            reduce using rule 1
	'++'           reduce using rule 1
	'+='           reduce using rule 1
	','            reduce using rule 1
	'-'            reduce using rule 1
	'--'           reduce using rule 1
	'-='           reduce using rule 1
	'/'            reduce using rule 1
	'/='           reduce using rule 1
	';'            reduce using rule 1
	'<'            reduce using rule 1
	'<='           reduce using rule 1
	'='            reduce using rule 1
	'=='           reduce using rule 1
	'>'            reduce using rule 1
	'>='           reduce using rule 1
	'['            reduce using rule 1
	']'            reduce using rule 1
	'and'          reduce using rule 1
	'get'          reduce using rule 1
	'has'          reduce using rule 1
	'or'           reduce using rule 1
	'to'           reduce using rule 1
	'xor'          reduce using rule 1
	'}'            reduce using rule 1
	%eof           reduce using rule 1


State 3

	VarIdent -> Ident .                                 (rule 7)
	ArrIdent -> Ident .                                 (rule 8)
	DictIdent -> Ident .                                (rule 9)

	'%='           reduce using rule 7
	'*='           reduce using rule 7
	'++'           reduce using rule 7
	'+='           reduce using rule 7
	'--'           reduce using rule 7
	'-='           reduce using rule 7
	'/='           reduce using rule 7
	'='            reduce using rule 7
	'['            reduce using rule 9
			(reduce using rule 8)

	'get'          reduce using rule 9
	'has'          reduce using rule 9


State 4

	Instr1 -> Type . VarIdent '=' Expr                  (rule 66)

	L_Ident        shift, and enter state 2

	Ident          goto state 50
	VarIdent       goto state 51

State 5

	Instr1 -> FType . FuncIdent '(' Params ')' '{' Instr '}'    (rule 72)

	L_Ident        shift, and enter state 2

	Ident          goto state 48
	FuncIdent      goto state 49

State 6

	Instr1 -> VarIdent . '=' Expr                       (rule 73)
	Instr1 -> VarIdent . '+=' Expr                      (rule 74)
	Instr1 -> VarIdent . '-=' Expr                      (rule 75)
	Instr1 -> VarIdent . '*=' Expr                      (rule 76)
	Instr1 -> VarIdent . '/=' Expr                      (rule 77)
	Instr1 -> VarIdent . '%=' Expr                      (rule 78)

	'%='           shift, and enter state 42
	'*='           shift, and enter state 43
	'+='           shift, and enter state 44
	'-='           shift, and enter state 45
	'/='           shift, and enter state 46
	'='            shift, and enter state 47


State 7

	Instr1 -> ArrIdent . '[' Expr ']' '=' '(' Expr ')'    (rule 69)

	'['            shift, and enter state 41


State 8

	Instr1 -> DictIdent . '[' Expr ']' 'set' '(' Expr ')'    (rule 71)

	'['            shift, and enter state 40


State 9

	%start_pInstr -> Instr .                            (rule 0)

	%eof           accept


State 10

	Instr -> Instr1 . ';' Instr                         (rule 52)
	Instr -> Instr1 .                                   (rule 53)

	';'            shift, and enter state 39
	'}'            reduce using rule 53
	%eof           reduce using rule 53


State 11

	Instr1 -> 'Array' . Type ArrIdent '[' Expr ']' '(' Expr ')'    (rule 67)
	Instr1 -> 'Array' . Type ArrIdent '[' Expr ']'      (rule 68)

	'Bool'         shift, and enter state 12
	'Int'          shift, and enter state 15

	Type           goto state 38

State 12

	Type -> 'Bool' .                                    (rule 4)

	L_Ident        reduce using rule 4


State 13

	FType -> 'BoolFunc' .                               (rule 6)

	'lambda'       reduce using rule 6
	L_Ident        reduce using rule 6


State 14

	Instr1 -> 'Dict' . Type DictIdent                   (rule 70)

	'Bool'         shift, and enter state 12
	'Int'          shift, and enter state 15

	Type           goto state 37

State 15

	Type -> 'Int' .                                     (rule 3)

	L_Ident        reduce using rule 3


State 16

	FType -> 'IntFunc' .                                (rule 5)

	'lambda'       reduce using rule 5
	L_Ident        reduce using rule 5


State 17

	Instr1 -> 'break' . '(' Expr ')'                    (rule 62)
	Instr1 -> 'break' .                                 (rule 63)

	'('            shift, and enter state 36
	';'            reduce using rule 63
	'}'            reduce using rule 63
	%eof           reduce using rule 63


State 18

	Instr1 -> 'continue' . 'outer' '(' Expr ')'         (rule 64)
	Instr1 -> 'continue' .                              (rule 65)

	';'            reduce using rule 65
	'outer'        shift, and enter state 35
	'}'            reduce using rule 65
	%eof           reduce using rule 65


State 19

	Instr1 -> 'debug' . 'assignment' 'enable' VarIdent    (rule 79)
	Instr1 -> 'debug' . 'assignment' 'disable' VarIdent    (rule 80)
	Instr1 -> 'debug' . 'reading' 'enable' VarIdent     (rule 81)
	Instr1 -> 'debug' . 'reading' 'disable' VarIdent    (rule 82)

	'assignment'   shift, and enter state 33
	'reading'      shift, and enter state 34


State 20

	Instr1 -> 'for' . '(' VarIdent '=' Expr 'to' Expr ')' '{' Instr '}'    (rule 58)

	'('            shift, and enter state 32


State 21

	Instr1 -> 'if' . '(' Expr ')' '{' Instr '}' 'else' '{' Instr '}'    (rule 55)
	Instr1 -> 'if' . '(' Expr ')' '{' Instr '}'         (rule 56)

	'('            shift, and enter state 31


State 22

	Instr1 -> 'print' . '(' Expr ')'                    (rule 60)

	'('            shift, and enter state 30


State 23

	Instr1 -> 'return' . '(' Expr ')'                   (rule 59)

	'('            shift, and enter state 29


State 24

	Instr1 -> 'skip' .                                  (rule 54)

	';'            reduce using rule 54
	'}'            reduce using rule 54
	%eof           reduce using rule 54


State 25

	Instr1 -> 'swap' . '(' VarIdent ',' VarIdent ')'    (rule 61)

	'('            shift, and enter state 28


State 26

	Instr1 -> 'while' . '(' Expr ')' '{' Instr '}'      (rule 57)

	'('            shift, and enter state 27


State 27

	Instr1 -> 'while' '(' . Expr ')' '{' Instr '}'      (rule 57)

	'!'            shift, and enter state 63
	'('            shift, and enter state 64
	'++'           shift, and enter state 65
	'--'           shift, and enter state 66
	'false'        shift, and enter state 67
	'true'         shift, and enter state 68
	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 69

	Ident          goto state 54
	Integer        goto state 55
	VarIdent       goto state 56
	ArrIdent       goto state 57
	DictIdent      goto state 58
	FuncIdent      goto state 59
	Expr           goto state 93
	Expr1          goto state 61
	Expr2          goto state 62

State 28

	Instr1 -> 'swap' '(' . VarIdent ',' VarIdent ')'    (rule 61)

	L_Ident        shift, and enter state 2

	Ident          goto state 50
	VarIdent       goto state 92

State 29

	Instr1 -> 'return' '(' . Expr ')'                   (rule 59)

	'!'            shift, and enter state 63
	'('            shift, and enter state 64
	'++'           shift, and enter state 65
	'--'           shift, and enter state 66
	'false'        shift, and enter state 67
	'true'         shift, and enter state 68
	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 69

	Ident          goto state 54
	Integer        goto state 55
	VarIdent       goto state 56
	ArrIdent       goto state 57
	DictIdent      goto state 58
	FuncIdent      goto state 59
	Expr           goto state 91
	Expr1          goto state 61
	Expr2          goto state 62

State 30

	Instr1 -> 'print' '(' . Expr ')'                    (rule 60)

	'!'            shift, and enter state 63
	'('            shift, and enter state 64
	'++'           shift, and enter state 65
	'--'           shift, and enter state 66
	'false'        shift, and enter state 67
	'true'         shift, and enter state 68
	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 69

	Ident          goto state 54
	Integer        goto state 55
	VarIdent       goto state 56
	ArrIdent       goto state 57
	DictIdent      goto state 58
	FuncIdent      goto state 59
	Expr           goto state 90
	Expr1          goto state 61
	Expr2          goto state 62

State 31

	Instr1 -> 'if' '(' . Expr ')' '{' Instr '}' 'else' '{' Instr '}'    (rule 55)
	Instr1 -> 'if' '(' . Expr ')' '{' Instr '}'         (rule 56)

	'!'            shift, and enter state 63
	'('            shift, and enter state 64
	'++'           shift, and enter state 65
	'--'           shift, and enter state 66
	'false'        shift, and enter state 67
	'true'         shift, and enter state 68
	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 69

	Ident          goto state 54
	Integer        goto state 55
	VarIdent       goto state 56
	ArrIdent       goto state 57
	DictIdent      goto state 58
	FuncIdent      goto state 59
	Expr           goto state 89
	Expr1          goto state 61
	Expr2          goto state 62

State 32

	Instr1 -> 'for' '(' . VarIdent '=' Expr 'to' Expr ')' '{' Instr '}'    (rule 58)

	L_Ident        shift, and enter state 2

	Ident          goto state 50
	VarIdent       goto state 88

State 33

	Instr1 -> 'debug' 'assignment' . 'enable' VarIdent    (rule 79)
	Instr1 -> 'debug' 'assignment' . 'disable' VarIdent    (rule 80)

	'disable'      shift, and enter state 86
	'enable'       shift, and enter state 87


State 34

	Instr1 -> 'debug' 'reading' . 'enable' VarIdent     (rule 81)
	Instr1 -> 'debug' 'reading' . 'disable' VarIdent    (rule 82)

	'disable'      shift, and enter state 84
	'enable'       shift, and enter state 85


State 35

	Instr1 -> 'continue' 'outer' . '(' Expr ')'         (rule 64)

	'('            shift, and enter state 83


State 36

	Instr1 -> 'break' '(' . Expr ')'                    (rule 62)

	'!'            shift, and enter state 63
	'('            shift, and enter state 64
	'++'           shift, and enter state 65
	'--'           shift, and enter state 66
	'false'        shift, and enter state 67
	'true'         shift, and enter state 68
	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 69

	Ident          goto state 54
	Integer        goto state 55
	VarIdent       goto state 56
	ArrIdent       goto state 57
	DictIdent      goto state 58
	FuncIdent      goto state 59
	Expr           goto state 82
	Expr1          goto state 61
	Expr2          goto state 62

State 37

	Instr1 -> 'Dict' Type . DictIdent                   (rule 70)

	L_Ident        shift, and enter state 2

	Ident          goto state 80
	DictIdent      goto state 81

State 38

	Instr1 -> 'Array' Type . ArrIdent '[' Expr ']' '(' Expr ')'    (rule 67)
	Instr1 -> 'Array' Type . ArrIdent '[' Expr ']'      (rule 68)

	L_Ident        shift, and enter state 2

	Ident          goto state 78
	ArrIdent       goto state 79

State 39

	Instr -> Instr1 ';' . Instr                         (rule 52)

	'Array'        shift, and enter state 11
	'Bool'         shift, and enter state 12
	'BoolFunc'     shift, and enter state 13
	'Dict'         shift, and enter state 14
	'Int'          shift, and enter state 15
	'IntFunc'      shift, and enter state 16
	'break'        shift, and enter state 17
	'continue'     shift, and enter state 18
	'debug'        shift, and enter state 19
	'for'          shift, and enter state 20
	'if'           shift, and enter state 21
	'print'        shift, and enter state 22
	'return'       shift, and enter state 23
	'skip'         shift, and enter state 24
	'swap'         shift, and enter state 25
	'while'        shift, and enter state 26
	L_Ident        shift, and enter state 2

	Ident          goto state 3
	Type           goto state 4
	FType          goto state 5
	VarIdent       goto state 6
	ArrIdent       goto state 7
	DictIdent      goto state 8
	Instr          goto state 77
	Instr1         goto state 10

State 40

	Instr1 -> DictIdent '[' . Expr ']' 'set' '(' Expr ')'    (rule 71)

	'!'            shift, and enter state 63
	'('            shift, and enter state 64
	'++'           shift, and enter state 65
	'--'           shift, and enter state 66
	'false'        shift, and enter state 67
	'true'         shift, and enter state 68
	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 69

	Ident          goto state 54
	Integer        goto state 55
	VarIdent       goto state 56
	ArrIdent       goto state 57
	DictIdent      goto state 58
	FuncIdent      goto state 59
	Expr           goto state 76
	Expr1          goto state 61
	Expr2          goto state 62

State 41

	Instr1 -> ArrIdent '[' . Expr ']' '=' '(' Expr ')'    (rule 69)

	'!'            shift, and enter state 63
	'('            shift, and enter state 64
	'++'           shift, and enter state 65
	'--'           shift, and enter state 66
	'false'        shift, and enter state 67
	'true'         shift, and enter state 68
	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 69

	Ident          goto state 54
	Integer        goto state 55
	VarIdent       goto state 56
	ArrIdent       goto state 57
	DictIdent      goto state 58
	FuncIdent      goto state 59
	Expr           goto state 75
	Expr1          goto state 61
	Expr2          goto state 62

State 42

	Instr1 -> VarIdent '%=' . Expr                      (rule 78)

	'!'            shift, and enter state 63
	'('            shift, and enter state 64
	'++'           shift, and enter state 65
	'--'           shift, and enter state 66
	'false'        shift, and enter state 67
	'true'         shift, and enter state 68
	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 69

	Ident          goto state 54
	Integer        goto state 55
	VarIdent       goto state 56
	ArrIdent       goto state 57
	DictIdent      goto state 58
	FuncIdent      goto state 59
	Expr           goto state 74
	Expr1          goto state 61
	Expr2          goto state 62

State 43

	Instr1 -> VarIdent '*=' . Expr                      (rule 76)

	'!'            shift, and enter state 63
	'('            shift, and enter state 64
	'++'           shift, and enter state 65
	'--'           shift, and enter state 66
	'false'        shift, and enter state 67
	'true'         shift, and enter state 68
	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 69

	Ident          goto state 54
	Integer        goto state 55
	VarIdent       goto state 56
	ArrIdent       goto state 57
	DictIdent      goto state 58
	FuncIdent      goto state 59
	Expr           goto state 73
	Expr1          goto state 61
	Expr2          goto state 62

State 44

	Instr1 -> VarIdent '+=' . Expr                      (rule 74)

	'!'            shift, and enter state 63
	'('            shift, and enter state 64
	'++'           shift, and enter state 65
	'--'           shift, and enter state 66
	'false'        shift, and enter state 67
	'true'         shift, and enter state 68
	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 69

	Ident          goto state 54
	Integer        goto state 55
	VarIdent       goto state 56
	ArrIdent       goto state 57
	DictIdent      goto state 58
	FuncIdent      goto state 59
	Expr           goto state 72
	Expr1          goto state 61
	Expr2          goto state 62

State 45

	Instr1 -> VarIdent '-=' . Expr                      (rule 75)

	'!'            shift, and enter state 63
	'('            shift, and enter state 64
	'++'           shift, and enter state 65
	'--'           shift, and enter state 66
	'false'        shift, and enter state 67
	'true'         shift, and enter state 68
	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 69

	Ident          goto state 54
	Integer        goto state 55
	VarIdent       goto state 56
	ArrIdent       goto state 57
	DictIdent      goto state 58
	FuncIdent      goto state 59
	Expr           goto state 71
	Expr1          goto state 61
	Expr2          goto state 62

State 46

	Instr1 -> VarIdent '/=' . Expr                      (rule 77)

	'!'            shift, and enter state 63
	'('            shift, and enter state 64
	'++'           shift, and enter state 65
	'--'           shift, and enter state 66
	'false'        shift, and enter state 67
	'true'         shift, and enter state 68
	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 69

	Ident          goto state 54
	Integer        goto state 55
	VarIdent       goto state 56
	ArrIdent       goto state 57
	DictIdent      goto state 58
	FuncIdent      goto state 59
	Expr           goto state 70
	Expr1          goto state 61
	Expr2          goto state 62

State 47

	Instr1 -> VarIdent '=' . Expr                       (rule 73)

	'!'            shift, and enter state 63
	'('            shift, and enter state 64
	'++'           shift, and enter state 65
	'--'           shift, and enter state 66
	'false'        shift, and enter state 67
	'true'         shift, and enter state 68
	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 69

	Ident          goto state 54
	Integer        goto state 55
	VarIdent       goto state 56
	ArrIdent       goto state 57
	DictIdent      goto state 58
	FuncIdent      goto state 59
	Expr           goto state 60
	Expr1          goto state 61
	Expr2          goto state 62

State 48

	FuncIdent -> Ident .                                (rule 10)

	'('            reduce using rule 10
	')'            reduce using rule 10
	','            reduce using rule 10


State 49

	Instr1 -> FType FuncIdent . '(' Params ')' '{' Instr '}'    (rule 72)

	'('            shift, and enter state 53


State 50

	VarIdent -> Ident .                                 (rule 7)

	'!='           reduce using rule 7
	'%'            reduce using rule 7
	')'            reduce using rule 7
	'*'            reduce using rule 7
	'+'            reduce using rule 7
	','            reduce using rule 7
	'-'            reduce using rule 7
	'/'            reduce using rule 7
	';'            reduce using rule 7
	'<'            reduce using rule 7
	'<='           reduce using rule 7
	'='            reduce using rule 7
	'=='           reduce using rule 7
	'>'            reduce using rule 7
	'>='           reduce using rule 7
	']'            reduce using rule 7
	'and'          reduce using rule 7
	'or'           reduce using rule 7
	'to'           reduce using rule 7
	'xor'          reduce using rule 7
	'}'            reduce using rule 7
	%eof           reduce using rule 7


State 51

	Instr1 -> Type VarIdent . '=' Expr                  (rule 66)

	'='            shift, and enter state 52


State 52

	Instr1 -> Type VarIdent '=' . Expr                  (rule 66)

	'!'            shift, and enter state 63
	'('            shift, and enter state 64
	'++'           shift, and enter state 65
	'--'           shift, and enter state 66
	'false'        shift, and enter state 67
	'true'         shift, and enter state 68
	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 69

	Ident          goto state 54
	Integer        goto state 55
	VarIdent       goto state 56
	ArrIdent       goto state 57
	DictIdent      goto state 58
	FuncIdent      goto state 59
	Expr           goto state 138
	Expr1          goto state 61
	Expr2          goto state 62

State 53

	Instr1 -> FType FuncIdent '(' . Params ')' '{' Instr '}'    (rule 72)

	'Bool'         shift, and enter state 12
	'BoolFunc'     shift, and enter state 13
	'Int'          shift, and enter state 15
	'IntFunc'      shift, and enter state 16
	'none'         shift, and enter state 137

	Type           goto state 134
	FType          goto state 135
	Params         goto state 136

State 54

	VarIdent -> Ident .                                 (rule 7)
	ArrIdent -> Ident .                                 (rule 8)
	DictIdent -> Ident .                                (rule 9)
	FuncIdent -> Ident .                                (rule 10)

	'('            reduce using rule 10
	')'            reduce using rule 7
	'+'            reduce using rule 7
	'++'           reduce using rule 7
	','            reduce using rule 7
	'-'            reduce using rule 7
	'--'           reduce using rule 7
	';'            reduce using rule 7
	'['            reduce using rule 8
	']'            reduce using rule 7
	'and'          reduce using rule 7
	'get'          reduce using rule 9
	'has'          reduce using rule 9
	'or'           reduce using rule 7
	'to'           reduce using rule 7
	'xor'          reduce using rule 7
	'}'            reduce using rule 7
	%eof           reduce using rule 7


State 55

	Expr2 -> Integer .                                  (rule 29)

	'!='           reduce using rule 29
	'%'            reduce using rule 29
	')'            reduce using rule 29
	'*'            reduce using rule 29
	'+'            reduce using rule 29
	','            reduce using rule 29
	'-'            reduce using rule 29
	'/'            reduce using rule 29
	';'            reduce using rule 29
	'<'            reduce using rule 29
	'<='           reduce using rule 29
	'=='           reduce using rule 29
	'>'            reduce using rule 29
	'>='           reduce using rule 29
	']'            reduce using rule 29
	'and'          reduce using rule 29
	'or'           reduce using rule 29
	'to'           reduce using rule 29
	'xor'          reduce using rule 29
	'}'            reduce using rule 29
	%eof           reduce using rule 29


State 56

	Expr -> VarIdent .                                  (rule 12)
	Expr2 -> VarIdent . '++'                            (rule 30)
	Expr2 -> VarIdent . '--'                            (rule 32)

	')'            reduce using rule 12
	'+'            reduce using rule 12
	'++'           shift, and enter state 132
	','            reduce using rule 12
	'-'            reduce using rule 12
	'--'           shift, and enter state 133
	';'            reduce using rule 12
	']'            reduce using rule 12
	'and'          reduce using rule 12
	'or'           reduce using rule 12
	'to'           reduce using rule 12
	'xor'          reduce using rule 12
	'}'            reduce using rule 12
	%eof           reduce using rule 12


State 57

	Expr2 -> ArrIdent . '[' Expr ']'                    (rule 34)

	'['            shift, and enter state 131


State 58

	Expr2 -> DictIdent . 'get' '[' Expr ']'             (rule 35)
	Expr2 -> DictIdent . 'has' 'key' '[' Expr ']'       (rule 40)

	'get'          shift, and enter state 129
	'has'          shift, and enter state 130


State 59

	Expr -> FuncIdent . '(' Args ')'                    (rule 11)

	'('            shift, and enter state 128


State 60

	Expr -> Expr . '+' Expr1                            (rule 13)
	Expr -> Expr . '-' Expr1                            (rule 14)
	Expr -> Expr . 'or' Expr1                           (rule 16)
	Expr -> Expr . 'and' Expr1                          (rule 17)
	Expr -> Expr . 'xor' Expr1                          (rule 18)
	Instr1 -> VarIdent '=' Expr .                       (rule 73)

	'+'            shift, and enter state 95
	'-'            shift, and enter state 96
	';'            reduce using rule 73
	'and'          shift, and enter state 97
	'or'           shift, and enter state 98
	'xor'          shift, and enter state 99
	'}'            reduce using rule 73
	%eof           reduce using rule 73


State 61

	Expr -> Expr1 .                                     (rule 15)
	Expr1 -> Expr1 . '/' Expr2                          (rule 19)
	Expr1 -> Expr1 . '*' Expr2                          (rule 20)
	Expr1 -> Expr1 . '%' Expr2                          (rule 21)
	Expr1 -> Expr1 . '==' Expr2                         (rule 23)
	Expr1 -> Expr1 . '<=' Expr2                         (rule 24)
	Expr1 -> Expr1 . '>=' Expr2                         (rule 25)
	Expr1 -> Expr1 . '<' Expr2                          (rule 26)
	Expr1 -> Expr1 . '>' Expr2                          (rule 27)
	Expr1 -> Expr1 . '!=' Expr2                         (rule 28)

	'!='           shift, and enter state 119
	'%'            shift, and enter state 120
	')'            reduce using rule 15
	'*'            shift, and enter state 121
	'+'            reduce using rule 15
	','            reduce using rule 15
	'-'            reduce using rule 15
	'/'            shift, and enter state 122
	';'            reduce using rule 15
	'<'            shift, and enter state 123
	'<='           shift, and enter state 124
	'=='           shift, and enter state 125
	'>'            shift, and enter state 126
	'>='           shift, and enter state 127
	']'            reduce using rule 15
	'and'          reduce using rule 15
	'or'           reduce using rule 15
	'to'           reduce using rule 15
	'xor'          reduce using rule 15
	'}'            reduce using rule 15
	%eof           reduce using rule 15


State 62

	Expr1 -> Expr2 .                                    (rule 22)

	'!='           reduce using rule 22
	'%'            reduce using rule 22
	')'            reduce using rule 22
	'*'            reduce using rule 22
	'+'            reduce using rule 22
	','            reduce using rule 22
	'-'            reduce using rule 22
	'/'            reduce using rule 22
	';'            reduce using rule 22
	'<'            reduce using rule 22
	'<='           reduce using rule 22
	'=='           reduce using rule 22
	'>'            reduce using rule 22
	'>='           reduce using rule 22
	']'            reduce using rule 22
	'and'          reduce using rule 22
	'or'           reduce using rule 22
	'to'           reduce using rule 22
	'xor'          reduce using rule 22
	'}'            reduce using rule 22
	%eof           reduce using rule 22


State 63

	Expr2 -> '!' . Expr2                                (rule 39)

	'!'            shift, and enter state 63
	'('            shift, and enter state 64
	'++'           shift, and enter state 65
	'--'           shift, and enter state 66
	'false'        shift, and enter state 67
	'true'         shift, and enter state 68
	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 69

	Ident          goto state 3
	Integer        goto state 55
	VarIdent       goto state 117
	ArrIdent       goto state 57
	DictIdent      goto state 58
	Expr2          goto state 118

State 64

	Expr2 -> '(' . Expr ')'                             (rule 36)

	'!'            shift, and enter state 63
	'('            shift, and enter state 64
	'++'           shift, and enter state 65
	'--'           shift, and enter state 66
	'false'        shift, and enter state 67
	'true'         shift, and enter state 68
	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 69

	Ident          goto state 54
	Integer        goto state 55
	VarIdent       goto state 56
	ArrIdent       goto state 57
	DictIdent      goto state 58
	FuncIdent      goto state 59
	Expr           goto state 116
	Expr1          goto state 61
	Expr2          goto state 62

State 65

	Expr2 -> '++' . VarIdent                            (rule 31)

	L_Ident        shift, and enter state 2

	Ident          goto state 50
	VarIdent       goto state 115

State 66

	Expr2 -> '--' . VarIdent                            (rule 33)

	L_Ident        shift, and enter state 2

	Ident          goto state 50
	VarIdent       goto state 114

State 67

	Expr2 -> 'false' .                                  (rule 38)

	'!='           reduce using rule 38
	'%'            reduce using rule 38
	')'            reduce using rule 38
	'*'            reduce using rule 38
	'+'            reduce using rule 38
	','            reduce using rule 38
	'-'            reduce using rule 38
	'/'            reduce using rule 38
	';'            reduce using rule 38
	'<'            reduce using rule 38
	'<='           reduce using rule 38
	'=='           reduce using rule 38
	'>'            reduce using rule 38
	'>='           reduce using rule 38
	']'            reduce using rule 38
	'and'          reduce using rule 38
	'or'           reduce using rule 38
	'to'           reduce using rule 38
	'xor'          reduce using rule 38
	'}'            reduce using rule 38
	%eof           reduce using rule 38


State 68

	Expr2 -> 'true' .                                   (rule 37)

	'!='           reduce using rule 37
	'%'            reduce using rule 37
	')'            reduce using rule 37
	'*'            reduce using rule 37
	'+'            reduce using rule 37
	','            reduce using rule 37
	'-'            reduce using rule 37
	'/'            reduce using rule 37
	';'            reduce using rule 37
	'<'            reduce using rule 37
	'<='           reduce using rule 37
	'=='           reduce using rule 37
	'>'            reduce using rule 37
	'>='           reduce using rule 37
	']'            reduce using rule 37
	'and'          reduce using rule 37
	'or'           reduce using rule 37
	'to'           reduce using rule 37
	'xor'          reduce using rule 37
	'}'            reduce using rule 37
	%eof           reduce using rule 37


State 69

	Integer -> L_integ .                                (rule 2)

	'!='           reduce using rule 2
	'%'            reduce using rule 2
	')'            reduce using rule 2
	'*'            reduce using rule 2
	'+'            reduce using rule 2
	','            reduce using rule 2
	'-'            reduce using rule 2
	'/'            reduce using rule 2
	';'            reduce using rule 2
	'<'            reduce using rule 2
	'<='           reduce using rule 2
	'=='           reduce using rule 2
	'>'            reduce using rule 2
	'>='           reduce using rule 2
	']'            reduce using rule 2
	'and'          reduce using rule 2
	'or'           reduce using rule 2
	'to'           reduce using rule 2
	'xor'          reduce using rule 2
	'}'            reduce using rule 2
	%eof           reduce using rule 2


State 70

	Expr -> Expr . '+' Expr1                            (rule 13)
	Expr -> Expr . '-' Expr1                            (rule 14)
	Expr -> Expr . 'or' Expr1                           (rule 16)
	Expr -> Expr . 'and' Expr1                          (rule 17)
	Expr -> Expr . 'xor' Expr1                          (rule 18)
	Instr1 -> VarIdent '/=' Expr .                      (rule 77)

	'+'            shift, and enter state 95
	'-'            shift, and enter state 96
	';'            reduce using rule 77
	'and'          shift, and enter state 97
	'or'           shift, and enter state 98
	'xor'          shift, and enter state 99
	'}'            reduce using rule 77
	%eof           reduce using rule 77


State 71

	Expr -> Expr . '+' Expr1                            (rule 13)
	Expr -> Expr . '-' Expr1                            (rule 14)
	Expr -> Expr . 'or' Expr1                           (rule 16)
	Expr -> Expr . 'and' Expr1                          (rule 17)
	Expr -> Expr . 'xor' Expr1                          (rule 18)
	Instr1 -> VarIdent '-=' Expr .                      (rule 75)

	'+'            shift, and enter state 95
	'-'            shift, and enter state 96
	';'            reduce using rule 75
	'and'          shift, and enter state 97
	'or'           shift, and enter state 98
	'xor'          shift, and enter state 99
	'}'            reduce using rule 75
	%eof           reduce using rule 75


State 72

	Expr -> Expr . '+' Expr1                            (rule 13)
	Expr -> Expr . '-' Expr1                            (rule 14)
	Expr -> Expr . 'or' Expr1                           (rule 16)
	Expr -> Expr . 'and' Expr1                          (rule 17)
	Expr -> Expr . 'xor' Expr1                          (rule 18)
	Instr1 -> VarIdent '+=' Expr .                      (rule 74)

	'+'            shift, and enter state 95
	'-'            shift, and enter state 96
	';'            reduce using rule 74
	'and'          shift, and enter state 97
	'or'           shift, and enter state 98
	'xor'          shift, and enter state 99
	'}'            reduce using rule 74
	%eof           reduce using rule 74


State 73

	Expr -> Expr . '+' Expr1                            (rule 13)
	Expr -> Expr . '-' Expr1                            (rule 14)
	Expr -> Expr . 'or' Expr1                           (rule 16)
	Expr -> Expr . 'and' Expr1                          (rule 17)
	Expr -> Expr . 'xor' Expr1                          (rule 18)
	Instr1 -> VarIdent '*=' Expr .                      (rule 76)

	'+'            shift, and enter state 95
	'-'            shift, and enter state 96
	';'            reduce using rule 76
	'and'          shift, and enter state 97
	'or'           shift, and enter state 98
	'xor'          shift, and enter state 99
	'}'            reduce using rule 76
	%eof           reduce using rule 76


State 74

	Expr -> Expr . '+' Expr1                            (rule 13)
	Expr -> Expr . '-' Expr1                            (rule 14)
	Expr -> Expr . 'or' Expr1                           (rule 16)
	Expr -> Expr . 'and' Expr1                          (rule 17)
	Expr -> Expr . 'xor' Expr1                          (rule 18)
	Instr1 -> VarIdent '%=' Expr .                      (rule 78)

	'+'            shift, and enter state 95
	'-'            shift, and enter state 96
	';'            reduce using rule 78
	'and'          shift, and enter state 97
	'or'           shift, and enter state 98
	'xor'          shift, and enter state 99
	'}'            reduce using rule 78
	%eof           reduce using rule 78


State 75

	Expr -> Expr . '+' Expr1                            (rule 13)
	Expr -> Expr . '-' Expr1                            (rule 14)
	Expr -> Expr . 'or' Expr1                           (rule 16)
	Expr -> Expr . 'and' Expr1                          (rule 17)
	Expr -> Expr . 'xor' Expr1                          (rule 18)
	Instr1 -> ArrIdent '[' Expr . ']' '=' '(' Expr ')'    (rule 69)

	'+'            shift, and enter state 95
	'-'            shift, and enter state 96
	']'            shift, and enter state 113
	'and'          shift, and enter state 97
	'or'           shift, and enter state 98
	'xor'          shift, and enter state 99


State 76

	Expr -> Expr . '+' Expr1                            (rule 13)
	Expr -> Expr . '-' Expr1                            (rule 14)
	Expr -> Expr . 'or' Expr1                           (rule 16)
	Expr -> Expr . 'and' Expr1                          (rule 17)
	Expr -> Expr . 'xor' Expr1                          (rule 18)
	Instr1 -> DictIdent '[' Expr . ']' 'set' '(' Expr ')'    (rule 71)

	'+'            shift, and enter state 95
	'-'            shift, and enter state 96
	']'            shift, and enter state 112
	'and'          shift, and enter state 97
	'or'           shift, and enter state 98
	'xor'          shift, and enter state 99


State 77

	Instr -> Instr1 ';' Instr .                         (rule 52)

	'}'            reduce using rule 52
	%eof           reduce using rule 52


State 78

	ArrIdent -> Ident .                                 (rule 8)

	'['            reduce using rule 8


State 79

	Instr1 -> 'Array' Type ArrIdent . '[' Expr ']' '(' Expr ')'    (rule 67)
	Instr1 -> 'Array' Type ArrIdent . '[' Expr ']'      (rule 68)

	'['            shift, and enter state 111


State 80

	DictIdent -> Ident .                                (rule 9)

	';'            reduce using rule 9
	'}'            reduce using rule 9
	%eof           reduce using rule 9


State 81

	Instr1 -> 'Dict' Type DictIdent .                   (rule 70)

	';'            reduce using rule 70
	'}'            reduce using rule 70
	%eof           reduce using rule 70


State 82

	Expr -> Expr . '+' Expr1                            (rule 13)
	Expr -> Expr . '-' Expr1                            (rule 14)
	Expr -> Expr . 'or' Expr1                           (rule 16)
	Expr -> Expr . 'and' Expr1                          (rule 17)
	Expr -> Expr . 'xor' Expr1                          (rule 18)
	Instr1 -> 'break' '(' Expr . ')'                    (rule 62)

	')'            shift, and enter state 110
	'+'            shift, and enter state 95
	'-'            shift, and enter state 96
	'and'          shift, and enter state 97
	'or'           shift, and enter state 98
	'xor'          shift, and enter state 99


State 83

	Instr1 -> 'continue' 'outer' '(' . Expr ')'         (rule 64)

	'!'            shift, and enter state 63
	'('            shift, and enter state 64
	'++'           shift, and enter state 65
	'--'           shift, and enter state 66
	'false'        shift, and enter state 67
	'true'         shift, and enter state 68
	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 69

	Ident          goto state 54
	Integer        goto state 55
	VarIdent       goto state 56
	ArrIdent       goto state 57
	DictIdent      goto state 58
	FuncIdent      goto state 59
	Expr           goto state 109
	Expr1          goto state 61
	Expr2          goto state 62

State 84

	Instr1 -> 'debug' 'reading' 'disable' . VarIdent    (rule 82)

	L_Ident        shift, and enter state 2

	Ident          goto state 50
	VarIdent       goto state 108

State 85

	Instr1 -> 'debug' 'reading' 'enable' . VarIdent     (rule 81)

	L_Ident        shift, and enter state 2

	Ident          goto state 50
	VarIdent       goto state 107

State 86

	Instr1 -> 'debug' 'assignment' 'disable' . VarIdent    (rule 80)

	L_Ident        shift, and enter state 2

	Ident          goto state 50
	VarIdent       goto state 106

State 87

	Instr1 -> 'debug' 'assignment' 'enable' . VarIdent    (rule 79)

	L_Ident        shift, and enter state 2

	Ident          goto state 50
	VarIdent       goto state 105

State 88

	Instr1 -> 'for' '(' VarIdent . '=' Expr 'to' Expr ')' '{' Instr '}'    (rule 58)

	'='            shift, and enter state 104


State 89

	Expr -> Expr . '+' Expr1                            (rule 13)
	Expr -> Expr . '-' Expr1                            (rule 14)
	Expr -> Expr . 'or' Expr1                           (rule 16)
	Expr -> Expr . 'and' Expr1                          (rule 17)
	Expr -> Expr . 'xor' Expr1                          (rule 18)
	Instr1 -> 'if' '(' Expr . ')' '{' Instr '}' 'else' '{' Instr '}'    (rule 55)
	Instr1 -> 'if' '(' Expr . ')' '{' Instr '}'         (rule 56)

	')'            shift, and enter state 103
	'+'            shift, and enter state 95
	'-'            shift, and enter state 96
	'and'          shift, and enter state 97
	'or'           shift, and enter state 98
	'xor'          shift, and enter state 99


State 90

	Expr -> Expr . '+' Expr1                            (rule 13)
	Expr -> Expr . '-' Expr1                            (rule 14)
	Expr -> Expr . 'or' Expr1                           (rule 16)
	Expr -> Expr . 'and' Expr1                          (rule 17)
	Expr -> Expr . 'xor' Expr1                          (rule 18)
	Instr1 -> 'print' '(' Expr . ')'                    (rule 60)

	')'            shift, and enter state 102
	'+'            shift, and enter state 95
	'-'            shift, and enter state 96
	'and'          shift, and enter state 97
	'or'           shift, and enter state 98
	'xor'          shift, and enter state 99


State 91

	Expr -> Expr . '+' Expr1                            (rule 13)
	Expr -> Expr . '-' Expr1                            (rule 14)
	Expr -> Expr . 'or' Expr1                           (rule 16)
	Expr -> Expr . 'and' Expr1                          (rule 17)
	Expr -> Expr . 'xor' Expr1                          (rule 18)
	Instr1 -> 'return' '(' Expr . ')'                   (rule 59)

	')'            shift, and enter state 101
	'+'            shift, and enter state 95
	'-'            shift, and enter state 96
	'and'          shift, and enter state 97
	'or'           shift, and enter state 98
	'xor'          shift, and enter state 99


State 92

	Instr1 -> 'swap' '(' VarIdent . ',' VarIdent ')'    (rule 61)

	','            shift, and enter state 100


State 93

	Expr -> Expr . '+' Expr1                            (rule 13)
	Expr -> Expr . '-' Expr1                            (rule 14)
	Expr -> Expr . 'or' Expr1                           (rule 16)
	Expr -> Expr . 'and' Expr1                          (rule 17)
	Expr -> Expr . 'xor' Expr1                          (rule 18)
	Instr1 -> 'while' '(' Expr . ')' '{' Instr '}'      (rule 57)

	')'            shift, and enter state 94
	'+'            shift, and enter state 95
	'-'            shift, and enter state 96
	'and'          shift, and enter state 97
	'or'           shift, and enter state 98
	'xor'          shift, and enter state 99


State 94

	Instr1 -> 'while' '(' Expr ')' . '{' Instr '}'      (rule 57)

	'{'            shift, and enter state 172


State 95

	Expr -> Expr '+' . Expr1                            (rule 13)

	'!'            shift, and enter state 63
	'('            shift, and enter state 64
	'++'           shift, and enter state 65
	'--'           shift, and enter state 66
	'false'        shift, and enter state 67
	'true'         shift, and enter state 68
	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 69

	Ident          goto state 3
	Integer        goto state 55
	VarIdent       goto state 117
	ArrIdent       goto state 57
	DictIdent      goto state 58
	Expr1          goto state 171
	Expr2          goto state 62

State 96

	Expr -> Expr '-' . Expr1                            (rule 14)

	'!'            shift, and enter state 63
	'('            shift, and enter state 64
	'++'           shift, and enter state 65
	'--'           shift, and enter state 66
	'false'        shift, and enter state 67
	'true'         shift, and enter state 68
	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 69

	Ident          goto state 3
	Integer        goto state 55
	VarIdent       goto state 117
	ArrIdent       goto state 57
	DictIdent      goto state 58
	Expr1          goto state 170
	Expr2          goto state 62

State 97

	Expr -> Expr 'and' . Expr1                          (rule 17)

	'!'            shift, and enter state 63
	'('            shift, and enter state 64
	'++'           shift, and enter state 65
	'--'           shift, and enter state 66
	'false'        shift, and enter state 67
	'true'         shift, and enter state 68
	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 69

	Ident          goto state 3
	Integer        goto state 55
	VarIdent       goto state 117
	ArrIdent       goto state 57
	DictIdent      goto state 58
	Expr1          goto state 169
	Expr2          goto state 62

State 98

	Expr -> Expr 'or' . Expr1                           (rule 16)

	'!'            shift, and enter state 63
	'('            shift, and enter state 64
	'++'           shift, and enter state 65
	'--'           shift, and enter state 66
	'false'        shift, and enter state 67
	'true'         shift, and enter state 68
	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 69

	Ident          goto state 3
	Integer        goto state 55
	VarIdent       goto state 117
	ArrIdent       goto state 57
	DictIdent      goto state 58
	Expr1          goto state 168
	Expr2          goto state 62

State 99

	Expr -> Expr 'xor' . Expr1                          (rule 18)

	'!'            shift, and enter state 63
	'('            shift, and enter state 64
	'++'           shift, and enter state 65
	'--'           shift, and enter state 66
	'false'        shift, and enter state 67
	'true'         shift, and enter state 68
	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 69

	Ident          goto state 3
	Integer        goto state 55
	VarIdent       goto state 117
	ArrIdent       goto state 57
	DictIdent      goto state 58
	Expr1          goto state 167
	Expr2          goto state 62

State 100

	Instr1 -> 'swap' '(' VarIdent ',' . VarIdent ')'    (rule 61)

	L_Ident        shift, and enter state 2

	Ident          goto state 50
	VarIdent       goto state 166

State 101

	Instr1 -> 'return' '(' Expr ')' .                   (rule 59)

	';'            reduce using rule 59
	'}'            reduce using rule 59
	%eof           reduce using rule 59


State 102

	Instr1 -> 'print' '(' Expr ')' .                    (rule 60)

	';'            reduce using rule 60
	'}'            reduce using rule 60
	%eof           reduce using rule 60


State 103

	Instr1 -> 'if' '(' Expr ')' . '{' Instr '}' 'else' '{' Instr '}'    (rule 55)
	Instr1 -> 'if' '(' Expr ')' . '{' Instr '}'         (rule 56)

	'{'            shift, and enter state 165


State 104

	Instr1 -> 'for' '(' VarIdent '=' . Expr 'to' Expr ')' '{' Instr '}'    (rule 58)

	'!'            shift, and enter state 63
	'('            shift, and enter state 64
	'++'           shift, and enter state 65
	'--'           shift, and enter state 66
	'false'        shift, and enter state 67
	'true'         shift, and enter state 68
	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 69

	Ident          goto state 54
	Integer        goto state 55
	VarIdent       goto state 56
	ArrIdent       goto state 57
	DictIdent      goto state 58
	FuncIdent      goto state 59
	Expr           goto state 164
	Expr1          goto state 61
	Expr2          goto state 62

State 105

	Instr1 -> 'debug' 'assignment' 'enable' VarIdent .    (rule 79)

	';'            reduce using rule 79
	'}'            reduce using rule 79
	%eof           reduce using rule 79


State 106

	Instr1 -> 'debug' 'assignment' 'disable' VarIdent .    (rule 80)

	';'            reduce using rule 80
	'}'            reduce using rule 80
	%eof           reduce using rule 80


State 107

	Instr1 -> 'debug' 'reading' 'enable' VarIdent .     (rule 81)

	';'            reduce using rule 81
	'}'            reduce using rule 81
	%eof           reduce using rule 81


State 108

	Instr1 -> 'debug' 'reading' 'disable' VarIdent .    (rule 82)

	';'            reduce using rule 82
	'}'            reduce using rule 82
	%eof           reduce using rule 82


State 109

	Expr -> Expr . '+' Expr1                            (rule 13)
	Expr -> Expr . '-' Expr1                            (rule 14)
	Expr -> Expr . 'or' Expr1                           (rule 16)
	Expr -> Expr . 'and' Expr1                          (rule 17)
	Expr -> Expr . 'xor' Expr1                          (rule 18)
	Instr1 -> 'continue' 'outer' '(' Expr . ')'         (rule 64)

	')'            shift, and enter state 163
	'+'            shift, and enter state 95
	'-'            shift, and enter state 96
	'and'          shift, and enter state 97
	'or'           shift, and enter state 98
	'xor'          shift, and enter state 99


State 110

	Instr1 -> 'break' '(' Expr ')' .                    (rule 62)

	';'            reduce using rule 62
	'}'            reduce using rule 62
	%eof           reduce using rule 62


State 111

	Instr1 -> 'Array' Type ArrIdent '[' . Expr ']' '(' Expr ')'    (rule 67)
	Instr1 -> 'Array' Type ArrIdent '[' . Expr ']'      (rule 68)

	'!'            shift, and enter state 63
	'('            shift, and enter state 64
	'++'           shift, and enter state 65
	'--'           shift, and enter state 66
	'false'        shift, and enter state 67
	'true'         shift, and enter state 68
	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 69

	Ident          goto state 54
	Integer        goto state 55
	VarIdent       goto state 56
	ArrIdent       goto state 57
	DictIdent      goto state 58
	FuncIdent      goto state 59
	Expr           goto state 162
	Expr1          goto state 61
	Expr2          goto state 62

State 112

	Instr1 -> DictIdent '[' Expr ']' . 'set' '(' Expr ')'    (rule 71)

	'set'          shift, and enter state 161


State 113

	Instr1 -> ArrIdent '[' Expr ']' . '=' '(' Expr ')'    (rule 69)

	'='            shift, and enter state 160


State 114

	Expr2 -> '--' VarIdent .                            (rule 33)

	'!='           reduce using rule 33
	'%'            reduce using rule 33
	')'            reduce using rule 33
	'*'            reduce using rule 33
	'+'            reduce using rule 33
	','            reduce using rule 33
	'-'            reduce using rule 33
	'/'            reduce using rule 33
	';'            reduce using rule 33
	'<'            reduce using rule 33
	'<='           reduce using rule 33
	'=='           reduce using rule 33
	'>'            reduce using rule 33
	'>='           reduce using rule 33
	']'            reduce using rule 33
	'and'          reduce using rule 33
	'or'           reduce using rule 33
	'to'           reduce using rule 33
	'xor'          reduce using rule 33
	'}'            reduce using rule 33
	%eof           reduce using rule 33


State 115

	Expr2 -> '++' VarIdent .                            (rule 31)

	'!='           reduce using rule 31
	'%'            reduce using rule 31
	')'            reduce using rule 31
	'*'            reduce using rule 31
	'+'            reduce using rule 31
	','            reduce using rule 31
	'-'            reduce using rule 31
	'/'            reduce using rule 31
	';'            reduce using rule 31
	'<'            reduce using rule 31
	'<='           reduce using rule 31
	'=='           reduce using rule 31
	'>'            reduce using rule 31
	'>='           reduce using rule 31
	']'            reduce using rule 31
	'and'          reduce using rule 31
	'or'           reduce using rule 31
	'to'           reduce using rule 31
	'xor'          reduce using rule 31
	'}'            reduce using rule 31
	%eof           reduce using rule 31


State 116

	Expr -> Expr . '+' Expr1                            (rule 13)
	Expr -> Expr . '-' Expr1                            (rule 14)
	Expr -> Expr . 'or' Expr1                           (rule 16)
	Expr -> Expr . 'and' Expr1                          (rule 17)
	Expr -> Expr . 'xor' Expr1                          (rule 18)
	Expr2 -> '(' Expr . ')'                             (rule 36)

	')'            shift, and enter state 159
	'+'            shift, and enter state 95
	'-'            shift, and enter state 96
	'and'          shift, and enter state 97
	'or'           shift, and enter state 98
	'xor'          shift, and enter state 99


State 117

	Expr2 -> VarIdent . '++'                            (rule 30)
	Expr2 -> VarIdent . '--'                            (rule 32)

	'++'           shift, and enter state 132
	'--'           shift, and enter state 133


State 118

	Expr2 -> '!' Expr2 .                                (rule 39)

	'!='           reduce using rule 39
	'%'            reduce using rule 39
	')'            reduce using rule 39
	'*'            reduce using rule 39
	'+'            reduce using rule 39
	','            reduce using rule 39
	'-'            reduce using rule 39
	'/'            reduce using rule 39
	';'            reduce using rule 39
	'<'            reduce using rule 39
	'<='           reduce using rule 39
	'=='           reduce using rule 39
	'>'            reduce using rule 39
	'>='           reduce using rule 39
	']'            reduce using rule 39
	'and'          reduce using rule 39
	'or'           reduce using rule 39
	'to'           reduce using rule 39
	'xor'          reduce using rule 39
	'}'            reduce using rule 39
	%eof           reduce using rule 39


State 119

	Expr1 -> Expr1 '!=' . Expr2                         (rule 28)

	'!'            shift, and enter state 63
	'('            shift, and enter state 64
	'++'           shift, and enter state 65
	'--'           shift, and enter state 66
	'false'        shift, and enter state 67
	'true'         shift, and enter state 68
	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 69

	Ident          goto state 3
	Integer        goto state 55
	VarIdent       goto state 117
	ArrIdent       goto state 57
	DictIdent      goto state 58
	Expr2          goto state 158

State 120

	Expr1 -> Expr1 '%' . Expr2                          (rule 21)

	'!'            shift, and enter state 63
	'('            shift, and enter state 64
	'++'           shift, and enter state 65
	'--'           shift, and enter state 66
	'false'        shift, and enter state 67
	'true'         shift, and enter state 68
	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 69

	Ident          goto state 3
	Integer        goto state 55
	VarIdent       goto state 117
	ArrIdent       goto state 57
	DictIdent      goto state 58
	Expr2          goto state 157

State 121

	Expr1 -> Expr1 '*' . Expr2                          (rule 20)

	'!'            shift, and enter state 63
	'('            shift, and enter state 64
	'++'           shift, and enter state 65
	'--'           shift, and enter state 66
	'false'        shift, and enter state 67
	'true'         shift, and enter state 68
	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 69

	Ident          goto state 3
	Integer        goto state 55
	VarIdent       goto state 117
	ArrIdent       goto state 57
	DictIdent      goto state 58
	Expr2          goto state 156

State 122

	Expr1 -> Expr1 '/' . Expr2                          (rule 19)

	'!'            shift, and enter state 63
	'('            shift, and enter state 64
	'++'           shift, and enter state 65
	'--'           shift, and enter state 66
	'false'        shift, and enter state 67
	'true'         shift, and enter state 68
	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 69

	Ident          goto state 3
	Integer        goto state 55
	VarIdent       goto state 117
	ArrIdent       goto state 57
	DictIdent      goto state 58
	Expr2          goto state 155

State 123

	Expr1 -> Expr1 '<' . Expr2                          (rule 26)

	'!'            shift, and enter state 63
	'('            shift, and enter state 64
	'++'           shift, and enter state 65
	'--'           shift, and enter state 66
	'false'        shift, and enter state 67
	'true'         shift, and enter state 68
	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 69

	Ident          goto state 3
	Integer        goto state 55
	VarIdent       goto state 117
	ArrIdent       goto state 57
	DictIdent      goto state 58
	Expr2          goto state 154

State 124

	Expr1 -> Expr1 '<=' . Expr2                         (rule 24)

	'!'            shift, and enter state 63
	'('            shift, and enter state 64
	'++'           shift, and enter state 65
	'--'           shift, and enter state 66
	'false'        shift, and enter state 67
	'true'         shift, and enter state 68
	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 69

	Ident          goto state 3
	Integer        goto state 55
	VarIdent       goto state 117
	ArrIdent       goto state 57
	DictIdent      goto state 58
	Expr2          goto state 153

State 125

	Expr1 -> Expr1 '==' . Expr2                         (rule 23)

	'!'            shift, and enter state 63
	'('            shift, and enter state 64
	'++'           shift, and enter state 65
	'--'           shift, and enter state 66
	'false'        shift, and enter state 67
	'true'         shift, and enter state 68
	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 69

	Ident          goto state 3
	Integer        goto state 55
	VarIdent       goto state 117
	ArrIdent       goto state 57
	DictIdent      goto state 58
	Expr2          goto state 152

State 126

	Expr1 -> Expr1 '>' . Expr2                          (rule 27)

	'!'            shift, and enter state 63
	'('            shift, and enter state 64
	'++'           shift, and enter state 65
	'--'           shift, and enter state 66
	'false'        shift, and enter state 67
	'true'         shift, and enter state 68
	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 69

	Ident          goto state 3
	Integer        goto state 55
	VarIdent       goto state 117
	ArrIdent       goto state 57
	DictIdent      goto state 58
	Expr2          goto state 151

State 127

	Expr1 -> Expr1 '>=' . Expr2                         (rule 25)

	'!'            shift, and enter state 63
	'('            shift, and enter state 64
	'++'           shift, and enter state 65
	'--'           shift, and enter state 66
	'false'        shift, and enter state 67
	'true'         shift, and enter state 68
	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 69

	Ident          goto state 3
	Integer        goto state 55
	VarIdent       goto state 117
	ArrIdent       goto state 57
	DictIdent      goto state 58
	Expr2          goto state 150

State 128

	Expr -> FuncIdent '(' . Args ')'                    (rule 11)

	'!'            shift, and enter state 63
	'('            shift, and enter state 64
	'++'           shift, and enter state 65
	'--'           shift, and enter state 66
	'BoolFunc'     shift, and enter state 13
	'IntFunc'      shift, and enter state 16
	'false'        shift, and enter state 67
	'true'         shift, and enter state 68
	'void'         shift, and enter state 149
	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 69

	Ident          goto state 54
	Integer        goto state 55
	FType          goto state 145
	VarIdent       goto state 56
	ArrIdent       goto state 57
	DictIdent      goto state 58
	FuncIdent      goto state 59
	Expr           goto state 146
	Expr1          goto state 61
	Expr2          goto state 62
	Args           goto state 147
	Lambda         goto state 148

State 129

	Expr2 -> DictIdent 'get' . '[' Expr ']'             (rule 35)

	'['            shift, and enter state 144


State 130

	Expr2 -> DictIdent 'has' . 'key' '[' Expr ']'       (rule 40)

	'key'          shift, and enter state 143


State 131

	Expr2 -> ArrIdent '[' . Expr ']'                    (rule 34)

	'!'            shift, and enter state 63
	'('            shift, and enter state 64
	'++'           shift, and enter state 65
	'--'           shift, and enter state 66
	'false'        shift, and enter state 67
	'true'         shift, and enter state 68
	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 69

	Ident          goto state 54
	Integer        goto state 55
	VarIdent       goto state 56
	ArrIdent       goto state 57
	DictIdent      goto state 58
	FuncIdent      goto state 59
	Expr           goto state 142
	Expr1          goto state 61
	Expr2          goto state 62

State 132

	Expr2 -> VarIdent '++' .                            (rule 30)

	'!='           reduce using rule 30
	'%'            reduce using rule 30
	')'            reduce using rule 30
	'*'            reduce using rule 30
	'+'            reduce using rule 30
	','            reduce using rule 30
	'-'            reduce using rule 30
	'/'            reduce using rule 30
	';'            reduce using rule 30
	'<'            reduce using rule 30
	'<='           reduce using rule 30
	'=='           reduce using rule 30
	'>'            reduce using rule 30
	'>='           reduce using rule 30
	']'            reduce using rule 30
	'and'          reduce using rule 30
	'or'           reduce using rule 30
	'to'           reduce using rule 30
	'xor'          reduce using rule 30
	'}'            reduce using rule 30
	%eof           reduce using rule 30


State 133

	Expr2 -> VarIdent '--' .                            (rule 32)

	'!='           reduce using rule 32
	'%'            reduce using rule 32
	')'            reduce using rule 32
	'*'            reduce using rule 32
	'+'            reduce using rule 32
	','            reduce using rule 32
	'-'            reduce using rule 32
	'/'            reduce using rule 32
	';'            reduce using rule 32
	'<'            reduce using rule 32
	'<='           reduce using rule 32
	'=='           reduce using rule 32
	'>'            reduce using rule 32
	'>='           reduce using rule 32
	']'            reduce using rule 32
	'and'          reduce using rule 32
	'or'           reduce using rule 32
	'to'           reduce using rule 32
	'xor'          reduce using rule 32
	'}'            reduce using rule 32
	%eof           reduce using rule 32


State 134

	Params -> Type . VarIdent                           (rule 47)
	Params -> Type . VarIdent ',' Params                (rule 49)

	L_Ident        shift, and enter state 2

	Ident          goto state 50
	VarIdent       goto state 141

State 135

	Params -> FType . FuncIdent                         (rule 48)
	Params -> FType . FuncIdent ',' Params              (rule 50)

	L_Ident        shift, and enter state 2

	Ident          goto state 48
	FuncIdent      goto state 140

State 136

	Instr1 -> FType FuncIdent '(' Params . ')' '{' Instr '}'    (rule 72)

	')'            shift, and enter state 139


State 137

	Params -> 'none' .                                  (rule 46)

	')'            reduce using rule 46


State 138

	Expr -> Expr . '+' Expr1                            (rule 13)
	Expr -> Expr . '-' Expr1                            (rule 14)
	Expr -> Expr . 'or' Expr1                           (rule 16)
	Expr -> Expr . 'and' Expr1                          (rule 17)
	Expr -> Expr . 'xor' Expr1                          (rule 18)
	Instr1 -> Type VarIdent '=' Expr .                  (rule 66)

	'+'            shift, and enter state 95
	'-'            shift, and enter state 96
	';'            reduce using rule 66
	'and'          shift, and enter state 97
	'or'           shift, and enter state 98
	'xor'          shift, and enter state 99
	'}'            reduce using rule 66
	%eof           reduce using rule 66


State 139

	Instr1 -> FType FuncIdent '(' Params ')' . '{' Instr '}'    (rule 72)

	'{'            shift, and enter state 189


State 140

	Params -> FType FuncIdent .                         (rule 48)
	Params -> FType FuncIdent . ',' Params              (rule 50)

	')'            reduce using rule 48
	','            shift, and enter state 188


State 141

	Params -> Type VarIdent .                           (rule 47)
	Params -> Type VarIdent . ',' Params                (rule 49)

	')'            reduce using rule 47
	','            shift, and enter state 187


State 142

	Expr -> Expr . '+' Expr1                            (rule 13)
	Expr -> Expr . '-' Expr1                            (rule 14)
	Expr -> Expr . 'or' Expr1                           (rule 16)
	Expr -> Expr . 'and' Expr1                          (rule 17)
	Expr -> Expr . 'xor' Expr1                          (rule 18)
	Expr2 -> ArrIdent '[' Expr . ']'                    (rule 34)

	'+'            shift, and enter state 95
	'-'            shift, and enter state 96
	']'            shift, and enter state 186
	'and'          shift, and enter state 97
	'or'           shift, and enter state 98
	'xor'          shift, and enter state 99


State 143

	Expr2 -> DictIdent 'has' 'key' . '[' Expr ']'       (rule 40)

	'['            shift, and enter state 185


State 144

	Expr2 -> DictIdent 'get' '[' . Expr ']'             (rule 35)

	'!'            shift, and enter state 63
	'('            shift, and enter state 64
	'++'           shift, and enter state 65
	'--'           shift, and enter state 66
	'false'        shift, and enter state 67
	'true'         shift, and enter state 68
	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 69

	Ident          goto state 54
	Integer        goto state 55
	VarIdent       goto state 56
	ArrIdent       goto state 57
	DictIdent      goto state 58
	FuncIdent      goto state 59
	Expr           goto state 184
	Expr1          goto state 61
	Expr2          goto state 62

State 145

	Lambda -> FType . 'lambda' '(' Params ')' '->' '{' Instr '}'    (rule 51)

	'lambda'       shift, and enter state 183


State 146

	Expr -> Expr . '+' Expr1                            (rule 13)
	Expr -> Expr . '-' Expr1                            (rule 14)
	Expr -> Expr . 'or' Expr1                           (rule 16)
	Expr -> Expr . 'and' Expr1                          (rule 17)
	Expr -> Expr . 'xor' Expr1                          (rule 18)
	Args -> Expr .                                      (rule 42)
	Args -> Expr . ',' Args                             (rule 43)

	')'            reduce using rule 42
	'+'            shift, and enter state 95
	','            shift, and enter state 182
	'-'            shift, and enter state 96
	'and'          shift, and enter state 97
	'or'           shift, and enter state 98
	'xor'          shift, and enter state 99


State 147

	Expr -> FuncIdent '(' Args . ')'                    (rule 11)

	')'            shift, and enter state 181


State 148

	Args -> Lambda .                                    (rule 44)
	Args -> Lambda . ',' Args                           (rule 45)

	')'            reduce using rule 44
	','            shift, and enter state 180


State 149

	Args -> 'void' .                                    (rule 41)

	')'            reduce using rule 41


State 150

	Expr1 -> Expr1 '>=' Expr2 .                         (rule 25)

	'!='           reduce using rule 25
	'%'            reduce using rule 25
	')'            reduce using rule 25
	'*'            reduce using rule 25
	'+'            reduce using rule 25
	','            reduce using rule 25
	'-'            reduce using rule 25
	'/'            reduce using rule 25
	';'            reduce using rule 25
	'<'            reduce using rule 25
	'<='           reduce using rule 25
	'=='           reduce using rule 25
	'>'            reduce using rule 25
	'>='           reduce using rule 25
	']'            reduce using rule 25
	'and'          reduce using rule 25
	'or'           reduce using rule 25
	'to'           reduce using rule 25
	'xor'          reduce using rule 25
	'}'            reduce using rule 25
	%eof           reduce using rule 25


State 151

	Expr1 -> Expr1 '>' Expr2 .                          (rule 27)

	'!='           reduce using rule 27
	'%'            reduce using rule 27
	')'            reduce using rule 27
	'*'            reduce using rule 27
	'+'            reduce using rule 27
	','            reduce using rule 27
	'-'            reduce using rule 27
	'/'            reduce using rule 27
	';'            reduce using rule 27
	'<'            reduce using rule 27
	'<='           reduce using rule 27
	'=='           reduce using rule 27
	'>'            reduce using rule 27
	'>='           reduce using rule 27
	']'            reduce using rule 27
	'and'          reduce using rule 27
	'or'           reduce using rule 27
	'to'           reduce using rule 27
	'xor'          reduce using rule 27
	'}'            reduce using rule 27
	%eof           reduce using rule 27


State 152

	Expr1 -> Expr1 '==' Expr2 .                         (rule 23)

	'!='           reduce using rule 23
	'%'            reduce using rule 23
	')'            reduce using rule 23
	'*'            reduce using rule 23
	'+'            reduce using rule 23
	','            reduce using rule 23
	'-'            reduce using rule 23
	'/'            reduce using rule 23
	';'            reduce using rule 23
	'<'            reduce using rule 23
	'<='           reduce using rule 23
	'=='           reduce using rule 23
	'>'            reduce using rule 23
	'>='           reduce using rule 23
	']'            reduce using rule 23
	'and'          reduce using rule 23
	'or'           reduce using rule 23
	'to'           reduce using rule 23
	'xor'          reduce using rule 23
	'}'            reduce using rule 23
	%eof           reduce using rule 23


State 153

	Expr1 -> Expr1 '<=' Expr2 .                         (rule 24)

	'!='           reduce using rule 24
	'%'            reduce using rule 24
	')'            reduce using rule 24
	'*'            reduce using rule 24
	'+'            reduce using rule 24
	','            reduce using rule 24
	'-'            reduce using rule 24
	'/'            reduce using rule 24
	';'            reduce using rule 24
	'<'            reduce using rule 24
	'<='           reduce using rule 24
	'=='           reduce using rule 24
	'>'            reduce using rule 24
	'>='           reduce using rule 24
	']'            reduce using rule 24
	'and'          reduce using rule 24
	'or'           reduce using rule 24
	'to'           reduce using rule 24
	'xor'          reduce using rule 24
	'}'            reduce using rule 24
	%eof           reduce using rule 24


State 154

	Expr1 -> Expr1 '<' Expr2 .                          (rule 26)

	'!='           reduce using rule 26
	'%'            reduce using rule 26
	')'            reduce using rule 26
	'*'            reduce using rule 26
	'+'            reduce using rule 26
	','            reduce using rule 26
	'-'            reduce using rule 26
	'/'            reduce using rule 26
	';'            reduce using rule 26
	'<'            reduce using rule 26
	'<='           reduce using rule 26
	'=='           reduce using rule 26
	'>'            reduce using rule 26
	'>='           reduce using rule 26
	']'            reduce using rule 26
	'and'          reduce using rule 26
	'or'           reduce using rule 26
	'to'           reduce using rule 26
	'xor'          reduce using rule 26
	'}'            reduce using rule 26
	%eof           reduce using rule 26


State 155

	Expr1 -> Expr1 '/' Expr2 .                          (rule 19)

	'!='           reduce using rule 19
	'%'            reduce using rule 19
	')'            reduce using rule 19
	'*'            reduce using rule 19
	'+'            reduce using rule 19
	','            reduce using rule 19
	'-'            reduce using rule 19
	'/'            reduce using rule 19
	';'            reduce using rule 19
	'<'            reduce using rule 19
	'<='           reduce using rule 19
	'=='           reduce using rule 19
	'>'            reduce using rule 19
	'>='           reduce using rule 19
	']'            reduce using rule 19
	'and'          reduce using rule 19
	'or'           reduce using rule 19
	'to'           reduce using rule 19
	'xor'          reduce using rule 19
	'}'            reduce using rule 19
	%eof           reduce using rule 19


State 156

	Expr1 -> Expr1 '*' Expr2 .                          (rule 20)

	'!='           reduce using rule 20
	'%'            reduce using rule 20
	')'            reduce using rule 20
	'*'            reduce using rule 20
	'+'            reduce using rule 20
	','            reduce using rule 20
	'-'            reduce using rule 20
	'/'            reduce using rule 20
	';'            reduce using rule 20
	'<'            reduce using rule 20
	'<='           reduce using rule 20
	'=='           reduce using rule 20
	'>'            reduce using rule 20
	'>='           reduce using rule 20
	']'            reduce using rule 20
	'and'          reduce using rule 20
	'or'           reduce using rule 20
	'to'           reduce using rule 20
	'xor'          reduce using rule 20
	'}'            reduce using rule 20
	%eof           reduce using rule 20


State 157

	Expr1 -> Expr1 '%' Expr2 .                          (rule 21)

	'!='           reduce using rule 21
	'%'            reduce using rule 21
	')'            reduce using rule 21
	'*'            reduce using rule 21
	'+'            reduce using rule 21
	','            reduce using rule 21
	'-'            reduce using rule 21
	'/'            reduce using rule 21
	';'            reduce using rule 21
	'<'            reduce using rule 21
	'<='           reduce using rule 21
	'=='           reduce using rule 21
	'>'            reduce using rule 21
	'>='           reduce using rule 21
	']'            reduce using rule 21
	'and'          reduce using rule 21
	'or'           reduce using rule 21
	'to'           reduce using rule 21
	'xor'          reduce using rule 21
	'}'            reduce using rule 21
	%eof           reduce using rule 21


State 158

	Expr1 -> Expr1 '!=' Expr2 .                         (rule 28)

	'!='           reduce using rule 28
	'%'            reduce using rule 28
	')'            reduce using rule 28
	'*'            reduce using rule 28
	'+'            reduce using rule 28
	','            reduce using rule 28
	'-'            reduce using rule 28
	'/'            reduce using rule 28
	';'            reduce using rule 28
	'<'            reduce using rule 28
	'<='           reduce using rule 28
	'=='           reduce using rule 28
	'>'            reduce using rule 28
	'>='           reduce using rule 28
	']'            reduce using rule 28
	'and'          reduce using rule 28
	'or'           reduce using rule 28
	'to'           reduce using rule 28
	'xor'          reduce using rule 28
	'}'            reduce using rule 28
	%eof           reduce using rule 28


State 159

	Expr2 -> '(' Expr ')' .                             (rule 36)

	'!='           reduce using rule 36
	'%'            reduce using rule 36
	')'            reduce using rule 36
	'*'            reduce using rule 36
	'+'            reduce using rule 36
	','            reduce using rule 36
	'-'            reduce using rule 36
	'/'            reduce using rule 36
	';'            reduce using rule 36
	'<'            reduce using rule 36
	'<='           reduce using rule 36
	'=='           reduce using rule 36
	'>'            reduce using rule 36
	'>='           reduce using rule 36
	']'            reduce using rule 36
	'and'          reduce using rule 36
	'or'           reduce using rule 36
	'to'           reduce using rule 36
	'xor'          reduce using rule 36
	'}'            reduce using rule 36
	%eof           reduce using rule 36


State 160

	Instr1 -> ArrIdent '[' Expr ']' '=' . '(' Expr ')'    (rule 69)

	'('            shift, and enter state 179


State 161

	Instr1 -> DictIdent '[' Expr ']' 'set' . '(' Expr ')'    (rule 71)

	'('            shift, and enter state 178


State 162

	Expr -> Expr . '+' Expr1                            (rule 13)
	Expr -> Expr . '-' Expr1                            (rule 14)
	Expr -> Expr . 'or' Expr1                           (rule 16)
	Expr -> Expr . 'and' Expr1                          (rule 17)
	Expr -> Expr . 'xor' Expr1                          (rule 18)
	Instr1 -> 'Array' Type ArrIdent '[' Expr . ']' '(' Expr ')'    (rule 67)
	Instr1 -> 'Array' Type ArrIdent '[' Expr . ']'      (rule 68)

	'+'            shift, and enter state 95
	'-'            shift, and enter state 96
	']'            shift, and enter state 177
	'and'          shift, and enter state 97
	'or'           shift, and enter state 98
	'xor'          shift, and enter state 99


State 163

	Instr1 -> 'continue' 'outer' '(' Expr ')' .         (rule 64)

	';'            reduce using rule 64
	'}'            reduce using rule 64
	%eof           reduce using rule 64


State 164

	Expr -> Expr . '+' Expr1                            (rule 13)
	Expr -> Expr . '-' Expr1                            (rule 14)
	Expr -> Expr . 'or' Expr1                           (rule 16)
	Expr -> Expr . 'and' Expr1                          (rule 17)
	Expr -> Expr . 'xor' Expr1                          (rule 18)
	Instr1 -> 'for' '(' VarIdent '=' Expr . 'to' Expr ')' '{' Instr '}'    (rule 58)

	'+'            shift, and enter state 95
	'-'            shift, and enter state 96
	'and'          shift, and enter state 97
	'or'           shift, and enter state 98
	'to'           shift, and enter state 176
	'xor'          shift, and enter state 99


State 165

	Instr1 -> 'if' '(' Expr ')' '{' . Instr '}' 'else' '{' Instr '}'    (rule 55)
	Instr1 -> 'if' '(' Expr ')' '{' . Instr '}'         (rule 56)

	'Array'        shift, and enter state 11
	'Bool'         shift, and enter state 12
	'BoolFunc'     shift, and enter state 13
	'Dict'         shift, and enter state 14
	'Int'          shift, and enter state 15
	'IntFunc'      shift, and enter state 16
	'break'        shift, and enter state 17
	'continue'     shift, and enter state 18
	'debug'        shift, and enter state 19
	'for'          shift, and enter state 20
	'if'           shift, and enter state 21
	'print'        shift, and enter state 22
	'return'       shift, and enter state 23
	'skip'         shift, and enter state 24
	'swap'         shift, and enter state 25
	'while'        shift, and enter state 26
	L_Ident        shift, and enter state 2

	Ident          goto state 3
	Type           goto state 4
	FType          goto state 5
	VarIdent       goto state 6
	ArrIdent       goto state 7
	DictIdent      goto state 8
	Instr          goto state 175
	Instr1         goto state 10

State 166

	Instr1 -> 'swap' '(' VarIdent ',' VarIdent . ')'    (rule 61)

	')'            shift, and enter state 174


State 167

	Expr -> Expr 'xor' Expr1 .                          (rule 18)
	Expr1 -> Expr1 . '/' Expr2                          (rule 19)
	Expr1 -> Expr1 . '*' Expr2                          (rule 20)
	Expr1 -> Expr1 . '%' Expr2                          (rule 21)
	Expr1 -> Expr1 . '==' Expr2                         (rule 23)
	Expr1 -> Expr1 . '<=' Expr2                         (rule 24)
	Expr1 -> Expr1 . '>=' Expr2                         (rule 25)
	Expr1 -> Expr1 . '<' Expr2                          (rule 26)
	Expr1 -> Expr1 . '>' Expr2                          (rule 27)
	Expr1 -> Expr1 . '!=' Expr2                         (rule 28)

	'!='           shift, and enter state 119
	'%'            shift, and enter state 120
	')'            reduce using rule 18
	'*'            shift, and enter state 121
	'+'            reduce using rule 18
	','            reduce using rule 18
	'-'            reduce using rule 18
	'/'            shift, and enter state 122
	';'            reduce using rule 18
	'<'            shift, and enter state 123
	'<='           shift, and enter state 124
	'=='           shift, and enter state 125
	'>'            shift, and enter state 126
	'>='           shift, and enter state 127
	']'            reduce using rule 18
	'and'          reduce using rule 18
	'or'           reduce using rule 18
	'to'           reduce using rule 18
	'xor'          reduce using rule 18
	'}'            reduce using rule 18
	%eof           reduce using rule 18


State 168

	Expr -> Expr 'or' Expr1 .                           (rule 16)
	Expr1 -> Expr1 . '/' Expr2                          (rule 19)
	Expr1 -> Expr1 . '*' Expr2                          (rule 20)
	Expr1 -> Expr1 . '%' Expr2                          (rule 21)
	Expr1 -> Expr1 . '==' Expr2                         (rule 23)
	Expr1 -> Expr1 . '<=' Expr2                         (rule 24)
	Expr1 -> Expr1 . '>=' Expr2                         (rule 25)
	Expr1 -> Expr1 . '<' Expr2                          (rule 26)
	Expr1 -> Expr1 . '>' Expr2                          (rule 27)
	Expr1 -> Expr1 . '!=' Expr2                         (rule 28)

	'!='           shift, and enter state 119
	'%'            shift, and enter state 120
	')'            reduce using rule 16
	'*'            shift, and enter state 121
	'+'            reduce using rule 16
	','            reduce using rule 16
	'-'            reduce using rule 16
	'/'            shift, and enter state 122
	';'            reduce using rule 16
	'<'            shift, and enter state 123
	'<='           shift, and enter state 124
	'=='           shift, and enter state 125
	'>'            shift, and enter state 126
	'>='           shift, and enter state 127
	']'            reduce using rule 16
	'and'          reduce using rule 16
	'or'           reduce using rule 16
	'to'           reduce using rule 16
	'xor'          reduce using rule 16
	'}'            reduce using rule 16
	%eof           reduce using rule 16


State 169

	Expr -> Expr 'and' Expr1 .                          (rule 17)
	Expr1 -> Expr1 . '/' Expr2                          (rule 19)
	Expr1 -> Expr1 . '*' Expr2                          (rule 20)
	Expr1 -> Expr1 . '%' Expr2                          (rule 21)
	Expr1 -> Expr1 . '==' Expr2                         (rule 23)
	Expr1 -> Expr1 . '<=' Expr2                         (rule 24)
	Expr1 -> Expr1 . '>=' Expr2                         (rule 25)
	Expr1 -> Expr1 . '<' Expr2                          (rule 26)
	Expr1 -> Expr1 . '>' Expr2                          (rule 27)
	Expr1 -> Expr1 . '!=' Expr2                         (rule 28)

	'!='           shift, and enter state 119
	'%'            shift, and enter state 120
	')'            reduce using rule 17
	'*'            shift, and enter state 121
	'+'            reduce using rule 17
	','            reduce using rule 17
	'-'            reduce using rule 17
	'/'            shift, and enter state 122
	';'            reduce using rule 17
	'<'            shift, and enter state 123
	'<='           shift, and enter state 124
	'=='           shift, and enter state 125
	'>'            shift, and enter state 126
	'>='           shift, and enter state 127
	']'            reduce using rule 17
	'and'          reduce using rule 17
	'or'           reduce using rule 17
	'to'           reduce using rule 17
	'xor'          reduce using rule 17
	'}'            reduce using rule 17
	%eof           reduce using rule 17


State 170

	Expr -> Expr '-' Expr1 .                            (rule 14)
	Expr1 -> Expr1 . '/' Expr2                          (rule 19)
	Expr1 -> Expr1 . '*' Expr2                          (rule 20)
	Expr1 -> Expr1 . '%' Expr2                          (rule 21)
	Expr1 -> Expr1 . '==' Expr2                         (rule 23)
	Expr1 -> Expr1 . '<=' Expr2                         (rule 24)
	Expr1 -> Expr1 . '>=' Expr2                         (rule 25)
	Expr1 -> Expr1 . '<' Expr2                          (rule 26)
	Expr1 -> Expr1 . '>' Expr2                          (rule 27)
	Expr1 -> Expr1 . '!=' Expr2                         (rule 28)

	'!='           shift, and enter state 119
	'%'            shift, and enter state 120
	')'            reduce using rule 14
	'*'            shift, and enter state 121
	'+'            reduce using rule 14
	','            reduce using rule 14
	'-'            reduce using rule 14
	'/'            shift, and enter state 122
	';'            reduce using rule 14
	'<'            shift, and enter state 123
	'<='           shift, and enter state 124
	'=='           shift, and enter state 125
	'>'            shift, and enter state 126
	'>='           shift, and enter state 127
	']'            reduce using rule 14
	'and'          reduce using rule 14
	'or'           reduce using rule 14
	'to'           reduce using rule 14
	'xor'          reduce using rule 14
	'}'            reduce using rule 14
	%eof           reduce using rule 14


State 171

	Expr -> Expr '+' Expr1 .                            (rule 13)
	Expr1 -> Expr1 . '/' Expr2                          (rule 19)
	Expr1 -> Expr1 . '*' Expr2                          (rule 20)
	Expr1 -> Expr1 . '%' Expr2                          (rule 21)
	Expr1 -> Expr1 . '==' Expr2                         (rule 23)
	Expr1 -> Expr1 . '<=' Expr2                         (rule 24)
	Expr1 -> Expr1 . '>=' Expr2                         (rule 25)
	Expr1 -> Expr1 . '<' Expr2                          (rule 26)
	Expr1 -> Expr1 . '>' Expr2                          (rule 27)
	Expr1 -> Expr1 . '!=' Expr2                         (rule 28)

	'!='           shift, and enter state 119
	'%'            shift, and enter state 120
	')'            reduce using rule 13
	'*'            shift, and enter state 121
	'+'            reduce using rule 13
	','            reduce using rule 13
	'-'            reduce using rule 13
	'/'            shift, and enter state 122
	';'            reduce using rule 13
	'<'            shift, and enter state 123
	'<='           shift, and enter state 124
	'=='           shift, and enter state 125
	'>'            shift, and enter state 126
	'>='           shift, and enter state 127
	']'            reduce using rule 13
	'and'          reduce using rule 13
	'or'           reduce using rule 13
	'to'           reduce using rule 13
	'xor'          reduce using rule 13
	'}'            reduce using rule 13
	%eof           reduce using rule 13


State 172

	Instr1 -> 'while' '(' Expr ')' '{' . Instr '}'      (rule 57)

	'Array'        shift, and enter state 11
	'Bool'         shift, and enter state 12
	'BoolFunc'     shift, and enter state 13
	'Dict'         shift, and enter state 14
	'Int'          shift, and enter state 15
	'IntFunc'      shift, and enter state 16
	'break'        shift, and enter state 17
	'continue'     shift, and enter state 18
	'debug'        shift, and enter state 19
	'for'          shift, and enter state 20
	'if'           shift, and enter state 21
	'print'        shift, and enter state 22
	'return'       shift, and enter state 23
	'skip'         shift, and enter state 24
	'swap'         shift, and enter state 25
	'while'        shift, and enter state 26
	L_Ident        shift, and enter state 2

	Ident          goto state 3
	Type           goto state 4
	FType          goto state 5
	VarIdent       goto state 6
	ArrIdent       goto state 7
	DictIdent      goto state 8
	Instr          goto state 173
	Instr1         goto state 10

State 173

	Instr1 -> 'while' '(' Expr ')' '{' Instr . '}'      (rule 57)

	'}'            shift, and enter state 203


State 174

	Instr1 -> 'swap' '(' VarIdent ',' VarIdent ')' .    (rule 61)

	';'            reduce using rule 61
	'}'            reduce using rule 61
	%eof           reduce using rule 61


State 175

	Instr1 -> 'if' '(' Expr ')' '{' Instr . '}' 'else' '{' Instr '}'    (rule 55)
	Instr1 -> 'if' '(' Expr ')' '{' Instr . '}'         (rule 56)

	'}'            shift, and enter state 202


State 176

	Instr1 -> 'for' '(' VarIdent '=' Expr 'to' . Expr ')' '{' Instr '}'    (rule 58)

	'!'            shift, and enter state 63
	'('            shift, and enter state 64
	'++'           shift, and enter state 65
	'--'           shift, and enter state 66
	'false'        shift, and enter state 67
	'true'         shift, and enter state 68
	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 69

	Ident          goto state 54
	Integer        goto state 55
	VarIdent       goto state 56
	ArrIdent       goto state 57
	DictIdent      goto state 58
	FuncIdent      goto state 59
	Expr           goto state 201
	Expr1          goto state 61
	Expr2          goto state 62

State 177

	Instr1 -> 'Array' Type ArrIdent '[' Expr ']' . '(' Expr ')'    (rule 67)
	Instr1 -> 'Array' Type ArrIdent '[' Expr ']' .      (rule 68)

	'('            shift, and enter state 200
	';'            reduce using rule 68
	'}'            reduce using rule 68
	%eof           reduce using rule 68


State 178

	Instr1 -> DictIdent '[' Expr ']' 'set' '(' . Expr ')'    (rule 71)

	'!'            shift, and enter state 63
	'('            shift, and enter state 64
	'++'           shift, and enter state 65
	'--'           shift, and enter state 66
	'false'        shift, and enter state 67
	'true'         shift, and enter state 68
	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 69

	Ident          goto state 54
	Integer        goto state 55
	VarIdent       goto state 56
	ArrIdent       goto state 57
	DictIdent      goto state 58
	FuncIdent      goto state 59
	Expr           goto state 199
	Expr1          goto state 61
	Expr2          goto state 62

State 179

	Instr1 -> ArrIdent '[' Expr ']' '=' '(' . Expr ')'    (rule 69)

	'!'            shift, and enter state 63
	'('            shift, and enter state 64
	'++'           shift, and enter state 65
	'--'           shift, and enter state 66
	'false'        shift, and enter state 67
	'true'         shift, and enter state 68
	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 69

	Ident          goto state 54
	Integer        goto state 55
	VarIdent       goto state 56
	ArrIdent       goto state 57
	DictIdent      goto state 58
	FuncIdent      goto state 59
	Expr           goto state 198
	Expr1          goto state 61
	Expr2          goto state 62

State 180

	Args -> Lambda ',' . Args                           (rule 45)

	'!'            shift, and enter state 63
	'('            shift, and enter state 64
	'++'           shift, and enter state 65
	'--'           shift, and enter state 66
	'BoolFunc'     shift, and enter state 13
	'IntFunc'      shift, and enter state 16
	'false'        shift, and enter state 67
	'true'         shift, and enter state 68
	'void'         shift, and enter state 149
	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 69

	Ident          goto state 54
	Integer        goto state 55
	FType          goto state 145
	VarIdent       goto state 56
	ArrIdent       goto state 57
	DictIdent      goto state 58
	FuncIdent      goto state 59
	Expr           goto state 146
	Expr1          goto state 61
	Expr2          goto state 62
	Args           goto state 197
	Lambda         goto state 148

State 181

	Expr -> FuncIdent '(' Args ')' .                    (rule 11)

	')'            reduce using rule 11
	'+'            reduce using rule 11
	','            reduce using rule 11
	'-'            reduce using rule 11
	';'            reduce using rule 11
	']'            reduce using rule 11
	'and'          reduce using rule 11
	'or'           reduce using rule 11
	'to'           reduce using rule 11
	'xor'          reduce using rule 11
	'}'            reduce using rule 11
	%eof           reduce using rule 11


State 182

	Args -> Expr ',' . Args                             (rule 43)

	'!'            shift, and enter state 63
	'('            shift, and enter state 64
	'++'           shift, and enter state 65
	'--'           shift, and enter state 66
	'BoolFunc'     shift, and enter state 13
	'IntFunc'      shift, and enter state 16
	'false'        shift, and enter state 67
	'true'         shift, and enter state 68
	'void'         shift, and enter state 149
	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 69

	Ident          goto state 54
	Integer        goto state 55
	FType          goto state 145
	VarIdent       goto state 56
	ArrIdent       goto state 57
	DictIdent      goto state 58
	FuncIdent      goto state 59
	Expr           goto state 146
	Expr1          goto state 61
	Expr2          goto state 62
	Args           goto state 196
	Lambda         goto state 148

State 183

	Lambda -> FType 'lambda' . '(' Params ')' '->' '{' Instr '}'    (rule 51)

	'('            shift, and enter state 195


State 184

	Expr -> Expr . '+' Expr1                            (rule 13)
	Expr -> Expr . '-' Expr1                            (rule 14)
	Expr -> Expr . 'or' Expr1                           (rule 16)
	Expr -> Expr . 'and' Expr1                          (rule 17)
	Expr -> Expr . 'xor' Expr1                          (rule 18)
	Expr2 -> DictIdent 'get' '[' Expr . ']'             (rule 35)

	'+'            shift, and enter state 95
	'-'            shift, and enter state 96
	']'            shift, and enter state 194
	'and'          shift, and enter state 97
	'or'           shift, and enter state 98
	'xor'          shift, and enter state 99


State 185

	Expr2 -> DictIdent 'has' 'key' '[' . Expr ']'       (rule 40)

	'!'            shift, and enter state 63
	'('            shift, and enter state 64
	'++'           shift, and enter state 65
	'--'           shift, and enter state 66
	'false'        shift, and enter state 67
	'true'         shift, and enter state 68
	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 69

	Ident          goto state 54
	Integer        goto state 55
	VarIdent       goto state 56
	ArrIdent       goto state 57
	DictIdent      goto state 58
	FuncIdent      goto state 59
	Expr           goto state 193
	Expr1          goto state 61
	Expr2          goto state 62

State 186

	Expr2 -> ArrIdent '[' Expr ']' .                    (rule 34)

	'!='           reduce using rule 34
	'%'            reduce using rule 34
	')'            reduce using rule 34
	'*'            reduce using rule 34
	'+'            reduce using rule 34
	','            reduce using rule 34
	'-'            reduce using rule 34
	'/'            reduce using rule 34
	';'            reduce using rule 34
	'<'            reduce using rule 34
	'<='           reduce using rule 34
	'=='           reduce using rule 34
	'>'            reduce using rule 34
	'>='           reduce using rule 34
	']'            reduce using rule 34
	'and'          reduce using rule 34
	'or'           reduce using rule 34
	'to'           reduce using rule 34
	'xor'          reduce using rule 34
	'}'            reduce using rule 34
	%eof           reduce using rule 34


State 187

	Params -> Type VarIdent ',' . Params                (rule 49)

	'Bool'         shift, and enter state 12
	'BoolFunc'     shift, and enter state 13
	'Int'          shift, and enter state 15
	'IntFunc'      shift, and enter state 16
	'none'         shift, and enter state 137

	Type           goto state 134
	FType          goto state 135
	Params         goto state 192

State 188

	Params -> FType FuncIdent ',' . Params              (rule 50)

	'Bool'         shift, and enter state 12
	'BoolFunc'     shift, and enter state 13
	'Int'          shift, and enter state 15
	'IntFunc'      shift, and enter state 16
	'none'         shift, and enter state 137

	Type           goto state 134
	FType          goto state 135
	Params         goto state 191

State 189

	Instr1 -> FType FuncIdent '(' Params ')' '{' . Instr '}'    (rule 72)

	'Array'        shift, and enter state 11
	'Bool'         shift, and enter state 12
	'BoolFunc'     shift, and enter state 13
	'Dict'         shift, and enter state 14
	'Int'          shift, and enter state 15
	'IntFunc'      shift, and enter state 16
	'break'        shift, and enter state 17
	'continue'     shift, and enter state 18
	'debug'        shift, and enter state 19
	'for'          shift, and enter state 20
	'if'           shift, and enter state 21
	'print'        shift, and enter state 22
	'return'       shift, and enter state 23
	'skip'         shift, and enter state 24
	'swap'         shift, and enter state 25
	'while'        shift, and enter state 26
	L_Ident        shift, and enter state 2

	Ident          goto state 3
	Type           goto state 4
	FType          goto state 5
	VarIdent       goto state 6
	ArrIdent       goto state 7
	DictIdent      goto state 8
	Instr          goto state 190
	Instr1         goto state 10

State 190

	Instr1 -> FType FuncIdent '(' Params ')' '{' Instr . '}'    (rule 72)

	'}'            shift, and enter state 211


State 191

	Params -> FType FuncIdent ',' Params .              (rule 50)

	')'            reduce using rule 50


State 192

	Params -> Type VarIdent ',' Params .                (rule 49)

	')'            reduce using rule 49


State 193

	Expr -> Expr . '+' Expr1                            (rule 13)
	Expr -> Expr . '-' Expr1                            (rule 14)
	Expr -> Expr . 'or' Expr1                           (rule 16)
	Expr -> Expr . 'and' Expr1                          (rule 17)
	Expr -> Expr . 'xor' Expr1                          (rule 18)
	Expr2 -> DictIdent 'has' 'key' '[' Expr . ']'       (rule 40)

	'+'            shift, and enter state 95
	'-'            shift, and enter state 96
	']'            shift, and enter state 210
	'and'          shift, and enter state 97
	'or'           shift, and enter state 98
	'xor'          shift, and enter state 99


State 194

	Expr2 -> DictIdent 'get' '[' Expr ']' .             (rule 35)

	'!='           reduce using rule 35
	'%'            reduce using rule 35
	')'            reduce using rule 35
	'*'            reduce using rule 35
	'+'            reduce using rule 35
	','            reduce using rule 35
	'-'            reduce using rule 35
	'/'            reduce using rule 35
	';'            reduce using rule 35
	'<'            reduce using rule 35
	'<='           reduce using rule 35
	'=='           reduce using rule 35
	'>'            reduce using rule 35
	'>='           reduce using rule 35
	']'            reduce using rule 35
	'and'          reduce using rule 35
	'or'           reduce using rule 35
	'to'           reduce using rule 35
	'xor'          reduce using rule 35
	'}'            reduce using rule 35
	%eof           reduce using rule 35


State 195

	Lambda -> FType 'lambda' '(' . Params ')' '->' '{' Instr '}'    (rule 51)

	'Bool'         shift, and enter state 12
	'BoolFunc'     shift, and enter state 13
	'Int'          shift, and enter state 15
	'IntFunc'      shift, and enter state 16
	'none'         shift, and enter state 137

	Type           goto state 134
	FType          goto state 135
	Params         goto state 209

State 196

	Args -> Expr ',' Args .                             (rule 43)

	')'            reduce using rule 43


State 197

	Args -> Lambda ',' Args .                           (rule 45)

	')'            reduce using rule 45


State 198

	Expr -> Expr . '+' Expr1                            (rule 13)
	Expr -> Expr . '-' Expr1                            (rule 14)
	Expr -> Expr . 'or' Expr1                           (rule 16)
	Expr -> Expr . 'and' Expr1                          (rule 17)
	Expr -> Expr . 'xor' Expr1                          (rule 18)
	Instr1 -> ArrIdent '[' Expr ']' '=' '(' Expr . ')'    (rule 69)

	')'            shift, and enter state 208
	'+'            shift, and enter state 95
	'-'            shift, and enter state 96
	'and'          shift, and enter state 97
	'or'           shift, and enter state 98
	'xor'          shift, and enter state 99


State 199

	Expr -> Expr . '+' Expr1                            (rule 13)
	Expr -> Expr . '-' Expr1                            (rule 14)
	Expr -> Expr . 'or' Expr1                           (rule 16)
	Expr -> Expr . 'and' Expr1                          (rule 17)
	Expr -> Expr . 'xor' Expr1                          (rule 18)
	Instr1 -> DictIdent '[' Expr ']' 'set' '(' Expr . ')'    (rule 71)

	')'            shift, and enter state 207
	'+'            shift, and enter state 95
	'-'            shift, and enter state 96
	'and'          shift, and enter state 97
	'or'           shift, and enter state 98
	'xor'          shift, and enter state 99


State 200

	Instr1 -> 'Array' Type ArrIdent '[' Expr ']' '(' . Expr ')'    (rule 67)

	'!'            shift, and enter state 63
	'('            shift, and enter state 64
	'++'           shift, and enter state 65
	'--'           shift, and enter state 66
	'false'        shift, and enter state 67
	'true'         shift, and enter state 68
	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 69

	Ident          goto state 54
	Integer        goto state 55
	VarIdent       goto state 56
	ArrIdent       goto state 57
	DictIdent      goto state 58
	FuncIdent      goto state 59
	Expr           goto state 206
	Expr1          goto state 61
	Expr2          goto state 62

State 201

	Expr -> Expr . '+' Expr1                            (rule 13)
	Expr -> Expr . '-' Expr1                            (rule 14)
	Expr -> Expr . 'or' Expr1                           (rule 16)
	Expr -> Expr . 'and' Expr1                          (rule 17)
	Expr -> Expr . 'xor' Expr1                          (rule 18)
	Instr1 -> 'for' '(' VarIdent '=' Expr 'to' Expr . ')' '{' Instr '}'    (rule 58)

	')'            shift, and enter state 205
	'+'            shift, and enter state 95
	'-'            shift, and enter state 96
	'and'          shift, and enter state 97
	'or'           shift, and enter state 98
	'xor'          shift, and enter state 99


State 202

	Instr1 -> 'if' '(' Expr ')' '{' Instr '}' . 'else' '{' Instr '}'    (rule 55)
	Instr1 -> 'if' '(' Expr ')' '{' Instr '}' .         (rule 56)

	';'            reduce using rule 56
	'else'         shift, and enter state 204
	'}'            reduce using rule 56
	%eof           reduce using rule 56


State 203

	Instr1 -> 'while' '(' Expr ')' '{' Instr '}' .      (rule 57)

	';'            reduce using rule 57
	'}'            reduce using rule 57
	%eof           reduce using rule 57


State 204

	Instr1 -> 'if' '(' Expr ')' '{' Instr '}' 'else' . '{' Instr '}'    (rule 55)

	'{'            shift, and enter state 215


State 205

	Instr1 -> 'for' '(' VarIdent '=' Expr 'to' Expr ')' . '{' Instr '}'    (rule 58)

	'{'            shift, and enter state 214


State 206

	Expr -> Expr . '+' Expr1                            (rule 13)
	Expr -> Expr . '-' Expr1                            (rule 14)
	Expr -> Expr . 'or' Expr1                           (rule 16)
	Expr -> Expr . 'and' Expr1                          (rule 17)
	Expr -> Expr . 'xor' Expr1                          (rule 18)
	Instr1 -> 'Array' Type ArrIdent '[' Expr ']' '(' Expr . ')'    (rule 67)

	')'            shift, and enter state 213
	'+'            shift, and enter state 95
	'-'            shift, and enter state 96
	'and'          shift, and enter state 97
	'or'           shift, and enter state 98
	'xor'          shift, and enter state 99


State 207

	Instr1 -> DictIdent '[' Expr ']' 'set' '(' Expr ')' .    (rule 71)

	';'            reduce using rule 71
	'}'            reduce using rule 71
	%eof           reduce using rule 71


State 208

	Instr1 -> ArrIdent '[' Expr ']' '=' '(' Expr ')' .    (rule 69)

	';'            reduce using rule 69
	'}'            reduce using rule 69
	%eof           reduce using rule 69


State 209

	Lambda -> FType 'lambda' '(' Params . ')' '->' '{' Instr '}'    (rule 51)

	')'            shift, and enter state 212


State 210

	Expr2 -> DictIdent 'has' 'key' '[' Expr ']' .       (rule 40)

	'!='           reduce using rule 40
	'%'            reduce using rule 40
	')'            reduce using rule 40
	'*'            reduce using rule 40
	'+'            reduce using rule 40
	','            reduce using rule 40
	'-'            reduce using rule 40
	'/'            reduce using rule 40
	';'            reduce using rule 40
	'<'            reduce using rule 40
	'<='           reduce using rule 40
	'=='           reduce using rule 40
	'>'            reduce using rule 40
	'>='           reduce using rule 40
	']'            reduce using rule 40
	'and'          reduce using rule 40
	'or'           reduce using rule 40
	'to'           reduce using rule 40
	'xor'          reduce using rule 40
	'}'            reduce using rule 40
	%eof           reduce using rule 40


State 211

	Instr1 -> FType FuncIdent '(' Params ')' '{' Instr '}' .    (rule 72)

	';'            reduce using rule 72
	'}'            reduce using rule 72
	%eof           reduce using rule 72


State 212

	Lambda -> FType 'lambda' '(' Params ')' . '->' '{' Instr '}'    (rule 51)

	'->'           shift, and enter state 218


State 213

	Instr1 -> 'Array' Type ArrIdent '[' Expr ']' '(' Expr ')' .    (rule 67)

	';'            reduce using rule 67
	'}'            reduce using rule 67
	%eof           reduce using rule 67


State 214

	Instr1 -> 'for' '(' VarIdent '=' Expr 'to' Expr ')' '{' . Instr '}'    (rule 58)

	'Array'        shift, and enter state 11
	'Bool'         shift, and enter state 12
	'BoolFunc'     shift, and enter state 13
	'Dict'         shift, and enter state 14
	'Int'          shift, and enter state 15
	'IntFunc'      shift, and enter state 16
	'break'        shift, and enter state 17
	'continue'     shift, and enter state 18
	'debug'        shift, and enter state 19
	'for'          shift, and enter state 20
	'if'           shift, and enter state 21
	'print'        shift, and enter state 22
	'return'       shift, and enter state 23
	'skip'         shift, and enter state 24
	'swap'         shift, and enter state 25
	'while'        shift, and enter state 26
	L_Ident        shift, and enter state 2

	Ident          goto state 3
	Type           goto state 4
	FType          goto state 5
	VarIdent       goto state 6
	ArrIdent       goto state 7
	DictIdent      goto state 8
	Instr          goto state 217
	Instr1         goto state 10

State 215

	Instr1 -> 'if' '(' Expr ')' '{' Instr '}' 'else' '{' . Instr '}'    (rule 55)

	'Array'        shift, and enter state 11
	'Bool'         shift, and enter state 12
	'BoolFunc'     shift, and enter state 13
	'Dict'         shift, and enter state 14
	'Int'          shift, and enter state 15
	'IntFunc'      shift, and enter state 16
	'break'        shift, and enter state 17
	'continue'     shift, and enter state 18
	'debug'        shift, and enter state 19
	'for'          shift, and enter state 20
	'if'           shift, and enter state 21
	'print'        shift, and enter state 22
	'return'       shift, and enter state 23
	'skip'         shift, and enter state 24
	'swap'         shift, and enter state 25
	'while'        shift, and enter state 26
	L_Ident        shift, and enter state 2

	Ident          goto state 3
	Type           goto state 4
	FType          goto state 5
	VarIdent       goto state 6
	ArrIdent       goto state 7
	DictIdent      goto state 8
	Instr          goto state 216
	Instr1         goto state 10

State 216

	Instr1 -> 'if' '(' Expr ')' '{' Instr '}' 'else' '{' Instr . '}'    (rule 55)

	'}'            shift, and enter state 221


State 217

	Instr1 -> 'for' '(' VarIdent '=' Expr 'to' Expr ')' '{' Instr . '}'    (rule 58)

	'}'            shift, and enter state 220


State 218

	Lambda -> FType 'lambda' '(' Params ')' '->' . '{' Instr '}'    (rule 51)

	'{'            shift, and enter state 219


State 219

	Lambda -> FType 'lambda' '(' Params ')' '->' '{' . Instr '}'    (rule 51)

	'Array'        shift, and enter state 11
	'Bool'         shift, and enter state 12
	'BoolFunc'     shift, and enter state 13
	'Dict'         shift, and enter state 14
	'Int'          shift, and enter state 15
	'IntFunc'      shift, and enter state 16
	'break'        shift, and enter state 17
	'continue'     shift, and enter state 18
	'debug'        shift, and enter state 19
	'for'          shift, and enter state 20
	'if'           shift, and enter state 21
	'print'        shift, and enter state 22
	'return'       shift, and enter state 23
	'skip'         shift, and enter state 24
	'swap'         shift, and enter state 25
	'while'        shift, and enter state 26
	L_Ident        shift, and enter state 2

	Ident          goto state 3
	Type           goto state 4
	FType          goto state 5
	VarIdent       goto state 6
	ArrIdent       goto state 7
	DictIdent      goto state 8
	Instr          goto state 222
	Instr1         goto state 10

State 220

	Instr1 -> 'for' '(' VarIdent '=' Expr 'to' Expr ')' '{' Instr '}' .    (rule 58)

	';'            reduce using rule 58
	'}'            reduce using rule 58
	%eof           reduce using rule 58


State 221

	Instr1 -> 'if' '(' Expr ')' '{' Instr '}' 'else' '{' Instr '}' .    (rule 55)

	';'            reduce using rule 55
	'}'            reduce using rule 55
	%eof           reduce using rule 55


State 222

	Lambda -> FType 'lambda' '(' Params ')' '->' '{' Instr . '}'    (rule 51)

	'}'            shift, and enter state 223


State 223

	Lambda -> FType 'lambda' '(' Params ')' '->' '{' Instr '}' .    (rule 51)

	')'            reduce using rule 51
	','            reduce using rule 51


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 83
Number of terminals: 66
Number of non-terminals: 17
Number of states: 224
