-- File generated by the BNF Converter (bnfc 2.9.4).

-- Templates for pattern matching on abstract syntax

{-# OPTIONS_GHC -fno-warn-unused-matches #-}

module FraJer.Skel where

import Prelude (($), Either(..), String, (++), Show, show)
import qualified FraJer.Abs

type Err = Either String
type Result = Err String

failure :: Show a => a -> Result
failure x = Left $ "Undefined case: " ++ show x

transIdent :: FraJer.Abs.Ident -> Result
transIdent x = case x of
  FraJer.Abs.Ident string -> failure x

transSType :: FraJer.Abs.SType -> Result
transSType x = case x of
  FraJer.Abs.STInt -> failure x
  FraJer.Abs.STBool -> failure x

transFType :: FraJer.Abs.FType -> Result
transFType x = case x of
  FraJer.Abs.FTInt -> failure x
  FraJer.Abs.FTBool -> failure x

transExpr :: FraJer.Abs.Expr -> Result
transExpr x = case x of
  FraJer.Abs.FuncVal ident args -> failure x
  FraJer.Abs.VarVal ident -> failure x
  FraJer.Abs.EPlus expr1 expr2 -> failure x
  FraJer.Abs.EMinus expr1 expr2 -> failure x
  FraJer.Abs.EDiv expr1 expr2 -> failure x
  FraJer.Abs.EMul expr1 expr2 -> failure x
  FraJer.Abs.EMod expr1 expr2 -> failure x
  FraJer.Abs.ENum integer -> failure x
  FraJer.Abs.EPostInc ident -> failure x
  FraJer.Abs.EPreInc ident -> failure x
  FraJer.Abs.EPostDec ident -> failure x
  FraJer.Abs.EPreDec ident -> failure x
  FraJer.Abs.EArray ident expr -> failure x
  FraJer.Abs.EDict ident expr -> failure x
  FraJer.Abs.BTrue -> failure x
  FraJer.Abs.BFalse -> failure x
  FraJer.Abs.EEq expr1 expr2 -> failure x
  FraJer.Abs.ELeq expr1 expr2 -> failure x
  FraJer.Abs.EGeq expr1 expr2 -> failure x
  FraJer.Abs.ELt expr1 expr2 -> failure x
  FraJer.Abs.EGt expr1 expr2 -> failure x
  FraJer.Abs.ENeq expr1 expr2 -> failure x
  FraJer.Abs.BNot expr -> failure x
  FraJer.Abs.BOr expr1 expr2 -> failure x
  FraJer.Abs.BAnd expr1 expr2 -> failure x
  FraJer.Abs.BXor expr1 expr2 -> failure x
  FraJer.Abs.BDictHasKey ident expr -> failure x

transArgs :: FraJer.Abs.Args -> Result
transArgs x = case x of
  FraJer.Abs.ArgsVoid -> failure x
  FraJer.Abs.ArgsOne expr -> failure x
  FraJer.Abs.ArgsMany expr args -> failure x
  FraJer.Abs.ArgsLambda lambda -> failure x
  FraJer.Abs.ArgsLambdaMany lambda args -> failure x

transParams :: FraJer.Abs.Params -> Result
transParams x = case x of
  FraJer.Abs.ParamsNone -> failure x
  FraJer.Abs.ParamVar stype ident -> failure x
  FraJer.Abs.ParamFunc ftype ident -> failure x
  FraJer.Abs.ParamVarMany stype ident params -> failure x
  FraJer.Abs.ParamFuncMany ftype ident params -> failure x

transLambda :: FraJer.Abs.Lambda -> Result
transLambda x = case x of
  FraJer.Abs.Lam ftype params instr -> failure x

transInstr :: FraJer.Abs.Instr -> Result
transInstr x = case x of
  FraJer.Abs.ISeq instr1 instr2 -> failure x
  FraJer.Abs.IDSeq def instr -> failure x
  FraJer.Abs.IStmt stmt -> failure x
  FraJer.Abs.ISSeq specstmt instr -> failure x

transDef :: FraJer.Abs.Def -> Result
transDef x = case x of
  FraJer.Abs.VarDef stype ident expr -> failure x
  FraJer.Abs.FuncDef ftype ident params instr -> failure x
  FraJer.Abs.ArrDefInit stype ident expr1 expr2 -> failure x
  FraJer.Abs.ArrDef stype ident expr -> failure x
  FraJer.Abs.DictDef stype ident -> failure x

transStmt :: FraJer.Abs.Stmt -> Result
transStmt x = case x of
  FraJer.Abs.SIf expr instr1 instr2 -> failure x
  FraJer.Abs.SWhile expr instr -> failure x
  FraJer.Abs.SFor ident expr1 expr2 instr -> failure x
  FraJer.Abs.SSkip -> failure x
  FraJer.Abs.SReturn expr -> failure x
  FraJer.Abs.SPrint expr -> failure x
  FraJer.Abs.SBreak expr -> failure x
  FraJer.Abs.SBreak1 -> failure x
  FraJer.Abs.SContinue expr -> failure x
  FraJer.Abs.SContinue0 -> failure x
  FraJer.Abs.VarAssign ident expr -> failure x
  FraJer.Abs.VarAssignPlus ident expr -> failure x
  FraJer.Abs.VarAssignMinus ident expr -> failure x
  FraJer.Abs.VarAssignMul ident expr -> failure x
  FraJer.Abs.VarAssignDiv ident expr -> failure x
  FraJer.Abs.VarAssignMod ident expr -> failure x
  FraJer.Abs.ArrElSet ident expr1 expr2 -> failure x
  FraJer.Abs.DictElSet ident expr1 expr2 -> failure x

transSpecStmt :: FraJer.Abs.SpecStmt -> Result
transSpecStmt x = case x of
  FraJer.Abs.SSwap ident1 ident2 -> failure x
  FraJer.Abs.DebugAssEnable ident -> failure x
  FraJer.Abs.DebugAssDisable ident -> failure x
  FraJer.Abs.DebugReadEnable ident -> failure x
  FraJer.Abs.DebugReadDisable ident -> failure x
