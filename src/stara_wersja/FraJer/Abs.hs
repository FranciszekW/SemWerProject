-- File generated by the BNF Converter (bnfc 2.9.5).

{-# LANGUAGE GeneralizedNewtypeDeriving #-}

-- | The abstract syntax of language FraJer.

module FraJer.Abs where

import Prelude (Integer, String)
import qualified Prelude as C (Eq, Ord, Show, Read)
import qualified Data.String

data SType = STInt | STBool
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data FType = FTInt | FTBool
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Expr
    = FuncVal Ident Args
    | VarVal Ident
    | EPlus Expr Expr
    | EMinus Expr Expr
    | EDiv Expr Expr
    | EMul Expr Expr
    | EMod Expr Expr
    | ENum Integer
    | EPostInc Ident
    | EPreInc Ident
    | EPostDec Ident
    | EPreDec Ident
    | EArray Ident Expr
    | EDict Ident Expr
    | BTrue
    | BFalse
    | EEq Expr Expr
    | ELeq Expr Expr
    | EGeq Expr Expr
    | ELt Expr Expr
    | EGt Expr Expr
    | ENeq Expr Expr
    | BNot Expr
    | BOr Expr Expr
    | BAnd Expr Expr
    | BXor Expr Expr
    | BDictHasKey Ident Expr
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Args
    = ArgsVoid
    | ArgsOne Expr
    | ArgsMany Expr Args
    | ArgsLambda Lambda
    | ArgsLambdaMany Lambda Args
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Params
    = ParamsNone
    | ParamVar SType Ident
    | ParamFunc FType Ident
    | ParamVarMany SType Ident Params
    | ParamFuncMany FType Ident Params
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Lambda = Lam FType Params Instr
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Instr
    = ISeq Instr Instr | IDef Def | IStmt Stmt | ISpecStmt SpecStmt
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Def
    = VarDef SType Ident Expr
    | FuncDef FType Ident Params Instr
    | ArrDefInit SType Ident Expr Expr
    | ArrDef SType Ident Expr
    | DictDef SType Ident
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Stmt
    = SIf Expr Instr Instr
    | SWhile Expr Instr
    | SFor Ident Expr Expr Instr
    | SSkip
    | SReturn Expr
    | SPrint Expr
    | SBreak Expr
    | SBreak1
    | SContinue Expr
    | SContinue0
    | VarAssign Ident Expr
    | VarAssignPlus Ident Expr
    | VarAssignMinus Ident Expr
    | VarAssignMul Ident Expr
    | VarAssignDiv Ident Expr
    | VarAssignMod Ident Expr
    | ArrElSet Ident Expr Expr
    | DictElSet Ident Expr Expr
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data SpecStmt
    = SSwap Ident Ident
    | DebugAssEnable Ident
    | DebugAssDisable Ident
    | DebugReadEnable Ident
    | DebugReadDisable Ident
  deriving (C.Eq, C.Ord, C.Show, C.Read)

sif1 :: Expr -> Instr -> Instr -> Stmt
sif1 = \ b1 i1 i2 -> SIf b1 i1 i2

sif2 :: Expr -> Instr -> Stmt
sif2 = \ b1 i1 -> SIf b1 i1 (IStmt SSkip)

newtype Ident = Ident String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

