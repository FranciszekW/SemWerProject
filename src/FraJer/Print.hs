-- File generated by the BNF Converter (bnfc 2.9.5).

{-# LANGUAGE CPP #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE LambdaCase #-}
#if __GLASGOW_HASKELL__ <= 708
{-# LANGUAGE OverlappingInstances #-}
#endif

-- | Pretty-printer for FraJer.

module FraJer.Print where

import Prelude
  ( ($), (.)
  , Bool(..), (==), (<)
  , Int, Integer, Double, (+), (-), (*)
  , String, (++)
  , ShowS, showChar, showString
  , all, elem, foldr, id, map, null, replicate, shows, span
  )
import Data.Char ( Char, isSpace )
import qualified FraJer.Abs

-- | The top-level printing method.

printTree :: Print a => a -> String
printTree = render . prt 0

type Doc = [ShowS] -> [ShowS]

doc :: ShowS -> Doc
doc = (:)

render :: Doc -> String
render d = rend 0 False (map ($ "") $ d []) ""
  where
  rend
    :: Int        -- ^ Indentation level.
    -> Bool       -- ^ Pending indentation to be output before next character?
    -> [String]
    -> ShowS
  rend i p = \case
      "["      :ts -> char '[' . rend i False ts
      "("      :ts -> char '(' . rend i False ts
      "{"      :ts -> onNewLine i     p . showChar   '{'  . new (i+1) ts
      "}" : ";":ts -> onNewLine (i-1) p . showString "};" . new (i-1) ts
      "}"      :ts -> onNewLine (i-1) p . showChar   '}'  . new (i-1) ts
      [";"]        -> char ';'
      ";"      :ts -> char ';' . new i ts
      t  : ts@(s:_) | closingOrPunctuation s
                   -> pending . showString t . rend i False ts
      t        :ts -> pending . space t      . rend i False ts
      []           -> id
    where
    -- Output character after pending indentation.
    char :: Char -> ShowS
    char c = pending . showChar c

    -- Output pending indentation.
    pending :: ShowS
    pending = if p then indent i else id

  -- Indentation (spaces) for given indentation level.
  indent :: Int -> ShowS
  indent i = replicateS (2*i) (showChar ' ')

  -- Continue rendering in new line with new indentation.
  new :: Int -> [String] -> ShowS
  new j ts = showChar '\n' . rend j True ts

  -- Make sure we are on a fresh line.
  onNewLine :: Int -> Bool -> ShowS
  onNewLine i p = (if p then id else showChar '\n') . indent i

  -- Separate given string from following text by a space (if needed).
  space :: String -> ShowS
  space t s =
    case (all isSpace t, null spc, null rest) of
      (True , _   , True ) -> []             -- remove trailing space
      (False, _   , True ) -> t              -- remove trailing space
      (False, True, False) -> t ++ ' ' : s   -- add space if none
      _                    -> t ++ s
    where
      (spc, rest) = span isSpace s

  closingOrPunctuation :: String -> Bool
  closingOrPunctuation [c] = c `elem` closerOrPunct
  closingOrPunctuation _   = False

  closerOrPunct :: String
  closerOrPunct = ")],;"

parenth :: Doc -> Doc
parenth ss = doc (showChar '(') . ss . doc (showChar ')')

concatS :: [ShowS] -> ShowS
concatS = foldr (.) id

concatD :: [Doc] -> Doc
concatD = foldr (.) id

replicateS :: Int -> ShowS -> ShowS
replicateS n f = concatS (replicate n f)

-- | The printer class does the job.

class Print a where
  prt :: Int -> a -> Doc

instance {-# OVERLAPPABLE #-} Print a => Print [a] where
  prt i = concatD . map (prt i)

instance Print Char where
  prt _ c = doc (showChar '\'' . mkEsc '\'' c . showChar '\'')

instance Print String where
  prt _ = printString

printString :: String -> Doc
printString s = doc (showChar '"' . concatS (map (mkEsc '"') s) . showChar '"')

mkEsc :: Char -> Char -> ShowS
mkEsc q = \case
  s | s == q -> showChar '\\' . showChar s
  '\\' -> showString "\\\\"
  '\n' -> showString "\\n"
  '\t' -> showString "\\t"
  s -> showChar s

prPrec :: Int -> Int -> Doc -> Doc
prPrec i j = if j < i then parenth else id

instance Print Integer where
  prt _ x = doc (shows x)

instance Print Double where
  prt _ x = doc (shows x)

instance Print FraJer.Abs.Ident where
  prt _ (FraJer.Abs.Ident i) = doc $ showString i
instance Print FraJer.Abs.Type where
  prt i = \case
    FraJer.Abs.TInt -> prPrec i 0 (concatD [doc (showString "Int")])
    FraJer.Abs.TBool -> prPrec i 0 (concatD [doc (showString "Bool")])

instance Print FraJer.Abs.FType where
  prt i = \case
    FraJer.Abs.FTInt -> prPrec i 0 (concatD [doc (showString "IntFunc")])
    FraJer.Abs.FTBool -> prPrec i 0 (concatD [doc (showString "BoolFunc")])

instance Print FraJer.Abs.VarIdent where
  prt i = \case
    FraJer.Abs.Var id_ -> prPrec i 0 (concatD [prt 0 id_])

instance Print FraJer.Abs.ArrIdent where
  prt i = \case
    FraJer.Abs.Arr id_ -> prPrec i 0 (concatD [prt 0 id_])

instance Print FraJer.Abs.DictIdent where
  prt i = \case
    FraJer.Abs.Dict id_ -> prPrec i 0 (concatD [prt 0 id_])

instance Print FraJer.Abs.FuncIdent where
  prt i = \case
    FraJer.Abs.Func id_ -> prPrec i 0 (concatD [prt 0 id_])

instance Print FraJer.Abs.Expr where
  prt i = \case
    FraJer.Abs.IE iexpr -> prPrec i 0 (concatD [prt 0 iexpr])
    FraJer.Abs.BE bexpr -> prPrec i 0 (concatD [prt 0 bexpr])

instance Print FraJer.Abs.IExpr where
  prt i = \case
    FraJer.Abs.EPlus iexpr1 iexpr2 -> prPrec i 0 (concatD [prt 0 iexpr1, doc (showString "+"), prt 1 iexpr2])
    FraJer.Abs.EMinus iexpr1 iexpr2 -> prPrec i 0 (concatD [prt 0 iexpr1, doc (showString "-"), prt 1 iexpr2])
    FraJer.Abs.EDiv iexpr1 iexpr2 -> prPrec i 1 (concatD [prt 1 iexpr1, doc (showString "/"), prt 2 iexpr2])
    FraJer.Abs.EMul iexpr1 iexpr2 -> prPrec i 1 (concatD [prt 1 iexpr1, doc (showString "*"), prt 2 iexpr2])
    FraJer.Abs.EMod iexpr1 iexpr2 -> prPrec i 1 (concatD [prt 1 iexpr1, doc (showString "%"), prt 2 iexpr2])
    FraJer.Abs.ENum n -> prPrec i 2 (concatD [prt 0 n])
    FraJer.Abs.EVar varident -> prPrec i 2 (concatD [prt 0 varident])
    FraJer.Abs.EPostInc varident -> prPrec i 2 (concatD [prt 0 varident, doc (showString "++")])
    FraJer.Abs.EPreInc varident -> prPrec i 2 (concatD [doc (showString "++"), prt 0 varident])
    FraJer.Abs.EPostDec varident -> prPrec i 2 (concatD [prt 0 varident, doc (showString "--")])
    FraJer.Abs.EPreDec varident -> prPrec i 2 (concatD [doc (showString "--"), prt 0 varident])
    FraJer.Abs.EArray arrident iexpr -> prPrec i 2 (concatD [prt 0 arrident, doc (showString "["), prt 0 iexpr, doc (showString "]")])
    FraJer.Abs.EDict dictident iexpr -> prPrec i 2 (concatD [prt 0 dictident, doc (showString "["), prt 0 iexpr, doc (showString "]")])
    FraJer.Abs.EDictB dictident bexpr -> prPrec i 2 (concatD [prt 0 dictident, doc (showString "["), prt 0 bexpr, doc (showString "]")])
    FraJer.Abs.EFuncVal funcident args -> prPrec i 2 (concatD [prt 0 funcident, doc (showString "("), prt 0 args, doc (showString ")")])

instance Print FraJer.Abs.BExpr where
  prt i = \case
    FraJer.Abs.BTrue -> prPrec i 1 (concatD [doc (showString "true")])
    FraJer.Abs.BFalse -> prPrec i 1 (concatD [doc (showString "false")])
    FraJer.Abs.BVar varident -> prPrec i 1 (concatD [prt 0 varident])
    FraJer.Abs.BEq iexpr1 iexpr2 -> prPrec i 1 (concatD [prt 0 iexpr1, doc (showString "=="), prt 0 iexpr2])
    FraJer.Abs.BLeq iexpr1 iexpr2 -> prPrec i 1 (concatD [prt 0 iexpr1, doc (showString "<="), prt 0 iexpr2])
    FraJer.Abs.BGeq iexpr1 iexpr2 -> prPrec i 1 (concatD [prt 0 iexpr1, doc (showString ">="), prt 0 iexpr2])
    FraJer.Abs.BLt iexpr1 iexpr2 -> prPrec i 1 (concatD [prt 0 iexpr1, doc (showString "<"), prt 0 iexpr2])
    FraJer.Abs.BGt iexpr1 iexpr2 -> prPrec i 1 (concatD [prt 0 iexpr1, doc (showString ">"), prt 0 iexpr2])
    FraJer.Abs.BNeq iexpr1 iexpr2 -> prPrec i 1 (concatD [prt 0 iexpr1, doc (showString "!="), prt 0 iexpr2])
    FraJer.Abs.BEqB bexpr1 bexpr2 -> prPrec i 1 (concatD [prt 0 bexpr1, doc (showString "=="), prt 0 bexpr2])
    FraJer.Abs.BNeqB bexpr1 bexpr2 -> prPrec i 1 (concatD [prt 0 bexpr1, doc (showString "!="), prt 0 bexpr2])
    FraJer.Abs.BNot bexpr -> prPrec i 1 (concatD [doc (showString "!"), prt 1 bexpr])
    FraJer.Abs.BOr bexpr1 bexpr2 -> prPrec i 1 (concatD [prt 0 bexpr1, doc (showString "or"), prt 1 bexpr2])
    FraJer.Abs.BAnd bexpr1 bexpr2 -> prPrec i 1 (concatD [prt 0 bexpr1, doc (showString "and"), prt 1 bexpr2])
    FraJer.Abs.BXor bexpr1 bexpr2 -> prPrec i 1 (concatD [prt 0 bexpr1, doc (showString "xor"), prt 1 bexpr2])
    FraJer.Abs.BArray arrident iexpr -> prPrec i 1 (concatD [prt 0 arrident, doc (showString "["), prt 0 iexpr, doc (showString "]")])
    FraJer.Abs.BDict dictident iexpr -> prPrec i 1 (concatD [prt 0 dictident, doc (showString "["), prt 0 iexpr, doc (showString "]")])
    FraJer.Abs.BDictB dictident bexpr -> prPrec i 1 (concatD [prt 0 dictident, doc (showString "["), prt 0 bexpr, doc (showString "]")])
    FraJer.Abs.BDictHasKey dictident iexpr -> prPrec i 1 (concatD [prt 0 dictident, doc (showString "has"), doc (showString "key"), doc (showString "["), prt 0 iexpr, doc (showString "]")])
    FraJer.Abs.BDictHasKeyB dictident bexpr -> prPrec i 1 (concatD [prt 0 dictident, doc (showString "has"), doc (showString "key"), doc (showString "["), prt 0 bexpr, doc (showString "]")])
    FraJer.Abs.BFuncVal funcident args -> prPrec i 1 (concatD [prt 0 funcident, doc (showString "("), prt 0 args, doc (showString ")")])

instance Print FraJer.Abs.Args where
  prt i = \case
    FraJer.Abs.ArgsNone -> prPrec i 0 (concatD [doc (showString "none")])
    FraJer.Abs.ArgsOne expr -> prPrec i 0 (concatD [prt 0 expr])
    FraJer.Abs.ArgsMany expr args -> prPrec i 0 (concatD [prt 0 expr, doc (showString ","), prt 0 args])

instance Print FraJer.Abs.Lambda where
  prt i = \case
    FraJer.Abs.Lam ftype params instr -> prPrec i 0 (concatD [prt 0 ftype, doc (showString "lambda"), doc (showString "("), prt 0 params, doc (showString ")"), doc (showString "->"), doc (showString "{"), prt 0 instr, doc (showString "}")])

instance Print FraJer.Abs.Params where
  prt i = \case
    FraJer.Abs.ParamsNone -> prPrec i 0 (concatD [doc (showString "none")])
    FraJer.Abs.ParamVar varident type_ -> prPrec i 0 (concatD [prt 0 varident, doc (showString ":"), prt 0 type_])
    FraJer.Abs.ParamFunc funcident ftype -> prPrec i 0 (concatD [prt 0 funcident, doc (showString ":"), prt 0 ftype])
    FraJer.Abs.ParamLambda lambda -> prPrec i 0 (concatD [prt 0 lambda])
    FraJer.Abs.ParamVarMany varident type_ params -> prPrec i 0 (concatD [prt 0 varident, doc (showString ":"), prt 0 type_, doc (showString ","), prt 0 params])
    FraJer.Abs.ParamFuncMany funcident ftype params -> prPrec i 0 (concatD [prt 0 funcident, doc (showString ":"), prt 0 ftype, doc (showString ","), prt 0 params])
    FraJer.Abs.ParamLambdaMany lambda params -> prPrec i 0 (concatD [prt 0 lambda, doc (showString ","), prt 0 params])

instance Print FraJer.Abs.Instr where
  prt i = \case
    FraJer.Abs.ISkip -> prPrec i 1 (concatD [doc (showString "skip")])
    FraJer.Abs.ISeq instr1 instr2 -> prPrec i 0 (concatD [prt 1 instr1, doc (showString ";"), prt 0 instr2])
    FraJer.Abs.IIf bexpr instr1 instr2 -> prPrec i 1 (concatD [doc (showString "if"), doc (showString "("), prt 0 bexpr, doc (showString ")"), doc (showString "{"), prt 0 instr1, doc (showString "}"), doc (showString "else"), doc (showString "{"), prt 0 instr2, doc (showString "}")])
    FraJer.Abs.IWhile bexpr instr -> prPrec i 1 (concatD [doc (showString "while"), doc (showString "("), prt 0 bexpr, doc (showString ")"), doc (showString "{"), prt 0 instr, doc (showString "}")])
    FraJer.Abs.IFor varident iexpr1 iexpr2 instr -> prPrec i 1 (concatD [doc (showString "for"), doc (showString "("), prt 0 varident, doc (showString "="), prt 0 iexpr1, doc (showString "to"), prt 0 iexpr2, doc (showString ")"), doc (showString "{"), prt 0 instr, doc (showString "}")])
    FraJer.Abs.IReturn iexpr -> prPrec i 1 (concatD [doc (showString "return"), doc (showString "("), prt 0 iexpr, doc (showString ")")])
    FraJer.Abs.IPrint iexpr -> prPrec i 1 (concatD [doc (showString "print"), doc (showString "("), prt 0 iexpr, doc (showString ")")])
    FraJer.Abs.ISwap varident1 varident2 -> prPrec i 1 (concatD [doc (showString "swap"), doc (showString "("), prt 0 varident1, doc (showString ","), prt 0 varident2, doc (showString ")")])
    FraJer.Abs.IBreak iexpr -> prPrec i 1 (concatD [doc (showString "break"), doc (showString "("), prt 0 iexpr, doc (showString ")")])
    FraJer.Abs.IBreak1 -> prPrec i 1 (concatD [doc (showString "break")])
    FraJer.Abs.IContinue iexpr -> prPrec i 1 (concatD [doc (showString "continue"), doc (showString "outer"), doc (showString "("), prt 0 iexpr, doc (showString ")")])
    FraJer.Abs.IContinue0 -> prPrec i 1 (concatD [doc (showString "continue")])
    FraJer.Abs.VarDef type_ varident expr -> prPrec i 1 (concatD [prt 0 type_, prt 0 varident, doc (showString "="), prt 0 expr])
    FraJer.Abs.ArrDefInit type_ arrident iexpr expr -> prPrec i 1 (concatD [doc (showString "Array"), prt 0 type_, prt 0 arrident, doc (showString "["), prt 0 iexpr, doc (showString "]"), doc (showString "("), prt 0 expr, doc (showString ")")])
    FraJer.Abs.ArrDef type_ arrident iexpr -> prPrec i 1 (concatD [doc (showString "Array"), prt 0 type_, prt 0 arrident, doc (showString "["), prt 0 iexpr, doc (showString "]")])
    FraJer.Abs.ArrElSet arrident iexpr1 iexpr2 -> prPrec i 1 (concatD [prt 0 arrident, doc (showString "["), prt 0 iexpr1, doc (showString "]"), doc (showString "="), doc (showString "("), prt 0 iexpr2, doc (showString ")")])
    FraJer.Abs.DictDef type_ dictident -> prPrec i 1 (concatD [doc (showString "Dict"), prt 0 type_, prt 0 dictident])
    FraJer.Abs.DictElSet dictident iexpr1 iexpr2 -> prPrec i 1 (concatD [prt 0 dictident, doc (showString "["), prt 0 iexpr1, doc (showString "]"), doc (showString "set"), doc (showString "("), prt 0 iexpr2, doc (showString ")")])
    FraJer.Abs.FuncDef ftype funcident params instr -> prPrec i 1 (concatD [prt 0 ftype, prt 0 funcident, doc (showString "("), prt 0 params, doc (showString ")"), doc (showString "{"), prt 0 instr, doc (showString "}")])
    FraJer.Abs.VarAssign varident iexpr -> prPrec i 1 (concatD [prt 0 varident, doc (showString "="), prt 0 iexpr])
    FraJer.Abs.VarAssignPlus varident iexpr -> prPrec i 1 (concatD [prt 0 varident, doc (showString "+="), prt 0 iexpr])
    FraJer.Abs.VarAssignMinus varident iexpr -> prPrec i 1 (concatD [prt 0 varident, doc (showString "-="), prt 0 iexpr])
    FraJer.Abs.VarAssignMul varident iexpr -> prPrec i 1 (concatD [prt 0 varident, doc (showString "*="), prt 0 iexpr])
    FraJer.Abs.VarAssignDiv varident iexpr -> prPrec i 1 (concatD [prt 0 varident, doc (showString "/="), prt 0 iexpr])
    FraJer.Abs.VarAssignMod varident iexpr -> prPrec i 1 (concatD [prt 0 varident, doc (showString "%="), prt 0 iexpr])
    FraJer.Abs.DebugAssEnable varident -> prPrec i 1 (concatD [doc (showString "debug"), doc (showString "assignment"), doc (showString "enable"), prt 0 varident])
    FraJer.Abs.DebugAssDisable varident -> prPrec i 1 (concatD [doc (showString "debug"), doc (showString "assignment"), doc (showString "disable"), prt 0 varident])
    FraJer.Abs.DebugReadEnable varident -> prPrec i 1 (concatD [doc (showString "debug"), doc (showString "reading"), doc (showString "enable"), prt 0 varident])
    FraJer.Abs.DebugReadDisable varident -> prPrec i 1 (concatD [doc (showString "debug"), doc (showString "reading"), doc (showString "disable"), prt 0 varident])
